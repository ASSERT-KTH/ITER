bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno()  -  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno()  -  1;	  int    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	10	None	replace
2	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno()  +  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno()  +  1;	  int    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno()  -  2;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno()  -  2;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno()  -  2;	  int    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  int  endLineno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getCharno();	  int    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	10	None	replace
5	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	53	None	replace
6	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	53	None	replace
7	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.errorReporter);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.errorReporter);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.errorReporter);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
8	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  this.ignoreStart);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  this.ignoreStart);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  this.ignoreStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
9	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  this.ignoreStart);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  this.ignoreStart);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  this.ignoreStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
10	[BUG]  [BUGGY]  jsdocBuilder.markText(this.ignoreStart,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(this.ignoreStart,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(this.ignoreStart,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
11	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.notificationStart);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.notificationStart);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.notificationStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
12	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno()  +  1;	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	12	None	replace
13	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno()  -  1;	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	12	None	replace
14	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  2;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  2;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno()  -  2;	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	12	None	replace
15	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  2;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  2;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno()  +  2;	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	12	None	replace
16	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getEndLineno();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getEndLineno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getEndLineno();	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  *  2;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  *  2;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno()  *  2;	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  errorReporter);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  errorReporter);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  errorReporter);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    startCharno);    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  this.ignoreStar);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  this.ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
20	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  this.ignoreStar);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  this.ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
21	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  this.lineno,  endCharno,  this.ignoreStar);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  this.lineno,  endCharno,  this.ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  this.lineno,  endCharno,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
22	[BUG]  [BUGGY]  jsdocBuilder.markText(this.ignoreStar,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(this.ignoreStar,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(this.ignoreStar,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
23	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno  +  1);	  jsdocBuilder.markText(multilineText,    null,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  lineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  JsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
26	[BUG]  [BUGGY]  JsDocBuilder.markText(multilineText,  null,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(multilineText,  null,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(multilineText,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
27	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  lineno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
28	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
29	[BUG]  [BUGGY]  jsdocBuilder.markText(null,  null,  endLineno,  endCharno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(null,  null,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(null,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
30	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno  +  1);	  jsdocBuilder.markText(token,    endLineno,    endCharno);    	non-compiled	[CE]  	30	None	replace
31	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  lineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  lineno,  endCharno);	  jsdocBuilder.markText(token,    null,    lineno,    startLineno,    endCharno);    	non-compiled	[CE]  	48	None	replace
32	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  startCharno);	  jsdocBuilder.markText(token,    null,    lineno,    startLineno,    endCharno);    	non-compiled	[CE]  	48	None	replace
33	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  startCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  startCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
34	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  startCharno  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  startCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  startCharno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
35	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  endLineno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  endLineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  endLineno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
36	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
37	[BUG]  [BUGGY]  jsdocBuilder.markText(lineno,  endLineno,  endCharno,  multilineText);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(lineno,  endLineno,  endCharno,  multilineText);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(lineno,  endLineno,  endCharno,  multilineText);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
38	[BUG]  [BUGGY]  EndLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  EndLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	EndLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
39	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
40	[BUG]  [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
41	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  unreadToken,  endLineno,  endCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  unreadToken,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  unreadToken,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    NO_UNREAD_TOKEN,    endLineno,    endCharno);    	non-compiled	[CE]  	36	None	replace
42	[BUG]  [BUGGY]  if(startLineno!=  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
43	[BUG]  [BUGGY]  if(startLineno  ==  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno  ==  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno  ==  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
44	[BUG]  [BUGGY]  n  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  n  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	n  =  stream.getLineno();  endCharno  =  stream.getCharno();	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
45	[BUG]  [BUGGY]  if(startLineno!=  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
46	[BUG]  [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(multilineText,  endLineno,  endCharno  +  1);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
47	[BUG]  [BUGGY]  JsDocBuilder.markText(token,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(token,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(token,  endLineno,  endCharno);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
48	[BUG]  [BUGGY]  JsDocBuilder.markText(builder,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(builder,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(builder,  endLineno,  endCharno);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
49	[BUG]  [BUGGY]  JsDocBuilder.markText(multilineText,  startLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(multilineText,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(multilineText,  startLineno,  endCharno);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
50	[BUG]  [BUGGY]  JsDocBuilder.markText(buffer,  endLineno,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(buffer,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(buffer,  endLineno,  endCharno);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
51	[BUG]  [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno  -  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno  -  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(multilineText,  endLineno,  endCharno  -  1);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
52	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    1);    	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  2);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  2);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  2);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    1);    	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  3);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  3);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  3);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    1);    	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  if(endLineno  <  0)  {  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  <  0)  {  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(lineno,    endLineno);    }    	non-compiled	[CE]  	60	None	replace
56	[BUG]  [BUGGY]  if(endLineno  <  0)  {  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  <  0)  {  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(lineno,    endLineno);    }    	non-compiled	[CE]  	60	None	replace
57	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  0);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  0);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    0);    	non-compiled	[CE]  	4	None	replace
58	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  unreadToken);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  lineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	37	None	replace
59	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  unreadToken);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	37	None	replace
60	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  ignoreStar);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  lineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(multilineText,    lineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	55	None	replace
61	[BUG]  [BUGGY]  JsdocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsdocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsdocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(multilineText,    lineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	55	None	replace
62	[BUG]  [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(multilineText,    lineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	55	None	replace
63	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno    +    1);    	non-compiled	[CE]  	42	None	replace
64	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startLineno  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startLineno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startLineno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno    +    1);    	non-compiled	[CE]  	42	None	replace
65	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno    +    1);    	non-compiled	[CE]  	42	None	replace
66	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  unreadToken);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  unreadToken);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	61	None	replace
67	[BUG]  [BUGGY]  if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
68	[BUG]  [BUGGY]  if(startLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
69	[BUG]  [BUGGY]  startLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  startLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	startLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  lineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  lineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	lineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
71	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno,  unreadToken);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  endLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	27	None	replace
72	[BUG]  [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
73	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  charno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  charno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  charno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    charno);    	non-compiled	[CE]  	41	None	replace
74	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  charno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  charno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  charno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    charno);    	non-compiled	[CE]  	41	None	replace
75	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  endLineno,  startCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  lineno,  endLineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  lineno,  endLineno,  startCharno);	  jsdocBuilder.markText(multilineText,    lineno,    endCharno,    startCharno);    	non-compiled	[CE]  	51	None	replace
76	[BUG]  [BUGGY]  jsdocBuilder.markText(lineno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(lineno,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(lineno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    lineno,    endCharno,    startCharno);    	non-compiled	[CE]  	51	None	replace
77	[BUG]  [BUGGY]  JsdocBuilder.markText(multilineText,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsdocBuilder.markText(multilineText,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsdocBuilder.markText(multilineText,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    lineno,    endCharno,    startCharno);    	non-compiled	[CE]  	51	None	replace
78	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0  ||  endLineno  >  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0  ||  endLineno  >  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  0  ||  endLineno  >  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
79	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
80	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  >=  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
81	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  1)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  1)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  1)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
82	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  ==  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  ==  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  ==  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
83	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  >  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
84	[BUG]  [BUGGY]  endLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  endLineno  =  stream.getLineno()  +  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  =  stream.getLineno()  +  1;	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
85	[BUG]  [BUGGY]  endLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  endLineno  =  stream.getLineno()  -  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  =  stream.getLineno()  -  1;	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
86	[BUG]  [BUGGY]  endLineno  =  stream.getLineno()  -  2;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  endLineno  =  stream.getLineno()  -  2;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  =  stream.getLineno()  -  2;	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
87	[BUG]  [BUGGY]  endLineno  =  stream.getLineno()  +  2;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  endLineno  =  stream.getLineno()  +  2;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  =  stream.getLineno()  +  2;	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
88	[BUG]  [BUGGY]  EndLineno  =  stream.getLineno();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  EndLineno  =  stream.getLineno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	EndLineno  =  stream.getLineno();	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
89	[BUG]  [BUGGY]  endLineno  =  stream.getCharno();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  endLineno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  =  stream.getCharno();	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
90	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  endCharno  +  1);	  jsdocBuilder.markText(token,    null,    endLineno,    endCharno);    	non-compiled	[CE]  	18	None	replace
91	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endCharno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endCharno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  if(endCharno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	57	None	replace
92	[BUG]  [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	57	None	replace
93	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  ==  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  ==  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  ==  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
94	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno!=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno!=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno!=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
95	[BUG]  [BUGGY]  if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
96	[BUG]  [BUGGY]  if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
97	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno!=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno!=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  if(endLineno!=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
98	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno  ==  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno  ==  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  if(endLineno  ==  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
99	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    null,    startLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	24	None	replace
100	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endCharno,  unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  lineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    null,    startLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	24	None	replace
101	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endLineno,  unreadToken);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endLineno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  lineno,  endLineno,  unreadToken);	  jsdocBuilder.markText(token,    null,    startLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	24	None	replace
102	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  ignoreStar);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(token,    null,    startLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	24	None	replace
103	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    lineno,    endCharno);    	non-compiled	[CE]  	21	None	replace
104	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startLineno,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  startLineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    lineno,    endCharno);    	non-compiled	[CE]  	21	None	replace
105	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  length,  lineno,  endCharno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  length,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  length,  lineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    lineno,    endCharno);    	non-compiled	[CE]  	21	None	replace
106	[BUG]  [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    	non-compiled	[CE]  	58	None	replace
107	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    	non-compiled	[CE]  	58	None	replace
108	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  line);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  line);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  line);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    lineno);    	non-compiled	[CE]  	34	None	replace
109	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineNumber);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineNumber);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  lineNumber);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    lineno);    	non-compiled	[CE]  	34	None	replace
110	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  errorReporter);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  errorReporter);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  errorReporter);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    errorReporter);    	non-compiled	[CE]  	6	None	replace
111	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  errorReporter);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  errorReporter);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  errorReporter);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    errorReporter);    	non-compiled	[CE]  	6	None	replace
112	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0  ||  endLineno  >  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0  ||  endLineno  >  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  0  ||  endLineno  >  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
113	[BUG]  [BUGGY]  if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
114	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
115	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  1)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  1)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  1)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
116	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  >=  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
117	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  >  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
118	[BUG]  [BUGGY]  String  token  =  multilineText.toString();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  multilineText.toString();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  multilineText.toString();	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
119	[BUG]  [BUGGY]  String  token  =  builder.toString()  +  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  builder.toString()  +  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  builder.toString()  +  1;	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
120	[BUG]  [BUGGY]  String  token  =  builder.toString()  + "n ";  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  builder.toString()  + "n ";  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  builder.toString()  + "n ";	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
121	[BUG]  [BUGGY]  String  token  =  multiline.toString();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  multiline.toString();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  multiline.toString();	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
122	[BUG]  [BUGGY]  String  token  =  parser.toString();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  parser.toString();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  parser.toString();	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
123	[BUG]  [BUGGY]  String  token  =  option.toString();  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  option.toString();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  option.toString();	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
124	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  lineno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  lineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  lineno);	  jsdocBuilder.markText(token,    null,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	49	None	replace
125	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    null,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	49	None	replace
126	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineNumber);    	non-compiled	[CE]  	3	None	replace
127	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineNumber);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineNumber);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineNumber);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineNumber);    	non-compiled	[CE]  	3	None	replace
128	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
129	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  int  endCharno  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  int  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno()  -  1;  int  endCharno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
130	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno()  +  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno()  +  1;	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
131	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno()  -  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno()  -  1;  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno()  -  1;	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
132	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getEndCharno();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getEndCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getEndCharno();	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
133	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  token,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  token,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  token,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	52	None	replace
134	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  endLineno,  endCharno);	  jsdocBuilder.markText(buffer,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	35	None	replace
135	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  errorReporter,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  errorReporter,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  errorReporter,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    errorReporter,    endLineno,    endCharno);    	non-compiled	[CE]  	20	None	replace
136	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  errorReporter,  null,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  errorReporter,  null,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  errorReporter,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    errorReporter,    endLineno,    endCharno);    	non-compiled	[CE]  	20	None	replace
137	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  line);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  line);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  line);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    lineno);    	non-compiled	[CE]  	7	None	replace
138	[BUG]  [BUGGY]  if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
139	[BUG]  [BUGGY]  if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
140	[BUG]  [BUGGY]  if(line.length()  >  0)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(line.length()  >  0)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(line.length()  >  0)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
141	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    1);    	non-compiled	[CE]  	8	None	replace
142	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    1);    	non-compiled	[CE]  	8	None	replace
143	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno,  startCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno,  startCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
144	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno,  lineno,  startCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno,  lineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  endLineno,  endCharno,  lineno,  startCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
145	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	38	None	replace
146	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno,  unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    null,    startLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	24	None	replace
147	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno,  lineNumber);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno,  lineNumber);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(builder,  endLineno,  endCharno,  lineNumber);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineNumber);    	non-compiled	[CE]  	3	None	replace
148	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineNumber);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineNumber);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  lineNumber);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineNumber);    	non-compiled	[CE]  	3	None	replace
149	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  startLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  lineno,  startLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    lineno,    endLineno,    endCharno);    	non-compiled	[CE]  	22	None	replace
150	[BUG]  [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
151	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  sourceFile,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  sourceFile,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  sourceFile,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    errorReporter,    endLineno,    endCharno);    	non-compiled	[CE]  	20	None	replace
152	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  DEPRECATED_TOKEN,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  DEPRECATED_TOKEN,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  DEPRECATED_TOKEN,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    errorReporter,    endLineno,    endCharno);    	non-compiled	[CE]  	20	None	replace
153	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  this.ignoreStar);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  this.ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
154	[BUG]  [BUGGY]  jsdocBuilder.markText(this.fileLevelJsDocBuilder,  endLineno,  endCharno,  this.ignoreStar);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(this.fileLevelJsDocBuilder,  endLineno,  endCharno,  this.ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(this.fileLevelJsDocBuilder,  endLineno,  endCharno,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
155	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  null,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(buffer,  null,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
156	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  null,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(builder,  null,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(builder,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
157	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  startLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno);    	non-compiled	[CE]  	28	None	replace
158	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(builder,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	1	None	replace
159	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getCharno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Integer  endLineno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	12	None	replace
160	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  null);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  null);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  null);	  jsdocBuilder.markText(token,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	40	None	replace
161	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  charno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  charno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  charno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    charno);    	non-compiled	[CE]  	41	None	replace
162	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  multilineText);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  multilineText);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  multilineText);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	61	None	replace
163	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  endLineno,  startCharno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	50	None	replace
164	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  errorReporter);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  errorReporter);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  errorReporter);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    errorReporter);    	non-compiled	[CE]  	6	None	replace
165	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno,  errorReporter);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  endCharno,  errorReporter);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  endLineno,  endCharno,  errorReporter);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    errorReporter);    	non-compiled	[CE]  	6	None	replace
166	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno,  errorReporter);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno,  errorReporter);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(builder,  endLineno,  endCharno,  errorReporter);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    errorReporter);    	non-compiled	[CE]  	6	None	replace
167	[BUG]  [BUGGY]  jsdocBuilder.appendText(token,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.appendText(token,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.appendText(token,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno);    	non-compiled	[CE]  	39	None	replace
168	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  0);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  0);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    0);    	non-compiled	[CE]  	4	None	replace
169	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  false);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  false);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  false);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    0);    	non-compiled	[CE]  	4	None	replace
170	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  this.ignoreStart);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  this.ignoreStart);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  this.ignoreStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
171	[BUG]  [BUGGY]  jsdocBuilder.markText(this.fileLevelJsDocBuilder,  endLineno,  endCharno,  this.ignoreStart);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(this.fileLevelJsDocBuilder,  endLineno,  endCharno,  this.ignoreStart);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(this.fileLevelJsDocBuilder,  endLineno,  endCharno,  this.ignoreStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
172	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  endCharno,  lineno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  endCharno,  lineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  startLineno,  endCharno,  lineno);	  jsdocBuilder.markText(buffer,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	35	None	replace
173	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno);    	non-compiled	[CE]  	30	None	replace
174	[BUG]  [BUGGY]  int  endLineno  =  stream.getEndLineno();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getEndLineno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getEndLineno();	  int    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	10	None	replace
175	[BUG]  [BUGGY]  String  token  =  jsdocBuilder.toString();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  jsdocBuilder.toString();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  jsdocBuilder.toString();	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
176	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  lineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  endCharno,  lineno,  endCharno);	  jsdocBuilder.markText(token,    null,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	49	None	replace
177	[BUG]  [BUGGY]  JsDocBuilder.markText(token,  startLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(token,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(token,  startLineno,  endCharno);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
178	[BUG]  [BUGGY]  endLineno  -=  stream.getLineno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  endLineno  -=  stream.getLineno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  -=  stream.getLineno();	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
179	[BUG]  [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(lineno,    endLineno);    }    	non-compiled	[CE]  	60	None	replace
180	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLinen  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLinen  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLinen	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(lineno,    endLineno);    }    	non-compiled	[CE]  	60	None	replace
181	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  whitespace);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  whitespace);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  whitespace);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    lineno);    	non-compiled	[CE]  	34	None	replace
182	[BUG]  [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	57	None	replace
183	[BUG]  [BUGGY]  if(endLineno!=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno!=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno!=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	57	None	replace
184	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  endCharno  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  endCharno  +  1);	  jsdocBuilder.markText(token,    NO_UNREAD_TOKEN,    endLineno,    endCharno);    	non-compiled	[CE]  	36	None	replace
185	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  startLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  startLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  startLineno,  endCharno);	  jsdocBuilder.markText(token,    NO_UNREAD_TOKEN,    endLineno,    endCharno);    	non-compiled	[CE]  	36	None	replace
186	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  NO_UNREAD_TOKEN,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  NO_UNREAD_TOKEN,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  NO_UNREAD_TOKEN,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    NO_UNREAD_TOKEN,    endLineno,    endCharno);    	non-compiled	[CE]  	36	None	replace
187	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  >  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
188	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
189	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  startLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  startLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  >=  startLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
190	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  fileLevelJsDocBuilder,  lineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  fileLevelJsDocBuilder,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  fileLevelJsDocBuilder,  lineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    lineno,    endCharno);    	non-compiled	[CE]  	21	None	replace
191	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno,  lineno,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno,  lineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    lineno,    endCharno);    	non-compiled	[CE]  	21	None	replace
192	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  endCharno  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  endCharno  +  1);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    lineno,    endCharno);    	non-compiled	[CE]  	21	None	replace
193	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno    +    1);    	non-compiled	[CE]  	42	None	replace
194	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  ignoreStar);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  ignoreStar);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	26	None	replace
195	[BUG]  [BUGGY]  if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
196	[BUG]  [BUGGY]  if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
197	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  lineno,  startCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  lineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  lineno,  startCharno);	  jsdocBuilder.markText(token,    null,    lineno,    startLineno,    endCharno);    	non-compiled	[CE]  	48	None	replace
198	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  lineno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  lineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  lineno);	  jsdocBuilder.markText(token,    null,    lineno,    startLineno,    endCharno);    	non-compiled	[CE]  	48	None	replace
199	[BUG]  [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
200	[BUG]  [BUGGY]  boolean  endLineno  =  stream.getLineno();  boolean  endCharno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  boolean  endLineno  =  stream.getLineno();  boolean  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	boolean  endLineno  =  stream.getLineno();  boolean  endCharno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
201	[BUG]  [BUGGY]  if(startLineno!=  endLineno)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(startLineno!=  endLineno)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(startLineno!=  endLineno)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
202	[BUG]  [BUGGY]  if(endLineno!=  endLineno)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno!=  endLineno)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno!=  endLineno)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
203	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStart,  this.ignoreStart);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStart,  this.ignoreStart);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStart,  this.ignoreStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
204	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  this.ignoreStart);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  this.ignoreStart);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  this.ignoreStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStart);    	non-compiled	[CE]  	62	None	replace
205	[BUG]  [BUGGY]  if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
206	[BUG]  [BUGGY]  if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
207	[BUG]  [BUGGY]  if(lineno  <  0)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  <  0)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  <  0)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getCharno();    }    	non-compiled	[CE]  	43	None	replace
208	[BUG]  [BUGGY]  JsDocBuilder.markText(multilineText,  lineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JsDocBuilder.markText(multilineText,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(multilineText,  lineno,  endCharno);	  JsDocBuilder.markText(multilineText,    endLineno,    endCharno);    	non-compiled	[CE]  	33	None	replace
209	[BUG]  [BUGGY]  if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
210	[BUG]  [BUGGY]  if(lineno  ==  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  ==  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  ==  null)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
211	[BUG]  [BUGGY]  if(endLineno  >=  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >=  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >=  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
212	[BUG]  [BUGGY]  if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
213	[BUG]  [BUGGY]  if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }	  charno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	14	None	replace
214	[BUG]  [BUGGY]  if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno!=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
215	[BUG]  [BUGGY]  if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
216	[BUG]  [BUGGY]  if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }	  int    endLineno    =    stream.getLineno();    if(endLineno    <    0)    {    endLineno    =    stream.getEndLineno();    }    	non-compiled	[CE]  	44	None	replace
217	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  unreadToken);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	27	None	replace
218	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  lineno,  endCharno);	  jsdocBuilder.markText(token,    null,    endLineno,    endCharno);    	non-compiled	[CE]  	18	None	replace
219	[BUG]  [BUGGY]  if(endLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
220	[BUG]  [BUGGY]  if(endLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno!=  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
221	[BUG]  [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  builder.toString();  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
222	[BUG]  [BUGGY]  if(endLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  ==  null)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	11	None	replace
223	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  endCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
224	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineno,  startCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineno,  startCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineno,  startCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno,    startCharno);    	non-compiled	[CE]  	46	None	replace
225	[BUG]  [BUGGY]  if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  ==  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
226	[BUG]  [BUGGY]  if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(lineno  >=  null)  {  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	  int    endLineno    =    stream.getLineno();    if(endLineno    >=    endLineno)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	45	None	replace
227	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  0);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  0);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  0);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    0);    	non-compiled	[CE]  	4	None	replace
228	[BUG]  [BUGGY]  if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
229	[BUG]  [BUGGY]  lastLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  lastLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	lastLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	59	None	replace
230	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno);    	non-compiled	[CE]  	39	None	replace
231	[BUG]  [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >=  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(lineno,    endLineno);    }    	non-compiled	[CE]  	60	None	replace
232	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  unreadToken);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  unreadToken);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  unreadToken);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	47	None	replace
233	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  ignoreStar);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  ignoreStar);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	47	None	replace
234	[BUG]  [BUGGY]  String  token  =  this.fileLevelJsDocBuilder.toString();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  this.fileLevelJsDocBuilder.toString();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  this.fileLevelJsDocBuilder.toString();	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
235	[BUG]  [BUGGY]  String  token  =  token.toString();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  String  token  =  token.toString();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  token.toString();	  String    token    =    builder.toString();    	non-compiled	[CE]  	16	None	replace
236	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber++);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber++);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber++);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineNumber);    	non-compiled	[CE]  	3	None	replace
237	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineNumber,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineNumber,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineNumber,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineNumber);    	non-compiled	[CE]  	3	None	replace
238	[BUG]  [BUGGY]  startLineno  =  stream.getLineno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  startLineno  =  stream.getLineno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	startLineno  =  stream.getLineno();	  endLineno    =    stream.getLineno();    	non-compiled	[CE]  	15	None	replace
239	[BUG]  [BUGGY]  Lineno  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  Lineno  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Lineno  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    	non-compiled	[CE]  	58	None	replace
240	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  finishLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  finishLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  finishLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno);    	non-compiled	[CE]  	28	None	replace
241	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno  +  1);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno);    	non-compiled	[CE]  	28	None	replace
242	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    1);    	non-compiled	[CE]  	8	None	replace
243	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	53	None	replace
244	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  startLineno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  startLineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  startLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    lineno);    	non-compiled	[CE]  	7	None	replace
245	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  lineno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  lineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  lineno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    lineno);    	non-compiled	[CE]  	7	None	replace
246	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  multilineText,  lineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  multilineText,  lineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  multilineText,  lineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    lineno,    endCharno);    	non-compiled	[CE]  	21	None	replace
247	[BUG]  [BUGGY]  if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
248	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endCharno  <  0)  {  endLineno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endCharno  <  0)  {  endLineno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endCharno  <  0)  {  endLineno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
249	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  charno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  charno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  charno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    charno);    	non-compiled	[CE]  	41	None	replace
250	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar,  this.ignoreStar);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar,  this.ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
251	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  this.ignoreStar);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  this.ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
252	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar,  this.ignoreEnd);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar,  this.ignoreEnd);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar,  this.ignoreEnd);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    this.ignoreStar);    	non-compiled	[CE]  	54	None	replace
253	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  NON_GLOBAL_TOKEN,  endLineno,  endCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  NON_GLOBAL_TOKEN,  endLineno,  endCharno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  NON_GLOBAL_TOKEN,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    NO_UNREAD_TOKEN,    endLineno,    endCharno);    	non-compiled	[CE]  	36	None	replace
254	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  endLineno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  lineno,  endLineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  lineno,  endLineno);	  jsdocBuilder.markText(multilineText,    null,    startLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
255	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endLineno  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endLineno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endLineno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno    +    1);    	non-compiled	[CE]  	42	None	replace
256	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno  +  1);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno    +    1);    	non-compiled	[CE]  	42	None	replace
257	[BUG]  [BUGGY]  if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  >  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	57	None	replace
258	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endCharno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  if(endCharno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endCharno  <  0)  {  endLineno  =  stream.getCharno();  }	  if(endLineno    <    0)    {    endLineno    =    stream.getLineno();    endCharno    =    stream.getCharno();    }    else    {    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	57	None	replace
259	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  unreadToken,  ignoreStar);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  unreadToken,  ignoreStar);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  unreadToken,  ignoreStar);	  jsdocBuilder.markText(token,    endLineno,    endCharno,    unreadToken);    	non-compiled	[CE]  	61	None	replace
260	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno);  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    null,    lineno,    startLineno,    endCharno);    	non-compiled	[CE]  	48	None	replace
261	[BUG]  [BUGGY]  JSDocToken  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  JSDocToken  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JSDocToken  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
262	[BUG]  [BUGGY]  boolean  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {      [BUGGY]  boolean  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [BUGGY]      endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	boolean  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    int    endCharno    =    stream.getCharno();    	non-compiled	[CE]  	13	None	replace
