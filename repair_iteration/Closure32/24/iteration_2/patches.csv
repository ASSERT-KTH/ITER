bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	49	None	replace
2	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	49	None	replace
3	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	49	None	replace
4	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	49	None	replace
5	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	66	None	replace
6	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	66	None	replace
7	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	66	None	replace
8	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	66	None	replace
9	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	66	None	replace
10	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	30	None	replace
11	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	30	None	replace
12	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	28	None	replace
13	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	28	None	replace
14	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	28	None	replace
15	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	28	None	replace
16	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	28	None	replace
17	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	85	None	replace
18	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	85	None	replace
19	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	85	None	replace
20	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	85	None	replace
21	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	85	None	replace
22	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  >=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  >=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  >=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	85	None	replace
23	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(unreadToken  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(unreadToken  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	71	None	replace
26	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	71	None	replace
27	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	71	None	replace
28	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	71	None	replace
29	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	71	None	replace
30	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    &&    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	89	None	replace
31	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  null  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  null  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    &&    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	89	None	replace
32	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.BLOCK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  options.getSourceFile();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  options.getSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  options.getSourceFile();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
37	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.getStaticSourceFile();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  option.getStaticSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.getStaticSourceFile();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
38	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.getSourcePath();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  option.getSourcePath();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.getSourcePath();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
39	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.sourceFile();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  option.sourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.sourceFile();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
40	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.getSourceLine();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  option.getSourceLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.getSourceLine();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
41	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.findSourceFile();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  option.findSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.findSourceFile();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
42	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
43	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
44	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
45	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
46	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
47	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
48	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	43	None	replace
49	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	43	None	replace
50	[BUG]  [BUGGY]  JsDocToken  token  =  option.getJsDocToken(this);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getJsDocToken(this);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getJsDocToken(this);	  JsDocToken    token    =    option.getJsDocToken();    	non-compiled	[CE]  	21	None	replace
51	[BUG]  [BUGGY]  JsDocToken  token  =  option.getJsDocToken(0);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getJsDocToken(0);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getJsDocToken(0);	  JsDocToken    token    =    option.getJsDocToken();    	non-compiled	[CE]  	21	None	replace
52	[BUG]  [BUGGY]  JsDocToken  token  =  option.getJsDocToken(false);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getJsDocToken(false);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getJsDocToken(false);	  JsDocToken    token    =    option.getJsDocToken();    	non-compiled	[CE]  	21	None	replace
53	[BUG]  [BUGGY]  JsDocToken  token  =  options.getJsDocToken();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  options.getJsDocToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  options.getJsDocToken();	  JsDocToken    token    =    option.getJsDocToken();    	non-compiled	[CE]  	21	None	replace
54	[BUG]  [BUGGY]  JsDocToken  token  =  option.getJSDocToken();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getJSDocToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getJSDocToken();	  JsDocToken    token    =    option.getJsDocToken();    	non-compiled	[CE]  	21	None	replace
55	[BUG]  [BUGGY]  JsDocToken  token  =  option.getCurrentToken();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getCurrentToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getCurrentToken();	  JsDocToken    token    =    option.getJsDocToken();    	non-compiled	[CE]  	21	None	replace
56	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	37	None	replace
57	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	37	None	replace
58	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)option;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option;	  JsDocToken    token    =(JsDocToken)this.option;    	non-compiled	[CE]  	25	None	replace
59	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)this.option  +  1;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)this.option  +  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)this.option  +  1;	  JsDocToken    token    =(JsDocToken)this.option;    	non-compiled	[CE]  	25	None	replace
60	[BUG]  [BUGGY]  JasDocToken  token  =(JsDocToken)this.option;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JasDocToken  token  =(JsDocToken)this.option;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JasDocToken  token  =(JsDocToken)this.option;	  JsDocToken    token    =(JsDocToken)this.option;    	non-compiled	[CE]  	25	None	replace
61	[BUG]  [BUGGY]  JSDocToken  token  =(JsDocToken)this.option;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JSDocToken  token  =(JsDocToken)this.option;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JSDocToken  token  =(JsDocToken)this.option;	  JsDocToken    token    =(JsDocToken)this.option;    	non-compiled	[CE]  	25	None	replace
62	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
63	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
64	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
65	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
66	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
67	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
68	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getEndLineno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  endLineno  =  stream.getEndLineno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getEndLineno();	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	22	None	replace
69	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getLineno()  -  1;	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	22	None	replace
70	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  2;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  2;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getLineno()  +  2;	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	22	None	replace
71	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLength();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  endLineno  =  stream.getLength();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getLength();	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	22	None	replace
72	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getCharno();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  endLineno  =  stream.getCharno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	22	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  options);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  options);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  options);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option,  sourceFile);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option,  sourceFile);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option,  sourceFile);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  option);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter,  option);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  errorReporter,  option);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  option);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  option);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  sourceFile,  option);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option,  false);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option,  false);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option,  false);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option,  null);  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option,  null);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option,  null);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option,  n);  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option,  n);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option,  n);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
80	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
81	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
82	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
83	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
84	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
85	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
86	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
87	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.END)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
88	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
89	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
90	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
91	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
92	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
93	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
94	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
95	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
96	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	64	None	replace
97	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token!=    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	64	None	replace
98	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	46	None	replace
99	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	46	None	replace
100	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	46	None	replace
101	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
102	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
103	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
104	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
105	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
106	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	42	None	replace
107	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	42	None	replace
108	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.STRING)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	42	None	replace
109	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	26	None	replace
110	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	26	None	replace
111	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	54	None	replace
112	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	54	None	replace
113	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	54	None	replace
114	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	86	None	replace
115	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	86	None	replace
116	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	86	None	replace
117	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	51	None	replace
118	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	51	None	replace
119	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	58	None	replace
120	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.COOK)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.COOK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.COOK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	58	None	replace
121	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NEGATIVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NEGATIVE)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NEGATIVE)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	58	None	replace
122	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	58	None	replace
123	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	12	None	replace
124	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.END)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.END)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	12	None	replace
125	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.END  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.END  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.END  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	12	None	replace
126	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	38	None	replace
127	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.BLOCK)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	38	None	replace
128	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	38	None	replace
129	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
130	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NEW)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
131	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NEW  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NEW  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NEW  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
132	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
133	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	4	None	replace
134	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
135	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
136	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	31	None	replace
137	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	31	None	replace
138	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	31	None	replace
139	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)this.sourceFile.clone();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)this.sourceFile.clone();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)this.sourceFile.clone();	  JsDocToken    token    =(JsDocToken)sourceFile.clone();    	non-compiled	[CE]  	69	None	replace
140	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.getParent();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.getParent();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)sourceFile.getParent();	  JsDocToken    token    =(JsDocToken)sourceFile.clone();    	non-compiled	[CE]  	69	None	replace
141	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)source.clone();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)source.clone();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)source.clone();	  JsDocToken    token    =(JsDocToken)sourceFile.clone();    	non-compiled	[CE]  	69	None	replace
142	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.cloneTree();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.cloneTree();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)sourceFile.cloneTree();	  JsDocToken    token    =(JsDocToken)sourceFile.clone();    	non-compiled	[CE]  	69	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter)  {  return  new  ExtractionInfo(token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  errorReporter)  {  return  new  ExtractionInfo(token);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  errorReporter)  {  return  new  ExtractionInfo(token);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  options)  {  return  new  ExtractionInfo(token);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  options)  {  return  new  ExtractionInfo(token);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  options)  {  return  new  ExtractionInfo(token);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo( " ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo( " ");  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo( " ");	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo( "   ",  token);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo( "   ",  token);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo( "   ",  token);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
147	[BUG]  [BUGGY]  Context.traverse(compiler,  option)  {  return  new  ExtractionInfo(token);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Context.traverse(compiler,  option)  {  return  new  ExtractionInfo(token);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Context.traverse(compiler,  option)  {  return  new  ExtractionInfo(token);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  method)  {  return  new  ExtractionInfo(token);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  method)  {  return  new  ExtractionInfo(token);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  method)  {  return  new  ExtractionInfo(token);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
149	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	73	None	replace
150	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	73	None	replace
151	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	73	None	replace
152	[BUG]  [BUGGY]  int  unreadToken  =  stream.getUnreadToken();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getUnreadToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getUnreadToken();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
153	[BUG]  [BUGGY]  int  unreadToken  =  stream.getCharno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getCharno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getCharno();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
154	[BUG]  [BUGGY]  int  unreadToken  =  stream.getEndingJSDocLine();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getEndingJSDocLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getEndingJSDocLine();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
155	[BUG]  [BUGGY]  int  unreadToken  =  stream.getLowerBound();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getLowerBound();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getLowerBound();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
156	[BUG]  [BUGGY]  int  unreadToken  =  stream.getUnreachableJSDocLine();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getUnreachableJSDocLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getUnreachableJSDocLine();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
157	[BUG]  [BUGGY]  int  unreadToken  =  stream.getLowerCase();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getLowerCase();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getLowerCase();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
158	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	32	None	replace
159	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	32	None	replace
160	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	32	None	replace
161	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
162	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
163	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
164	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
165	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
166	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
167	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getStaticSourceFile();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getStaticSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getStaticSourceFile();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
168	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  options.getSourceFile();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  options.getSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  options.getSourceFile();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
169	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getRawSourceFile();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getRawSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getRawSourceFile();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
170	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceFileInfo();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceFileInfo();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getSourceFileInfo();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
171	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceLine();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getSourceLine();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
172	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceFile(true);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceFile(true);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getSourceFile(true);	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
173	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.START)    {    	non-compiled	[CE]  	36	None	replace
174	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.START)    {    	non-compiled	[CE]  	36	None	replace
175	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.START)    {    	non-compiled	[CE]  	36	None	replace
176	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.START)    {    	non-compiled	[CE]  	36	None	replace
177	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.START)    {    	non-compiled	[CE]  	36	None	replace
178	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	61	None	replace
179	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	61	None	replace
180	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	34	None	replace
181	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	34	None	replace
182	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	41	None	replace
183	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	41	None	replace
184	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	41	None	replace
185	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
186	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
187	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
188	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
189	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.ESCAPE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.ESCAPE)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.ESCAPE)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
190	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	79	None	replace
191	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	79	None	replace
192	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	79	None	replace
193	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	79	None	replace
194	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	79	None	replace
195	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	83	None	replace
196	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	83	None	replace
197	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	83	None	replace
198	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	83	None	replace
199	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	83	None	replace
200	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
201	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
202	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
203	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
204	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
205	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
206	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
207	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
208	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
209	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
210	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
211	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
212	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
213	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
214	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.ELEMENT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
215	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
216	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.ELEMENT  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.ELEMENT  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.ELEMENT  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
217	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
218	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)this.option.clone();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)this.option.clone();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)this.option.clone();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
219	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option.cloneTree();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)option.cloneTree();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option.cloneTree();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
220	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option.cloneBlock();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)option.cloneBlock();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option.cloneBlock();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
221	[BUG]  [BUGGY]  JasDocToken  token  =(JsDocToken)option.clone();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JasDocToken  token  =(JsDocToken)option.clone();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JasDocToken  token  =(JsDocToken)option.clone();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
222	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option.clonePath();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)option.clonePath();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option.clonePath();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
223	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	14	None	replace
224	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NEGATIVE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NEGATIVE)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NEGATIVE)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	14	None	replace
225	[BUG]  [BUGGY]  JsDocToken  token  =  option.getToken();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getToken();	  JsDocToken    token    =    option.getValue();    	non-compiled	[CE]  	70	None	replace
226	[BUG]  [BUGGY]  JsDocToken  token  =  option.getText();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getText();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getText();	  JsDocToken    token    =    option.getValue();    	non-compiled	[CE]  	70	None	replace
227	[BUG]  [BUGGY]  JsDocToken  token  =  option.cloneTree();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.cloneTree();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.cloneTree();	  JsDocToken    token    =    option.getValue();    	non-compiled	[CE]  	70	None	replace
228	[BUG]  [BUGGY]  JsDocToken  token  =  options.getValue();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  options.getValue();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  options.getValue();	  JsDocToken    token    =    option.getValue();    	non-compiled	[CE]  	70	None	replace
229	[BUG]  [BUGGY]  JsDocToken  token  =  option.getKey();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getKey();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getKey();	  JsDocToken    token    =    option.getValue();    	non-compiled	[CE]  	70	None	replace
230	[BUG]  [BUGGY]  JsDocToken  token  =  option.getImplicitReturn();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getImplicitReturn();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getImplicitReturn();	  JsDocToken    token    =    option.getValue();    	non-compiled	[CE]  	70	None	replace
231	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
232	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
233	[BUG]  [BUGGY]  if(token!=  null  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  null  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  null  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
234	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
235	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	17	None	replace
236	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	17	None	replace
237	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	16	None	replace
238	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	16	None	replace
239	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	56	None	replace
240	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	56	None	replace
241	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	56	None	replace
242	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	56	None	replace
243	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.END  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	7	None	replace
244	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
245	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
246	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
247	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
248	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  this.sourceFile.getSourceFile();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  this.sourceFile.getSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  this.sourceFile.getSourceFile();	  StaticSourceFile    <?>    stream    =    sourceFile.getSourceFile();    	non-compiled	[CE]  	76	None	replace
249	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.toString();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.toString();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  sourceFile.toString();	  StaticSourceFile    <?>    stream    =    sourceFile.getSourceFile();    	non-compiled	[CE]  	76	None	replace
250	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.readLine();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.readLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  sourceFile.readLine();	  StaticSourceFile    <?>    stream    =    sourceFile.getSourceFile();    	non-compiled	[CE]  	76	None	replace
251	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.getStaticSourceFile();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.getStaticSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  sourceFile.getStaticSourceFile();	  StaticSourceFile    <?>    stream    =    sourceFile.getSourceFile();    	non-compiled	[CE]  	76	None	replace
252	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  /  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  endLineno  =  stream.getLineno()  /  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getLineno()  /  1;	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	23	None	replace
253	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  endLineno  =  stream.getLineno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  endLineno  =  stream.getLineno();	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	23	None	replace
254	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getEndLineno()  +  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  endLineno  =  stream.getEndLineno()  +  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getEndLineno()  +  1;	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	23	None	replace
255	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.FUNCTION)    {    	non-compiled	[CE]  	8	None	replace
256	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.FUNCTION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.FUNCTION)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.FUNCTION)    {    	non-compiled	[CE]  	8	None	replace
257	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.FUNCTION)    {    	non-compiled	[CE]  	8	None	replace
258	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.FUNCTION)    {    	non-compiled	[CE]  	8	None	replace
259	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.FUNCTION)    {    	non-compiled	[CE]  	8	None	replace
260	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
261	[BUG]  [BUGGY]  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
262	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
263	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
264	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
265	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
266	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	1	None	replace
267	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	1	None	replace
268	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
269	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
270	[BUG]  [BUGGY]  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
271	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
272	[BUG]  [BUGGY]  JsDocToken  token  =  option.getAssignedToken();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getAssignedToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getAssignedToken();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
273	[BUG]  [BUGGY]  JsDocToken  token  =  option.getPreservedValue();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getPreservedValue();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getPreservedValue();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
274	[BUG]  [BUGGY]  JsDocToken  token  =  option.getImmediateParent();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getImmediateParent();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getImmediateParent();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
275	[BUG]  [BUGGY]  JsDocToken  token  =  option.getImmediateParentNode();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getImmediateParentNode();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getImmediateParentNode();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
276	[BUG]  [BUGGY]  JsDocToken  token  =  option.getOwner();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getOwner();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getOwner();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
277	[BUG]  [BUGGY]  JsDocToken  token  =  option.getConditionalValue();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getConditionalValue();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getConditionalValue();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
278	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	13	None	replace
279	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	13	None	replace
280	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	6	None	replace
281	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	6	None	replace
282	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	6	None	replace
283	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	5	None	replace
284	[BUG]  [BUGGY]  int  startLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  startLineno  =  stream.getLineno()  +  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  startLineno  =  stream.getLineno()  +  1;	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	67	None	replace
285	[BUG]  [BUGGY]  int  startLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  startLineno  =  stream.getLineno()  -  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  startLineno  =  stream.getLineno()  -  1;	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	67	None	replace
286	[BUG]  [BUGGY]  int  startLineno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  startLineno  =  stream.getCharno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  startLineno  =  stream.getCharno();	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	67	None	replace
287	[BUG]  [BUGGY]  int  startLineno  =  stream.getLineno()  +  2;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  startLineno  =  stream.getLineno()  +  2;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  startLineno  =  stream.getLineno()  +  2;	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	67	None	replace
288	[BUG]  [BUGGY]  int  startLineno  =  stream.getEndLineno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  startLineno  =  stream.getEndLineno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  startLineno  =  stream.getEndLineno();	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	67	None	replace
289	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	44	None	replace
290	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	29	None	replace
291	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	29	None	replace
292	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	29	None	replace
293	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	63	None	replace
294	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	63	None	replace
295	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	63	None	replace
296	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	53	None	replace
297	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	53	None	replace
298	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	53	None	replace
299	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	53	None	replace
300	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	53	None	replace
301	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC)    {    	non-compiled	[CE]  	18	None	replace
302	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC)    {    	non-compiled	[CE]  	18	None	replace
303	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC)    {    	non-compiled	[CE]  	18	None	replace
304	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
305	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
306	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
307	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
308	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  null  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  null  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
309	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  this.sourceFile.getSourceFile();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  this.sourceFile.getSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  this.sourceFile.getSourceFile();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
310	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceLine();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  stream.getSourceLine();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
311	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourcePath();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourcePath();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  stream.getSourcePath();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
312	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSource();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSource();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  stream.getSource();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
313	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  view.getSourceFile();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  view.getSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  view.getSourceFile();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
314	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  stream.readLine();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
315	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	27	None	replace
316	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	27	None	replace
317	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	46	None	replace
318	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)getOption();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)getOption();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)getOption();	  JsDocToken    token    =(JsDocToken)this.option;    	non-compiled	[CE]  	25	None	replace
319	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	51	None	replace
320	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	64	None	replace
321	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	64	None	replace
322	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	80	None	replace
323	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	80	None	replace
324	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	80	None	replace
325	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	34	None	replace
326	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	61	None	replace
327	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	61	None	replace
328	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.E	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	61	None	replace
329	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  &&  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  &&  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  &&  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
330	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
331	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
332	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
333	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
334	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
335	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.remove();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.remove();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)sourceFile.remove();	  JsDocToken    token    =(JsDocToken)sourceFile.clone();    	non-compiled	[CE]  	69	None	replace
336	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	58	None	replace
337	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.OC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.OC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.OC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	58	None	replace
338	[BUG]  [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
339	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
340	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	47	None	replace
341	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	41	None	replace
342	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	41	None	replace
343	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	35	None	replace
344	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	28	None	replace
345	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	86	None	replace
346	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
347	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	65	None	replace
348	[BUG]  [BUGGY]  JsDocToken  token  =  option.getTokenType();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getTokenType();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getTokenType();	  JsDocToken    token    =    option.getValue();    	non-compiled	[CE]  	70	None	replace
349	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
350	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
351	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
352	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
353	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
354	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
355	[BUG]  [BUGGY]  JsDocToken  token  =  option.getDescription();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getDescription();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getDescription();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
356	[BUG]  [BUGGY]  JsDocToken  token  =  option.getAssignedValue()  +  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getAssignedValue()  +  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getAssignedValue()  +  1;	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
357	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	38	None	replace
358	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	38	None	replace
359	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC)    {    	non-compiled	[CE]  	18	None	replace
360	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
361	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
362	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
363	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
364	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	26	None	replace
365	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
366	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
367	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
368	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
369	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	88	None	replace
370	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
371	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
372	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.getSourcePath();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.getSourcePath();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  sourceFile.getSourcePath();	  StaticSourceFile    <?>    stream    =    sourceFile.getSourceFile();    	non-compiled	[CE]  	76	None	replace
373	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  file.getSourceFile();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  file.getSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  file.getSourceFile();	  StaticSourceFile    <?>    stream    =    sourceFile.getSourceFile();    	non-compiled	[CE]  	76	None	replace
374	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	30	None	replace
375	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	43	None	replace
376	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	31	None	replace
377	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	31	None	replace
378	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	63	None	replace
379	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
380	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
381	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
382	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.toSourceFile();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  option.toSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.toSourceFile();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
383	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.createSourceFile();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  option.createSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.createSourceFile();	  StaticSourceFile    sourceFile    =    option.getSourceFile();    	non-compiled	[CE]  	20	None	replace
384	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	37	None	replace
385	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    &&    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	91	None	replace
386	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    &&    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	91	None	replace
387	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  &&  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  &&  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  &&  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    &&    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	91	None	replace
388	[BUG]  [BUGGY]  Integer  startLineno  =  stream.getLineno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  Integer  startLineno  =  stream.getLineno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  startLineno  =  stream.getLineno();	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	23	None	replace
389	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
390	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
391	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	54	None	replace
392	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	42	None	replace
393	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	42	None	replace
394	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	2	None	replace
395	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	73	None	replace
396	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	15	None	replace
397	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	85	None	replace
398	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	4	None	replace
399	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  &&  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  &&  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  &&  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	4	None	replace
400	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	7	None	replace
401	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
402	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
403	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
404	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
405	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
406	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option.getToken();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)option.getToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option.getToken();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
407	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option.next();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)option.next();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option.next();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
408	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option.getTokenType();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)option.getTokenType();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option.getTokenType();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
409	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	27	None	replace
410	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSingleSourceFile();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSingleSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getSingleSourceFile();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
411	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourcePath();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourcePath();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getSourcePath();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
412	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSource();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSource();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getSource();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
413	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	6	None	replace
414	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	79	None	replace
415	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	79	None	replace
416	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	71	None	replace
417	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceFile()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceFile()  +  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  stream.getSourceFile()  +  1;	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
418	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceReference();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceReference();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  stream.getSourceReference();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
419	[BUG]  [BUGGY]  int  unreadToken  =  stream.getUnremainingJSDocLine();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getUnremainingJSDocLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getUnremainingJSDocLine();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
420	[BUG]  [BUGGY]  int  unreadToken  =  stream.getJsDocToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getJsDocToken();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getJsDocToken();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
421	[BUG]  [BUGGY]  int  unreadToken  =  stream.getLowerBlock();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getLowerBlock();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getLowerBlock();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
422	[BUG]  [BUGGY]  int  startLineno  =  stream.getStartLineno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  startLineno  =  stream.getStartLineno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  startLineno  =  stream.getStartLineno();	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	67	None	replace
423	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.FUNCTION)    {    	non-compiled	[CE]  	8	None	replace
424	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.FUNCTION)    {    	non-compiled	[CE]  	8	None	replace
425	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	13	None	replace
426	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	56	None	replace
427	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	56	None	replace
428	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.E  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.E  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.E	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	56	None	replace
429	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	12	None	replace
430	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	12	None	replace
431	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
432	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
433	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	5	None	replace
434	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	5	None	replace
435	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	14	None	replace
436	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	14	None	replace
437	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	14	None	replace
438	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	14	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option,  fileLevelJsDocBuilder);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option,  fileLevelJsDocBuilder);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
440	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option,  this);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option,  this);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option,  this);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
441	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	1	None	replace
442	[BUG]  [BUGGY]  JsDocToken  token  =  option.getJsDocToken(null);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getJsDocToken(null);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getJsDocToken(null);	  JsDocToken    token    =    option.getJsDocToken();    	non-compiled	[CE]  	21	None	replace
443	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.START  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.START)    {    	non-compiled	[CE]  	36	None	replace
444	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(option);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(option);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(option);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
445	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token,  sourceFile);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token,  sourceFile);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token,  sourceFile);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
446	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	83	None	replace
447	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	26	None	replace
448	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_EOF)  {	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	55	None	replace
449	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.option);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this.option);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  this.option);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
450	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  this.sourceFile,  option);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  this.sourceFile,  option);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  this.sourceFile,  option);	  NodeTraversal.traverse(compiler,    option);    	non-compiled	[CE]  	24	None	replace
451	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	46	None	replace
452	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.START  &&  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.START  &&  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.START  &&  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
453	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	90	None	replace
454	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	38	None	replace
455	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  &&  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  &&  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  &&  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	43	None	replace
456	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	43	None	replace
457	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	16	None	replace
458	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	41	None	replace
459	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
460	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
461	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	50	None	replace
462	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	63	None	replace
463	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	63	None	replace
464	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOC)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	63	None	replace
465	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  endLineno  =  stream.getLineno()  +  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  endLineno  =  stream.getLineno()  +  1;	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	23	None	replace
466	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	28	None	replace
467	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	1	None	replace
468	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
469	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
470	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.NEW)    {    	non-compiled	[CE]  	60	None	replace
471	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	17	None	replace
472	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	17	None	replace
473	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	4	None	replace
474	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	4	None	replace
475	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.START_EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	64	None	replace
476	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
477	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    &&    token!=    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	62	None	replace
478	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	58	None	replace
479	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	83	None	replace
480	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
481	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	45	None	replace
482	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
483	[BUG]  [BUGGY]  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	48	None	replace
484	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
485	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.ELEMENT)    {    	non-compiled	[CE]  	59	None	replace
486	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	44	None	replace
487	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token!=    JsDocToken.START)    {    	non-compiled	[CE]  	36	None	replace
488	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  &&  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  &&  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  &&  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	6	None	replace
489	[BUG]  [BUGGY]  jsDocToken  token  =(JsDocToken)this.option;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  jsDocToken  token  =(JsDocToken)this.option;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	jsDocToken  token  =(JsDocToken)this.option;	  JsDocToken    token    =(JsDocToken)this.option;    	non-compiled	[CE]  	25	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  option)  {  return  new  ExtractionInfo(token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  sourceFile,  option)  {  return  new  ExtractionInfo(token);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  sourceFile,  option)  {  return  new  ExtractionInfo(token);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token,  stream);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token,  stream);  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token,  stream);	  NodeTraversal.traverse(compiler,    option)    {    return    new    ExtractionInfo(token);    	non-compiled	[CE]  	68	None	replace
492	[BUG]  [BUGGY]  StaticSourceFile  streamFile  =  stream.getSourceFile();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  streamFile  =  stream.getSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  streamFile  =  stream.getSourceFile();	  StaticSourceFile    sourceFile    =    stream.getSourceFile();    	non-compiled	[CE]  	75	None	replace
493	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
494	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
495	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token!=    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
496	[BUG]  [BUGGY]  int  unreadToken  =  stream.getLineno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getLineno();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getLineno();	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
497	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine()  +  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine()  +  1;	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
498	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine()  -  1;  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine()  -  1;	  int    unreadToken    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	74	None	replace
499	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	80	None	replace
500	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
501	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDo  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDo  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDo	  if(token    ==    JsDocToken.FIELD_NAME    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	84	None	replace
502	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	29	None	replace
503	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	29	None	replace
504	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	29	None	replace
505	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	37	None	replace
506	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	37	None	replace
507	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	13	None	replace
508	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	13	None	replace
509	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	52	None	replace
510	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    &&    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	91	None	replace
511	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.BLOCK)    {    	non-compiled	[CE]  	9	None	replace
512	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.findSourceFile();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.findSourceFile();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.findSourceFile();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
513	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.cloneTree();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.cloneTree();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.cloneTree();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
514	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.readLine();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  StaticSourceFile  <?>  stream  =  option.readLine();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.readLine();	  StaticSourceFile    <?>    stream    =    option.getSourceFile();    	non-compiled	[CE]  	77	None	replace
515	[BUG]  [BUGGY]  JsDocToken  token  =  option.getImmediateParentPointer();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =  option.getImmediateParentPointer();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getImmediateParentPointer();	  JsDocToken    token    =    option.getAssignedValue();    	non-compiled	[CE]  	78	None	replace
516	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	7	None	replace
517	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	7	None	replace
518	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	42	None	replace
519	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	42	None	replace
520	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
521	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
522	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
523	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	81	None	replace
524	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	34	None	replace
525	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	33	None	replace
526	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token!=    JsDocToken.START    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	88	None	replace
527	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    	non-compiled	[CE]  	82	None	replace
528	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.CATCH  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.CATCH  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.CATCH  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	57	None	replace
529	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)clone();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  JsDocToken  token  =(JsDocToken)clone();  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)clone();	  JsDocToken    token    =(JsDocToken)option.clone();    	non-compiled	[CE]  	19	None	replace
530	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	40	None	replace
531	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	12	None	replace
532	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.END)    {    	non-compiled	[CE]  	12	None	replace
533	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COMMA  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COMMA  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COMMA  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	61	None	replace
534	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	49	None	replace
535	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	47	None	replace
536	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	15	None	replace
537	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	27	None	replace
538	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  &&  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	30	None	replace
539	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	31	None	replace
540	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
541	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
542	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.COOKEN    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	10	None	replace
543	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDo  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDo  [BUGGY]      token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDo	  if(token    ==    JsDocToken.START_EOF    ||    token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	72	None	replace
