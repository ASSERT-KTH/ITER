bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
8	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
9	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
10	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.COOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
11	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
12	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.END)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.BLOCK)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	10	None	replace
17	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOC)    {    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)option.clone();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  JsDocToken  token  =(JsDocToken)option.clone();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)option.clone();	      	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  option.getSourceFile();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  StaticSourceFile  sourceFile  =  option.getSourceFile();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  option.getSourceFile();	      	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  JsDocToken  token  =  option.getJsDocToken();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  JsDocToken  token  =  option.getJsDocToken();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getJsDocToken();	      	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  Integer  endLineno  =  stream.getLineno();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getLineno();	      	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  1;  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	Integer  endLineno  =  stream.getLineno()  +  1;	      	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option);  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  NodeTraversal.traverse(compiler,  option);  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option);	      	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)this.option;  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  JsDocToken  token  =(JsDocToken)this.option;  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)this.option;	      	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	12	None	replace
33	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	12	None	replace
34	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	12	None	replace
35	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	12	None	replace
36	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.START)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	12	None	replace
37	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.BLOCK)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	4	None	replace
39	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
40	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
41	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
43	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
44	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token!=  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	1	None	replace
46	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	1	None	replace
48	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	1	None	replace
49	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
50	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token!=  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	1	None	replace
56	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	4	None	replace
57	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
58	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.ELEMENT)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
60	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NEW)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
61	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
62	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token!=  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
63	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
64	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	12	None	replace
66	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
67	[BUG]  [BUGGY]  int  startLineno  =  stream.getLineno();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  int  startLineno  =  stream.getLineno();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  startLineno  =  stream.getLineno();	      	non-compiled	[CE]  	7	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token);  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	NodeTraversal.traverse(compiler,  option)  {  return  new  ExtractionInfo(token);	      	non-compiled	[CE]  	7	None	replace
69	[BUG]  [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.clone();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  JsDocToken  token  =(JsDocToken)sourceFile.clone();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =(JsDocToken)sourceFile.clone();	      	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  JsDocToken  token  =  option.getValue();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  JsDocToken  token  =  option.getValue();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getValue();	      	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	3	None	replace
72	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
74	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine();	      	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceFile();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceFile();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  sourceFile  =  stream.getSourceFile();	      	non-compiled	[CE]  	7	None	replace
76	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.getSourceFile();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  StaticSourceFile  <?>  stream  =  sourceFile.getSourceFile();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  sourceFile.getSourceFile();	      	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceFile();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  StaticSourceFile  <?>  stream  =  option.getSourceFile();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	StaticSourceFile  <?>  stream  =  option.getSourceFile();	      	non-compiled	[CE]  	7	None	replace
78	[BUG]  [BUGGY]  JsDocToken  token  =  option.getAssignedValue();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  JsDocToken  token  =  option.getAssignedValue();  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	JsDocToken  token  =  option.getAssignedValue();	      	non-compiled	[CE]  	7	None	replace
79	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	1	None	replace
80	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	4	None	replace
81	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	4	None	replace
82	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	4	None	replace
83	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.START)    {    	non-compiled	[CE]  	12	None	replace
84	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	8	None	replace
85	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EC  ||  token  ==  JsDocToken.EOF)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	9	None	replace
86	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.EOL    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	5	None	replace
87	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
88	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	6	None	replace
89	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
90	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.START  ||  token  ==  JsDocToken.EOC)  {	  if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	2	None	replace
91	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {    [BUGGY]  if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  [BUGGY]    token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }  stream.update();  int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	if(token!=  JsDocToken.EOF  &&  token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {	  if(token!=    JsDocToken.EOF    ||    token    ==    JsDocToken.EOC    ||    token    ==    JsDocToken.EOF)    {    	non-compiled	[CE]  	11	None	replace
