bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] ExtractionInfo preserveInfo =  extractMultilineTextualBlock(token,       WhitespaceOption.PRESERVE); [FE] ComparisonFailure [CONTEXT] if (!jsdocBuilder.recordFileOverview(fileOverview) || fileOverviewJSDocInfo != null) { parser.addParserWarning("msg.jsdoc.fileoverview.extra", stream.getLineno(), stream.getCharno()); } continue retry; case LICENSE: case PRESERVE: [BUGGY] ExtractionInfo preserveInfo =      extractMultilineTextualBlock(token,                          WhitespaceOption.PRESERVE); [BUGGY] extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	
2	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (!jsdocBuilder.recordFileOverview(fileOverview) || fileOverviewJSDocInfo != null) { parser.addParserWarning("msg.jsdoc.fileoverview.extra", stream.getLineno(), stream.getCharno()); } continue retry; case LICENSE: case PRESERVE: [BUGGY] [BUGGY] ExtractionInfo preserveInfo =      extractMultilineTextualBlock(token,                          WhitespaceOption.PRESERVE); extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	add	
3	[BUG] [BUGGY] String preserve = preserveInfo.string; [FE] ComparisonFailure [CONTEXT] stream.getLineno(), stream.getCharno()); } continue retry; case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); [BUGGY] String preserve = preserveInfo.string; [BUGGY]  if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; continue retry;  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	replace	
4	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] stream.getLineno(), stream.getCharno()); } continue retry; case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); [BUGGY] [BUGGY] String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; continue retry;  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	352	352	4	add	
5	[BUG] [BUGGY] if (preserve.length() > 0) { [FE] ComparisonFailure [CONTEXT] continue retry; case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; [BUGGY] if (preserve.length() > 0) { [BUGGY] if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; continue retry; case ENUM: token = next(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	replace	
6	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] continue retry; case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; [BUGGY] [BUGGY] if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; continue retry; case ENUM: token = next(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	354	354	4	add	
7	[BUG] [BUGGY] if (fileLevelJsDocBuilder != null) { [FE] ComparisonFailure [CONTEXT] case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { [BUGGY] if (fileLevelJsDocBuilder != null) { [BUGGY] fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; continue retry; case ENUM: token = next(); lineno = stream.getLineno(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	
8	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { [BUGGY] [BUGGY] if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; continue retry; case ENUM: token = next(); lineno = stream.getLineno(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	add	
9	[BUG] [BUGGY] fileLevelJsDocBuilder.append(preserve); [FE] ComparisonFailure [CONTEXT] case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { [BUGGY] fileLevelJsDocBuilder.append(preserve); [BUGGY] } } token = preserveInfo.token; continue retry; case ENUM: token = next(); lineno = stream.getLineno(); charno = stream.getCharno(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	
10	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] case LICENSE: case PRESERVE: ExtractionInfo preserveInfo = extractMultilineTextualBlock(token, WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { [BUGGY] [BUGGY] fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; continue retry; case ENUM: token = next(); lineno = stream.getLineno(); charno = stream.getCharno(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	add	
11	[BUG] [BUGGY] token = preserveInfo.token; [FE] ComparisonFailure [CONTEXT] WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } [BUGGY] token = preserveInfo.token; [BUGGY] continue retry; case ENUM: token = next(); lineno = stream.getLineno(); charno = stream.getCharno(); type = null; if (token != JsDocToken.EOL && token != JsDocToken.EOC) { type = createJSTypeExpression( [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	
12	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] WhitespaceOption.PRESERVE); String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } [BUGGY] [BUGGY] token = preserveInfo.token; continue retry; case ENUM: token = next(); lineno = stream.getLineno(); charno = stream.getCharno(); type = null; if (token != JsDocToken.EOL && token != JsDocToken.EOC) { type = createJSTypeExpression( [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	add	
13	[BUG] [BUGGY] continue retry; [FE] ComparisonFailure [CONTEXT] String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; [BUGGY] continue retry; [BUGGY]  case ENUM: token = next(); lineno = stream.getLineno(); charno = stream.getCharno(); type = null; if (token != JsDocToken.EOL && token != JsDocToken.EOC) { type = createJSTypeExpression( parseAndRecordTypeNode(token)); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	
14	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] String preserve = preserveInfo.string; if (preserve.length() > 0) { if (fileLevelJsDocBuilder != null) { fileLevelJsDocBuilder.append(preserve); } } token = preserveInfo.token; [BUGGY] [BUGGY] continue retry; case ENUM: token = next(); lineno = stream.getLineno(); charno = stream.getCharno(); type = null; if (token != JsDocToken.EOL && token != JsDocToken.EOC) { type = createJSTypeExpression( parseAndRecordTypeNode(token)); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] parse [RETURN_TYPE] boolean  [VARIABLES] Set modifiesAnnotationKeywords suppressionNames Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno lineno Annotation annotation ExtractionInfo authorInfo blockInfo descriptionInfo fileOverviewInfo meaningInfo paramDescriptionInfo preserveInfo reasonInfo referenceInfo returnDescriptionInfo templateInfo versionInfo ErrorReporter errorReporter boolean isBracketedParam matchingRc JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type List extendedTypes JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	add	
15	[BUG] [BUGGY] builder.append("\n"); [FE] ComparisonFailure [CONTEXT] } builder.append('*'); } token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { [BUGGY] builder.append("\n"); [BUGGY] } ignoreStar = true; token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	replace	
16	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } builder.append('*'); } token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { [BUGGY] [BUGGY] builder.append("\n"); } ignoreStar = true; token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.7559289460184544	1378	1378	4	add	
17	[BUG] [BUGGY] return stream.getString(); [FE] ComparisonFailure [CONTEXT] case STAR: return "*"; case ELLIPSIS: return "..."; case EQUALS: return "="; case STRING: [BUGGY] return stream.getString(); [BUGGY]  default: throw new IllegalStateException(token.toString()); } } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] toString [RETURN_TYPE] String  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1226	1226	4	replace	
18	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] case STAR: return "*"; case ELLIPSIS: return "..."; case EQUALS: return "="; case STRING: [BUGGY] [BUGGY] return stream.getString(); default: throw new IllegalStateException(token.toString()); } } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] toString [RETURN_TYPE] String  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1226	1226	4	add	
19	[BUG] [BUGGY] if (builder.length() > 0) { [FE] ComparisonFailure [CONTEXT] int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [BUGGY] if (builder.length() > 0) { [BUGGY] builder.append(' '); } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); }  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	
20	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [BUGGY] [BUGGY] if (builder.length() > 0) { builder.append(' '); } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); }  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	add	
21	[BUG] [BUGGY] builder.append(' '); [FE] ComparisonFailure [CONTEXT] if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { [BUGGY] builder.append(' '); [BUGGY] } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1415	1415	4	replace	
22	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { [BUGGY] [BUGGY] builder.append(' '); } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1415	1415	4	add	
23	[BUG] [BUGGY] builder.append(toString(token)); [FE] ComparisonFailure [CONTEXT] jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { builder.append(' '); } [BUGGY] builder.append(toString(token)); [BUGGY]  line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); token = next(); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	
24	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { builder.append(' '); } [BUGGY] [BUGGY] builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); token = next(); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	add	
25	[BUG] [BUGGY] line = stream.getRemainingJSDocLine(); [FE] ComparisonFailure [CONTEXT] } return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { builder.append(' '); } builder.append(toString(token)); [BUGGY] line = stream.getRemainingJSDocLine(); [BUGGY]  if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); token = next(); } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1419	1419	4	replace	
26	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { builder.append(' '); } builder.append(toString(token)); [BUGGY] [BUGGY] line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); token = next(); } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1419	1419	4	add	
27	[BUG] [BUGGY] if (option != WhitespaceOption.PRESERVE) { [FE] ComparisonFailure [CONTEXT] return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { builder.append(' '); } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); [BUGGY] if (option != WhitespaceOption.PRESERVE) { [BUGGY] line = trimEnd(line); } builder.append(line); token = next(); } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	
28	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] return new ExtractionInfo(multilineText, token); } if (builder.length() > 0) { builder.append(' '); } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); [BUGGY] [BUGGY] if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); token = next(); } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	add	
29	[BUG] [BUGGY] builder.append(line); [FE] ComparisonFailure [CONTEXT] builder.append(' '); } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } [BUGGY] builder.append(line); [BUGGY] token = next(); } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	
30	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] builder.append(' '); } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } [BUGGY] [BUGGY] builder.append(line); token = next(); } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	add	
31	[BUG] [BUGGY] token = next(); [FE] ComparisonFailure [CONTEXT] } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); [BUGGY] token = next(); [BUGGY] } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1426	1426	4	replace	
32	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } builder.append(toString(token)); line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); [BUGGY] [BUGGY] token = next(); } } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1426	1426	4	add	
33	[BUG] [BUGGY] } while (true); [FE] ComparisonFailure [CONTEXT] line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); token = next(); } [BUGGY] } while (true); [BUGGY] } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1428	1428	4	replace	
34	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = trimEnd(line); } builder.append(line); token = next(); } [BUGGY] [BUGGY] } while (true); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1428	1428	4	add	
35	[BUG] [BUGGY] switch (token) { [FE] ComparisonFailure [CONTEXT] private String toString(JsDocToken token) { [BUGGY] switch (token) { [BUGGY] case ANNOTATION: return "@" + stream.getString(); case BANG: return "!"; case COMMA: return ","; case COLON: [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] toString [RETURN_TYPE] String  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4	1173	1173	4	replace	
36	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] private String toString(JsDocToken token) { [BUGGY] [BUGGY] switch (token) { case ANNOTATION: return "@" + stream.getString(); case BANG: return "!"; case COMMA: return ","; case COLON: [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] toString [RETURN_TYPE] String  JsDocToken token [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions Node associatedNode templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview meaning messageArg messageId name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno ErrorReporter errorReporter boolean JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4	1173	1173	4	add	
37	[BUG] [BUGGY] jsdocBuilder.markText(multilineText, startLineno, startCharno,  endLineno, endCharno); [FE] ComparisonFailure [CONTEXT] String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { [BUGGY] jsdocBuilder.markText(multilineText, startLineno, startCharno,     endLineno, endCharno); [BUGGY] endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	
38	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { [BUGGY] [BUGGY] jsdocBuilder.markText(multilineText, startLineno, startCharno,     endLineno, endCharno); endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	add	
39	[BUG] [BUGGY] if (option != WhitespaceOption.SINGLE_LINE) { [FE] ComparisonFailure [CONTEXT] builder.append(' '); } builder.append('*'); } token = next(); continue; case EOL: [BUGGY] if (option != WhitespaceOption.SINGLE_LINE) { [BUGGY] builder.append("\n"); } ignoreStar = true; token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION; [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	
40	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] builder.append(' '); } builder.append('*'); } token = next(); continue; case EOL: [BUGGY] [BUGGY] if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION; [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	add	
41	[BUG] [BUGGY] ignoreStar = true; [FE] ComparisonFailure [CONTEXT] } token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } [BUGGY] ignoreStar = true; [BUGGY] token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	replace	
42	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } [BUGGY] [BUGGY] ignoreStar = true; token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1381	1381	4	add	
43	[BUG] [BUGGY] token = next(); [FE] ComparisonFailure [CONTEXT] token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; [BUGGY] token = next(); [BUGGY] continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || token == JsDocToken.EOF || [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	
44	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; [BUGGY] [BUGGY] token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || token == JsDocToken.EOF || [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	add	
45	[BUG] [BUGGY] continue; [FE] ComparisonFailure [CONTEXT] token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; token = next(); [BUGGY] continue; [BUGGY]  default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || token == JsDocToken.EOF ||  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	
46	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] token = next(); continue; case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; token = next(); [BUGGY] [BUGGY] continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || token == JsDocToken.EOF ||  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	add	
47	[BUG] [BUGGY] if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { [BUGGY] if (token == JsDocToken.EOC || token == JsDocToken.EOL ||  token == JsDocToken.EOF) { [BUGGY] token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	replace	
48	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { [BUGGY] [BUGGY] if (token == JsDocToken.EOC || token == JsDocToken.EOL ||  token == JsDocToken.EOF) { token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1332	1333	4	add	
49	[BUG] [BUGGY] stream.update(); [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } [BUGGY] stream.update(); [BUGGY] int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	
50	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } [BUGGY] [BUGGY] stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	add	
51	[BUG] [BUGGY] int startLineno = stream.getLineno(); [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); [BUGGY] int startLineno = stream.getLineno(); [BUGGY] int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1338	1338	4	replace	
52	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); [BUGGY] [BUGGY] int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1338	1338	4	add	
53	[BUG] [BUGGY] int startCharno = stream.getCharno() + 1; [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); [BUGGY] int startCharno = stream.getCharno() + 1; [BUGGY]   String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line);  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1339	1339	4	replace	
54	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] WhitespaceOption option) { if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); [BUGGY] [BUGGY] int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line);  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1339	1339	4	add	
55	[BUG] [BUGGY] String line = stream.getRemainingJSDocLine(); [FE] ComparisonFailure [CONTEXT] if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  [BUGGY] String line = stream.getRemainingJSDocLine(); [BUGGY] if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; token = next();  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1342	1342	4	replace	
56	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (token == JsDocToken.EOC || token == JsDocToken.EOL || token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  [BUGGY] [BUGGY] String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; token = next();  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1342	1342	4	add	
57	[BUG] [BUGGY] if (option != WhitespaceOption.PRESERVE) { [FE] ComparisonFailure [CONTEXT] token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); [BUGGY] if (option != WhitespaceOption.PRESERVE) { [BUGGY] line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false; [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1343	1343	4	replace	
58	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] token == JsDocToken.EOF) { return new ExtractionInfo("", token); } stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); [BUGGY] [BUGGY] if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false; [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1343	1343	4	add	
59	[BUG] [BUGGY] StringBuilder builder = new StringBuilder(); [FE] ComparisonFailure [CONTEXT] stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } [BUGGY] StringBuilder builder = new StringBuilder(); [BUGGY] builder.append(line); state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false;     [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1347	1347	4	replace	
60	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] stream.update(); int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } [BUGGY] [BUGGY] StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false;     [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1347	1347	4	add	
61	[BUG] [BUGGY] builder.append(line); [FE] ComparisonFailure [CONTEXT] int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); [BUGGY] builder.append(line); [BUGGY]  state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false;     [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1348	1348	4	replace	
62	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] int startLineno = stream.getLineno(); int startCharno = stream.getCharno() + 1;  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); [BUGGY] [BUGGY] builder.append(line); state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false;     [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1348	1348	4	add	
63	[BUG] [BUGGY] state = State.SEARCHING_ANNOTATION; [FE] ComparisonFailure [CONTEXT]  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); [BUGGY] state = State.SEARCHING_ANNOTATION; [BUGGY] token = next(); boolean ignoreStar = false;     do { switch (token) { [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1350	1350	4	replace	
64	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); [BUGGY] [BUGGY] state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false;     do { switch (token) { [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1350	1350	4	add	
65	[BUG] [BUGGY] token = next(); [FE] ComparisonFailure [CONTEXT]  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; [BUGGY] token = next(); [BUGGY]  boolean ignoreStar = false;     do { switch (token) { case STAR: [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1351	1351	4	replace	
66	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  String line = stream.getRemainingJSDocLine(); if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; [BUGGY] [BUGGY] token = next(); boolean ignoreStar = false;     do { switch (token) { case STAR: [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1351	1351	4	add	
67	[BUG] [BUGGY] boolean ignoreStar = false; [FE] ComparisonFailure [CONTEXT] if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; token = next(); [BUGGY] boolean ignoreStar = false; [BUGGY]     do { switch (token) { case STAR: if (ignoreStar) {  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1353	1353	4	replace	
68	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (option != WhitespaceOption.PRESERVE) { line = line.trim(); } StringBuilder builder = new StringBuilder(); builder.append(line); state = State.SEARCHING_ANNOTATION; token = next(); [BUGGY] [BUGGY] boolean ignoreStar = false;     do { switch (token) { case STAR: if (ignoreStar) {  [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1353	1353	4	add	
69	[BUG] [BUGGY] switch (token) { [FE] ComparisonFailure [CONTEXT] state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false;     do { [BUGGY] switch (token) { [BUGGY] case STAR: if (ignoreStar) {  } else {  if (builder.length() > 0) { builder.append(' '); } builder.append('*'); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1360	1360	4	replace	
70	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] state = State.SEARCHING_ANNOTATION; token = next(); boolean ignoreStar = false;     do { [BUGGY] [BUGGY] switch (token) { case STAR: if (ignoreStar) {  } else {  if (builder.length() > 0) { builder.append(' '); } builder.append('*'); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1360	1360	4	add	
71	[BUG] [BUGGY] ignoreStar = false; [FE] ComparisonFailure [CONTEXT] case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; token = next(); continue; default: [BUGGY] ignoreStar = false; [BUGGY] state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1386	1386	4	replace	
72	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] case EOL: if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; token = next(); continue; default: [BUGGY] [BUGGY] ignoreStar = false; state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1386	1386	4	add	
73	[BUG] [BUGGY] state = State.SEARCHING_ANNOTATION; [FE] ComparisonFailure [CONTEXT] if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; token = next(); continue; default: ignoreStar = false; [BUGGY] state = State.SEARCHING_ANNOTATION; [BUGGY]   if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1387	1387	4	replace	
74	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (option != WhitespaceOption.SINGLE_LINE) { builder.append("\n"); } ignoreStar = true; token = next(); continue; default: ignoreStar = false; [BUGGY] [BUGGY] state = State.SEARCHING_ANNOTATION;   if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1387	1387	4	add	
75	[BUG] [BUGGY] if (token == JsDocToken.EOC || token == JsDocToken.EOF ||  // When we're capturing a license block, annotations [FE] ComparisonFailure [CONTEXT] ignoreStar = true; token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   [BUGGY] if (token == JsDocToken.EOC ||    token == JsDocToken.EOF ||       // When we're capturing a license block, annotations [BUGGY] token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1391	1393	4	replace	
76	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] ignoreStar = true; token = next(); continue; default: ignoreStar = false; state = State.SEARCHING_ANNOTATION;   [BUGGY] [BUGGY] if (token == JsDocToken.EOC ||    token == JsDocToken.EOF ||       // When we're capturing a license block, annotations token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1391	1393	4	add	
77	[BUG] [BUGGY] String multilineText = builder.toString(); [FE] ComparisonFailure [CONTEXT] if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { [BUGGY] String multilineText = builder.toString(); [BUGGY]  if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1397	1397	4	replace	
78	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { [BUGGY] [BUGGY] String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1397	1397	4	add	
79	[BUG] [BUGGY] if (option != WhitespaceOption.PRESERVE) { [FE] ComparisonFailure [CONTEXT] if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); [BUGGY] if (option != WhitespaceOption.PRESERVE) { [BUGGY] multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1399	1399	4	replace	
80	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] if (token == JsDocToken.EOC || token == JsDocToken.EOF ||   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); [BUGGY] [BUGGY] if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1399	1399	4	add	
81	[BUG] [BUGGY] int endLineno = stream.getLineno(); [FE] ComparisonFailure [CONTEXT]   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } [BUGGY] int endLineno = stream.getLineno(); [BUGGY] int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1403	1403	4	replace	
82	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]   (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } [BUGGY] [BUGGY] int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1403	1403	4	add	
83	[BUG] [BUGGY] int endCharno = stream.getCharno(); [FE] ComparisonFailure [CONTEXT]  (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); [BUGGY] int endCharno = stream.getCharno(); [BUGGY]  if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1404	1404	4	replace	
84	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT]  (token == JsDocToken.ANNOTATION && option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); [BUGGY] [BUGGY] int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1404	1404	4	add	
85	[BUG] [BUGGY] if (multilineText.length() > 0) { [FE] ComparisonFailure [CONTEXT] option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); [BUGGY] if (multilineText.length() > 0) { [BUGGY] jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1406	1406	4	replace	
86	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] option != WhitespaceOption.PRESERVE)) { String multilineText = builder.toString(); if (option != WhitespaceOption.PRESERVE) { multilineText = multilineText.trim(); } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); [BUGGY] [BUGGY] if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1406	1406	4	add	
87	[BUG] [BUGGY] return new ExtractionInfo(multilineText, token); [FE] ComparisonFailure [CONTEXT] } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } [BUGGY] return new ExtractionInfo(multilineText, token); [BUGGY] } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1411	1411	4	replace	
88	[BUG] [BUGGY] [FE] ComparisonFailure [CONTEXT] } int endLineno = stream.getLineno(); int endCharno = stream.getCharno(); if (multilineText.length() > 0) { jsdocBuilder.markText(multilineText, startLineno, startCharno, endLineno, endCharno); } [BUGGY] [BUGGY] return new ExtractionInfo(multilineText, token); } [CLASS] JsDocInfoParser ErrorReporterParser State ExtractionInfo ExtendedTypeInfo WhitespaceOption [METHOD] extractMultilineTextualBlock [RETURN_TYPE] JsDocInfoParser$ExtractionInfo  JsDocToken token WhitespaceOption option [VARIABLES] Set modifies modifiesAnnotationKeywords suppressionNames suppressions StringBuilder builder Node associatedNode n templateNode typeNode JsDocTokenStream stream FileLevelJsDocBuilder fileLevelJsDocBuilder String annotationName author description fileOverview line meaning messageArg messageId multilineText name paramDescription preserve reason reference returnDescription string templateTypeName typeString version JSDocInfo fileOverviewJSDocInfo int charno endCharno endLineno lineno startCharno startLineno ErrorReporter errorReporter boolean ignoreStar JsDocToken NO_UNREAD_TOKEN token unreadToken WhitespaceOption PRESERVE SINGLE_LINE TRIM option ErrorReporterParser parser State NEXT_IS_ANNOTATION SEARCHING_ANNOTATION SEARCHING_NEWLINE state JSTypeExpression type JSDocInfoBuilder jsdocBuilder StaticSourceFile sourceFile Map annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1411	1411	4	add	
