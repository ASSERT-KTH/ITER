bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	state  =  State.SEARCHING_ANNOTATION;	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	5	None	replace
2	[BUG]  [BUGGY]  if(token!=  State.SEARCHING_ANNOTATION)  {  continue;  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token!=  State.SEARCHING_ANNOTATION)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token!=  State.SEARCHING_ANNOTATION)  {  continue;  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  State.SEARCHING_ANNOTATION)  {  continue;  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	5	None	replace
4	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  if(token!=  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token!=  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token!=  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  if(!ignoredToken)  {  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredToken)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredToken)  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  if(ignoredStar)  {  continue;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(ignoredStar)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(ignoredStar)  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  if(!ignoredStar  &&  token!=  null)  {  continue;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar  &&  token!=  null)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar  &&  token!=  null)  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
16	[BUG]  [BUGGY]  if(!ignoredStar  ||  ignoreStar)  {  continue;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar  ||  ignoreStar)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar  ||  ignoreStar)  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
17	[BUG]  [BUGGY]  if(!ignoredStar  &&  token  ==  null)  {  continue;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar  &&  token  ==  null)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar  &&  token  ==  null)  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
18	[BUG]  [BUGGY]  if(ignoreStar)  {  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(ignoreStar)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(ignoreStar)  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  if(!ignoreStar  ||  ignoreStar)  {  continue;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  ||  ignoreStar)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  ||  ignoreStar)  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  if(!ignoreStar  &&  token!=  null)  {  continue;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  &&  token!=  null)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  &&  token!=  null)  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  if(!ignoreStar  &&  token  ==  null)  {  continue;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  &&  token  ==  null)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  &&  token  ==  null)  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  parser.append( "n ");  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  parser.append( "n ");  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	parser.append( "n ");	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  JsDocToken.EOL)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  JsDocToken.EOL)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  JsDocToken.EOL)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  JsDocToken.EOL)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option!=    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	11	None	replace
31	[BUG]  [BUGGY]  if(!ignoredStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option!=    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	11	None	replace
32	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	  if(option!=    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	11	None	replace
33	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	  if(option!=    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	11	None	replace
34	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  JsDocToken.NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  JsDocToken.NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
35	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  JsDocToken.EOC)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  JsDocToken.EOC)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  JsDocToken.EOL)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  JsDocToken.EOL)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	||  option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
40	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  continue;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
43	[BUG]  [BUGGY]  if(token  ==  JsDocToken.SEARCHING_ANNOTATION)  {  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(token  ==  JsDocToken.SEARCHING_ANNOTATION)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(token  ==  JsDocToken.SEARCHING_ANNOTATION)  {  continue;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	1	None	replace
44	[BUG]  [BUGGY]  token  =  next();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  token  =  next();  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	token  =  next();	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
47	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
48	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
49	[BUG]  [BUGGY]  token  =  next();  continue;  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  token  =  next();  continue;  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	token  =  next();  continue;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
50	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
51	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
52	[BUG]  [BUGGY]  if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
53	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
54	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
55	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_BLOCK  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
56	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }	      	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }	      	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  builder.append( "n ");  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  builder.append( "n ");  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	builder.append( "n ");	      	non-compiled	[CE]  	8	None	replace
60	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	State  state  =  State.SEARCHING_ANNOTATION;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
63	[BUG]  [BUGGY]  if(!ignoredStar)  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar)  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar)  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	2	None	replace
65	[BUG]  [BUGGY]  if(!ignoreStar)  {  token  =  next();  continue;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  token  =  next();  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  token  =  next();  continue;  }	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	      	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  if(!ignoredStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	  if(option!=    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	11	None	replace
69	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option!=  WhitespaceOption.SINGLE_LINE)  {  continue;  }	  if(option!=    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	11	None	replace
70	[BUG]  [BUGGY]  if(!ignoredStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
71	[BUG]  [BUGGY]  if(!ignoredStar  &&  token!=  JsDocToken.NEW_TOKEN)  {  continue;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar  &&  token!=  JsDocToken.NEW_TOKEN)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar  &&  token!=  JsDocToken.NEW_TOKEN)  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
72	[BUG]  [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  tate  =  State.SEARCHING_ANNOTATION;  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	tate  =  State.SEARCHING_ANNOTATION;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	1	None	replace
73	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  token;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  State.SEARCHING_ANNOTATION  =  token;  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	State.SEARCHING_ANNOTATION  =  token;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	1	None	replace
74	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  continue;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
75	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  continue;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_ANNOTATION)  {  continue;  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_ANNOTATION)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_ANNOTATION)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
77	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_EOL)  {  continue;  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_EOL)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_EOL)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
78	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_START)  {  continue;  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_START)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_START)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
80	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
81	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option!=  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option!=  WhitespaceOption.SINGLE_BLOCK)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
82	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
83	[BUG]  [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
85	[BUG]  [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  continue;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
86	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  continue;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
87	[BUG]  [BUGGY]  if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar)  {  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
88	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
89	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	3	None	replace
91	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  continue;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  if(!ignoreStar  &&  token!=  JsDocToken.NEW_TOKEN)  {  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar  &&  token!=  JsDocToken.NEW_TOKEN)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar  &&  token!=  JsDocToken.NEW_TOKEN)  {  continue;  }	  if(!ignoreStar)    {    continue;    }    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  continue;  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state!=  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  continue;  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	5	None	replace
94	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  continue;  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  continue;  }	  if(state!=    State.SEARCHING_ANNOTATION)    {    continue;    }    	non-compiled	[CE]  	5	None	replace
95	[BUG]  [BUGGY]  if(!ignoredStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoredStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoredStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  continue;  }	  if(!ignoredStar)    {    continue;    }    	non-compiled	[CE]  	13	None	replace
96	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  if(!ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(!ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(!ignoreStar)  {  builder.append( "n ");  }	      	non-compiled	[CE]  	8	None	replace
98	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  continue;  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  continue;  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  continue;  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    continue;    }    	non-compiled	[CE]  	12	None	replace
99	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option!=  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option!=  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
100	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(option  ==  WhitespaceOption.SINGLE_BLOCK  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  continue;  }  else  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_BLOCK)    {    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
101	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
102	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextToken();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextToken();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextToken();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
103	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  first();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(   "\n   ");  }  ignoreStar  =  true;  token  =  next();    [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  first();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1383	1383	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  first();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	6	None	replace
