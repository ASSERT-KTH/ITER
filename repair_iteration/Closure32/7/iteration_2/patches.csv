bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.next();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.next();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.next();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
2	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.createState();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.createState();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.createState();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
3	[BUG]  [BUGGY]  state  =  fileLevelJsDocBuilder.getState();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  state  =  fileLevelJsDocBuilder.getState();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	state  =  fileLevelJsDocBuilder.getState();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
4	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState(true);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState(true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.getState(true);	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
5	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.reset();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.reset();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.reset();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
6	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append( "n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append( "n ");	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
7	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(lineno);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(lineno);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
8	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno  +  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(lineno  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
9	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineno));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(lineno));	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
10	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno  +  2);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno  +  2);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(lineno  +  2);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
11	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(lineno  +  1);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(lineno  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(lineno  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
12	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())  ==  'n';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length())  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	5	None	replace
15	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length())  ==  'n';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno.length())  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	5	None	replace
16	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  {  'n';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  {  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  {  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	5	None	replace
17	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineno,  fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineno,  fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(lineno,  fileLevelJsDocBuilder.charAt(0));	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
18	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
19	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineno  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineno  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(lineno  +  1);	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
20	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)));	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
21	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.toString());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.toString());	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
22	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	76	None	replace
23	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	76	None	replace
24	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	76	None	replace
25	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.end();  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.end();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.end();  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    break;    	non-compiled	[CE]  	159	None	replace
26	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.token();  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.token();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.token();  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    break;    	non-compiled	[CE]  	159	None	replace
27	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	112	None	replace
28	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	112	None	replace
29	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	112	None	replace
30	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
31	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
32	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
33	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
34	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
35	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  '/';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
36	[BUG]  [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
37	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.parse(token);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.parse(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.parse(token);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
38	[BUG]  [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  type);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  parseAndRecordTypeNode(token,  type);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
39	[BUG]  [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  null);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  null);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  parseAndRecordTypeNode(token,  null);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
40	[BUG]  [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token)+  1;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token)+  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  parseAndRecordTypeNode(token)+  1;	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
41	[BUG]  [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  false);  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  false);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  parseAndRecordTypeNode(token,  false);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
42	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	46	None	replace
43	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	46	None	replace
44	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	46	None	replace
45	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	75	None	replace
46	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	75	None	replace
47	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
48	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(0);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(0);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
49	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().startsWith(preserve);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().startsWith(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().startsWith(preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
50	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(prefix);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(prefix);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(prefix);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
51	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(preserve  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(preserve  +  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
52	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  +  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size()  +  1;	  continue    retry    =    fileLevelJsDocBuilder.size();    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  -  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  -  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size()  -  1;	  continue    retry    =    fileLevelJsDocBuilder.size();    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  *  2;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  *  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size()  *  2;	  continue    retry    =    fileLevelJsDocBuilder.size();    	non-compiled	[CE]  	12	None	replace
55	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  +  2;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  +  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size()  +  2;	  continue    retry    =    fileLevelJsDocBuilder.size();    	non-compiled	[CE]  	12	None	replace
56	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  >  0;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  >  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size()  >  0;	  continue    retry    =    fileLevelJsDocBuilder.size();    	non-compiled	[CE]  	12	None	replace
57	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  >  1;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  >  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size()  >  1;	  continue    retry    =    fileLevelJsDocBuilder.size();    	non-compiled	[CE]  	12	None	replace
58	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
59	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  parseAndRecordTypeNode(token);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  parseAndRecordTypeNode(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  parseAndRecordTypeNode(token);	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
60	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
61	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
62	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
63	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
64	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
65	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
66	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
67	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  1)!=  '/';  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  1)!=  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
68	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( ", ");	  fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	14	None	replace
69	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('  ');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('  ');	  fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	14	None	replace
70	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('ufffd');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('ufffd');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('ufffd');	  fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( ": ");	  fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	14	None	replace
72	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(type);	  fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.startsWith(preserve);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.startsWith(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.startsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
74	[BUG]  [BUGGY]  fileLevelJsDocBuilder.startsWith(preserve);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.startsWith(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.startsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
75	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
76	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve,  true);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve,  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve,  true);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
77	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	36	None	replace
78	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	36	None	replace
79	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	36	None	replace
80	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	36	None	replace
81	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno());	  fileLevelJsDocBuilder.append(next());    	non-compiled	[CE]  	63	None	replace
82	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(current());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(current());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(current());	  fileLevelJsDocBuilder.append(next());    	non-compiled	[CE]  	63	None	replace
83	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(currentNode());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(currentNode());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(currentNode());	  fileLevelJsDocBuilder.append(next());    	non-compiled	[CE]  	63	None	replace
84	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(nextToken());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(nextToken());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(nextToken());	  fileLevelJsDocBuilder.append(next());    	non-compiled	[CE]  	63	None	replace
85	[BUG]  [BUGGY]  state  =  fileLevelJsDocBuilder.getState();  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  state  =  fileLevelJsDocBuilder.getState();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	state  =  fileLevelJsDocBuilder.getState();  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
86	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  continue;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  continue;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.getState();  continue;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
87	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.next();  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.next();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.next();  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
88	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.createState();  break;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.createState();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.createState();  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
89	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	42	None	replace
90	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	42	None	replace
91	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)  ==  '-';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  1)  ==  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	42	None	replace
92	[BUG]  [BUGGY]  continue;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue;	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
93	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
94	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.toString();	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
95	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append('n');	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
96	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append(lineno);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append(lineno);	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
97	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append( "n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append( "n ");	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
98	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(preserve);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(preserve);	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
99	[BUG]  [BUGGY]  ||!isBracketedParam)  {  continue  this;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||!isBracketedParam)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||!isBracketedParam)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
100	[BUG]  [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
101	[BUG]  [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
102	[BUG]  [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(!isBracketedParam  &&  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
103	[BUG]  [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder.charAt(token)!=  '-')  {  continue  this;  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(!isBracketedParam  &&  fileLevelJsDocBuilder.charAt(token)!=  '-')  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(!isBracketedParam  &&  fileLevelJsDocBuilder.charAt(token)!=  '-')  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
104	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
105	[BUG]  [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
106	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
107	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder  -=  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder  -=  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder  -=  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
108	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
109	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
110	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(paramDescription);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(paramDescription);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(paramDescription);	  fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	147	None	replace
111	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(line);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(line);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(line);	  fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	147	None	replace
112	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(remainder);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(remainder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(remainder);	  fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	147	None	replace
113	[BUG]  [BUGGY]  if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
114	[BUG]  [BUGGY]  if(lineno!=  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno!=  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno!=  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
115	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getLineno()  -  1;  charno  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  stream.getLineno()  -  1;  charno  =  stream.getCharno();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  stream.getLineno()  -  1;  charno  =  stream.getCharno();	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
116	[BUG]  [BUGGY]  if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  }	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
117	[BUG]  [BUGGY]  if(lineno!=  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno!=  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno!=  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  }	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
118	[BUG]  [BUGGY]  if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  ==  null)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
119	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  2  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  2  +  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  *  2  +  1;	  continue    retry    =    fileLevelJsDocBuilder.length()    *    2;    	non-compiled	[CE]  	9	None	replace
120	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  /  2;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  /  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  /  2;	  continue    retry    =    fileLevelJsDocBuilder.length()    *    2;    	non-compiled	[CE]  	9	None	replace
121	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  -  2;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  -  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  -  2;	  continue    retry    =    fileLevelJsDocBuilder.length()    *    2;    	non-compiled	[CE]  	9	None	replace
122	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	97	None	replace
123	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	97	None	replace
124	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	97	None	replace
125	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  0;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	97	None	replace
126	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  >  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  >  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  >  0;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
127	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  <=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  <=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  <=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
128	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  ==  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  ==  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  ==  1;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
129	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length!=  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length!=  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length!=  1;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
130	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length!=  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
131	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  >=  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  >=  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  >=  1;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
132	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
133	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
134	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
135	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  parseAndRecordTypeNode(token));  break;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  parseAndRecordTypeNode(token));  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  parseAndRecordTypeNode(token));  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
136	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token,  unreadToken));  break;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token,  unreadToken));  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token,  unreadToken));  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
137	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  type);  break;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  type);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  type);  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
138	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  1);	  fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	65	None	replace
139	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  -  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  -  1);	  fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	65	None	replace
140	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  charno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  charno);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  charno);	  fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	65	None	replace
141	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  1);	  fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	65	None	replace
142	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  2);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  2);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  2);	  fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	65	None	replace
143	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.token();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.token();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.token();	  JSDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	122	None	replace
144	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.append(next());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.append(next());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.append(next());	  JSDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	122	None	replace
145	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getLastChild();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getLastChild();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getLastChild();	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
146	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getCurrentToken();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getCurrentToken();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getCurrentToken();	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
147	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.toString();	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
148	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.first();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.first();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.first();	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
149	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.length()  -  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.length()  -  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.length()  -  1;	  continue    fileLevelJsDocBuilder    -    1;    	non-compiled	[CE]  	150	None	replace
150	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  -  1L;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder  -  1L;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  -  1L;	  continue    fileLevelJsDocBuilder    -    1;    	non-compiled	[CE]  	150	None	replace
151	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  -  2;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder  -  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  -  2;	  continue    fileLevelJsDocBuilder    -    1;    	non-compiled	[CE]  	150	None	replace
152	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.length  -  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.length  -  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.length  -  1;	  continue    fileLevelJsDocBuilder    -    1;    	non-compiled	[CE]  	150	None	replace
153	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  ==  1;	  continue    retry    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	70	None	replace
154	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length()!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	70	None	replace
155	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()!=  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()!=  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()!=  1;	  continue    retry    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	70	None	replace
156	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(typeString.toString());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(typeString.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(typeString.toString());	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	87	None	replace
157	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	87	None	replace
158	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	87	None	replace
159	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.length()  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.length()  +  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.length()  +  1;	  continue    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	55	None	replace
160	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.length()  -  2;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.length()  -  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.length()  -  2;	  continue    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	55	None	replace
161	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.length()  +  2;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.length()  +  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.length()  +  2;	  continue    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	55	None	replace
162	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(0);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setLength(0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setLength(0);	  continue    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	55	None	replace
163	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	3	None	replace
164	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getLastChild();  break;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getLastChild();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getLastChild();  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    break;    	non-compiled	[CE]  	157	None	replace
165	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.removeFirst();  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.removeFirst();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.removeFirst();  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    break;    	non-compiled	[CE]  	157	None	replace
166	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.token;  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.token;  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.token;  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    break;    	non-compiled	[CE]  	157	None	replace
167	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
168	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
169	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
170	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
171	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  null;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  null;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  continue  null;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
172	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	1	None	replace
173	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	109	None	replace
174	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	109	None	replace
175	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	109	None	replace
176	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	43	None	replace
177	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-');	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	43	None	replace
178	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  ==  0;	  continue    fileLevelJsDocBuilder    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	151	None	replace
179	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >=  0;	  continue    fileLevelJsDocBuilder    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	151	None	replace
180	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()!=  0;	  continue    fileLevelJsDocBuilder    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	151	None	replace
181	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.length()  >  0;	  continue    fileLevelJsDocBuilder    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	151	None	replace
182	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  <=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  <=  0;	  continue    fileLevelJsDocBuilder    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	151	None	replace
183	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length()  ==  0;	  continue    retry    ||    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	32	None	replace
184	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder  ==  null;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder  ==  null;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder  ==  null;	  continue    retry    ||    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	32	None	replace
185	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append('n');	  continue    retry    ||    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	32	None	replace
186	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  preserve.toString());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  preserve.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  preserve.toString());	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
187	[BUG]  [BUGGY]  continue  retry(lineno,  fileLevelJsDocBuilder.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno,  fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno,  fileLevelJsDocBuilder.toString());	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
188	[BUG]  [BUGGY]  continue  retry(token,  fileLevelJsDocBuilder.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(token,  fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(token,  fileLevelJsDocBuilder.toString());	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
189	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString()  +  1);	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
190	[BUG]  [BUGGY]  tryRetry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  tryRetry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	tryRetry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
191	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.charAt(0));	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
192	[BUG]  [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	154	None	replace
193	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	154	None	replace
194	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	154	None	replace
195	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  0;	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
196	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  0;	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
197	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.length()!=  0;	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
198	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  0;	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
199	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  1;	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
200	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.length()  >  0;	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
201	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	106	None	replace
202	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	106	None	replace
203	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	106	None	replace
204	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	106	None	replace
205	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  'n';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	106	None	replace
206	[BUG]  [BUGGY]  if(type!=  null)  {  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
207	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
208	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
209	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
210	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
211	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
212	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
213	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
214	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  true);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  true);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
215	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
216	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
217	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
218	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('#');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append('#');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('#');	  continue    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	56	None	replace
219	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append('n');	  continue    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	56	None	replace
220	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	6	None	replace
221	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	6	None	replace
222	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	&&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	6	None	replace
223	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(token.length())  ==  'n';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(token.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(token.length())  ==  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	6	None	replace
224	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(lineno.length())  ==  'n';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(lineno.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(lineno.length())  ==  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	6	None	replace
225	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    	non-compiled	[CE]  	24	None	replace
226	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  parseAndRecordTypeNode(token)));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  parseAndRecordTypeNode(token)));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(  parseAndRecordTypeNode(token)));	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    	non-compiled	[CE]  	24	None	replace
227	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type,  parseAndRecordTypeNode(token));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(type,  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(type,  parseAndRecordTypeNode(token));	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    	non-compiled	[CE]  	24	None	replace
228	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  type);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  type);	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    	non-compiled	[CE]  	24	None	replace
229	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getNext();    break;    	non-compiled	[CE]  	126	None	replace
230	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "# ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
231	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "null ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( "null ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "null ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
232	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "   ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( "   ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "   ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
233	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( ";n ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
234	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "[ ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
235	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "# ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( "# ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "# ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
236	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "] ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( "] ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "] ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
237	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( ";n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( ";n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( ";n ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
238	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( ": ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( ": ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( ": ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
239	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "[ ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( "[ ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "[ ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
240	[BUG]  [BUGGY]  if(type!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  }	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
241	[BUG]  [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  }	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
242	[BUG]  [BUGGY]  if(type!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  }	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
243	[BUG]  [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  }	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
244	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  return  false;  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
245	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())+  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())+  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())+  1;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
246	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
247	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
248	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  drauf  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  drauf  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  drauf  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
249	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  0;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
250	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
251	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(lineno  +  1);	  continue    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	57	None	replace
252	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno  -  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(lineno  -  1);	  continue    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	57	None	replace
253	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno,  charno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno,  charno);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(lineno,  charno);	  continue    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	57	None	replace
254	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno  +  2);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno  +  2);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(lineno  +  2);	  continue    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	57	None	replace
255	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
256	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  preserve);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
257	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
258	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
259	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
260	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	107	None	replace
261	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	107	None	replace
262	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  >  1;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
263	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  <  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  <  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  <  0;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
264	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >  2;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  >  2;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
265	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  <  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  <  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  <  1;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
266	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  >=  0;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
267	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	130	None	replace
268	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	130	None	replace
269	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	130	None	replace
270	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
271	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
272	[BUG]  [BUGGY]  continue  retry  &&  fileOverviewJSDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileOverviewJSDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileOverviewJSDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
273	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
274	[BUG]  [BUGGY]  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
275	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
276	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('#');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('#');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('#');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	62	None	replace
277	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('[');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('[');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('[');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	62	None	replace
278	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('N');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('N');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('N');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	62	None	replace
279	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('0');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('0');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('0');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	62	None	replace
280	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n',  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('n',  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('n',  1);	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	62	None	replace
281	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(typeString);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(typeString);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(typeString);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	136	None	replace
282	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(type);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	136	None	replace
283	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(token);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(token);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	136	None	replace
284	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(lineno);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(lineno);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	136	None	replace
285	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(remainder);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(remainder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(remainder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	136	None	replace
286	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
287	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
288	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(remainder);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(remainder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(remainder);	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
289	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(type);	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
290	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(parse);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(parse);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(parse);	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
291	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(generateJSDocInfo);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(generateJSDocInfo);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(generateJSDocInfo);	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
292	[BUG]  [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
293	[BUG]  [BUGGY]  ||  isBracketedParam)  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  isBracketedParam)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  isBracketedParam)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
294	[BUG]  [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder  ==  null)  {  continue  this;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder  ==  null)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam  ||  fileLevelJsDocBuilder  ==  null)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
295	[BUG]  [BUGGY]  if(isBracketedParam  ||  isJSTypeExpression)  {  continue  this;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam  ||  isJSTypeExpression)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam  ||  isJSTypeExpression)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
296	[BUG]  [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder.length()  ==  0)  {  continue  this;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder.length()  ==  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam  ||  fileLevelJsDocBuilder.length()  ==  0)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
297	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(token);	  continue    retry    ||    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	101	None	replace
298	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(unreadToken);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(unreadToken);	  continue    retry    ||    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	101	None	replace
299	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	101	None	replace
300	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno,  token);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno,  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(lineno,  token);	  continue    retry    ||    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	101	None	replace
301	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve    +    1);    	non-compiled	[CE]  	17	None	replace
302	[BUG]  [BUGGY]  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.endsWith(preserve  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve    +    1);    	non-compiled	[CE]  	17	None	replace
303	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.endsWith(preserve  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve    +    1);    	non-compiled	[CE]  	17	None	replace
304	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve  +  1));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.endsWith(preserve  +  1));	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve    +    1);    	non-compiled	[CE]  	17	None	replace
305	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
306	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
307	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  + "n ";  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  + "n ";  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  + "n ";	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
308	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
309	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  +  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  +  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
310	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
311	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append('n'));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append('n'));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append('n'));	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
312	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(type));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(type));	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
313	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(value));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(value));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(value));	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
314	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append('/'));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append('/'));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append('/'));	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
315	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.token();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.token();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.token();	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	27	None	replace
316	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.nextToken();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.nextToken();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.nextToken();	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	27	None	replace
317	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.end();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.end();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.end();	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	27	None	replace
318	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.start();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.start();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.start();	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	27	None	replace
319	[BUG]  [BUGGY]  Continue  retry  =  fileLevelJsDocBuilder.length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  Continue  retry  =  fileLevelJsDocBuilder.length();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	Continue  retry  =  fileLevelJsDocBuilder.length();	  continue    retry    =    fileLevelJsDocBuilder.length()    +    2;    	non-compiled	[CE]  	10	None	replace
320	[BUG]  [BUGGY]  continuation  retry  =  fileLevelJsDocBuilder.length();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continuation  retry  =  fileLevelJsDocBuilder.length();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continuation  retry  =  fileLevelJsDocBuilder.length();	  continue    retry    =    fileLevelJsDocBuilder.length()    +    2;    	non-compiled	[CE]  	10	None	replace
321	[BUG]  [BUGGY]  continue  retry  =  lineLevelJsDocBuilder.length();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  lineLevelJsDocBuilder.length();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  lineLevelJsDocBuilder.length();	  continue    retry    =    fileLevelJsDocBuilder.length()    +    2;    	non-compiled	[CE]  	10	None	replace
322	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1).append('-');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1).append('-');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  1).append('-');	  fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	45	None	replace
323	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)  {  '-';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)  {  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  1)  {  '-';	  fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	45	None	replace
324	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setCharno(lineno  +  1)  {  '-';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setCharno(lineno  +  1)  {  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setCharno(lineno  +  1)  {  '-';	  fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	45	None	replace
325	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';	  fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	45	None	replace
326	[BUG]  [BUGGY]  Continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  Continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	Continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	92	None	replace
327	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(typeString.toString());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(typeString.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(typeString.toString());	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	113	None	replace
328	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	113	None	replace
329	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	113	None	replace
330	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	113	None	replace
331	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	113	None	replace
332	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(preserve);	  continue    retry    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	13	None	replace
333	[BUG]  [BUGGY]  continue  retry  =  fileLevelJSDocBuilder.length();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJSDocBuilder.length();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJSDocBuilder.length();	  continue    retry    =    fileLevelJsDocBuilder.length()    -    1;    	non-compiled	[CE]  	8	None	replace
334	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  3)!=  '-';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  3)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  3)!=  '-';	  fileLevelJsDocBuilder.append(lineno    +    1)!=    '-';    	non-compiled	[CE]  	86	None	replace
335	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)*  '-';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)*  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  1)*  '-';	  fileLevelJsDocBuilder.append(lineno    +    1)!=    '-';    	non-compiled	[CE]  	86	None	replace
336	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
337	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
338	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
339	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
340	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(unreadToken);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(unreadToken);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(unreadToken);	  continue    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	129	None	replace
341	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(unreadToken);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(unreadToken);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(unreadToken);	  continue    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	129	None	replace
342	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append(token);	  continue    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	129	None	replace
343	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno,  unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno,  unreadToken);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(lineno,  unreadToken);	  continue    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	129	None	replace
344	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  unreadToken);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  unreadToken);	  continue    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	129	None	replace
345	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.length()  ==  0;	  continue    retry;    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	149	None	replace
346	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.length()  >=  0;	  continue    retry;    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	149	None	replace
347	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.length()  >  0;	  continue    retry;    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	149	None	replace
348	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  <=  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.length()  <=  0;	  continue    retry;    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	149	None	replace
349	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(retry);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(retry);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(retry);	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
350	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
351	[BUG]  [BUGGY]  return  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
352	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
353	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder  ||  retry.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder  ||  retry.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder  ||  retry.append(fileLevelJsDocBuilder.charAt(0));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
354	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.toString()  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.toString()  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.toString()  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
355	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(typeString.toString());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(typeString.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(typeString.toString());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	88	None	replace
356	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(type.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(type.toString());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	88	None	replace
357	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	88	None	replace
358	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineNumber);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineNumber);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineNumber);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	88	None	replace
359	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	68	None	replace
360	[BUG]  [BUGGY]  continue  retry  &&  fileOverviewJSDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileOverviewJSDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileOverviewJSDocBuilder.append(fileOverviewJSDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	68	None	replace
361	[BUG]  [BUGGY]  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	68	None	replace
362	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder,  preserve);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder,  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder,  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	68	None	replace
363	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    '/';    	non-compiled	[CE]  	39	None	replace
364	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    '/';    	non-compiled	[CE]  	39	None	replace
365	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  '/';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    '/';    	non-compiled	[CE]  	39	None	replace
366	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)  ==  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    '/';    	non-compiled	[CE]  	39	None	replace
367	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  0;	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
368	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  0);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
369	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  >>  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  >>  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  >>  0;	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
370	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
371	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
372	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
373	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
374	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length  ==  0;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length  ==  0;	  continue    retry    &&    fileLevelJsDocBuilder.length    ==    0;    	non-compiled	[CE]  	98	None	replace
375	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  <  2;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  <  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  <  2;	  continue    retry    &&    fileLevelJsDocBuilder.length    ==    0;    	non-compiled	[CE]  	98	None	replace
376	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(lineNumber);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(lineNumber);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(lineNumber);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineNumber);    	non-compiled	[CE]  	102	None	replace
377	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineNumber  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineNumber  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(lineNumber  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineNumber);    	non-compiled	[CE]  	102	None	replace
378	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineNumber));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(lineNumber));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(lineNumber));	  continue    retry    ||    fileLevelJsDocBuilder.append(lineNumber);    	non-compiled	[CE]  	102	None	replace
379	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(precedence);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(precedence);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(precedence);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineNumber);    	non-compiled	[CE]  	102	None	replace
380	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  '/';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
381	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
382	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())*  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())*  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())*  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
383	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
384	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
385	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  ==  '/';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  ==  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
386	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  '/';  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
387	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(type));    	non-compiled	[CE]  	105	None	replace
388	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(type));    	non-compiled	[CE]  	105	None	replace
389	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type),  preserve);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type),  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(type));    	non-compiled	[CE]  	105	None	replace
390	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(type));    	non-compiled	[CE]  	105	None	replace
391	[BUG]  [BUGGY]  continue  retry(type,  parseAndRecordTypeNode(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(type,  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(type,  parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
392	[BUG]  [BUGGY]  continue  retry(lineno,  parseAndRecordTypeNode(token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno,  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno,  parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
393	[BUG]  [BUGGY]  continue  retry(parseAndRecordTypeNode(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
394	[BUG]  [BUGGY]  continue  retry(token,  parseAndRecordTypeNode(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(token,  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(token,  parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
395	[BUG]  [BUGGY]  parseAndRecordTypeNode(token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
396	[BUG]  [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  continue    retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	82	None	replace
397	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	82	None	replace
398	[BUG]  [BUGGY]  if(type  ==  null)  {  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  continue    retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	82	None	replace
399	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1));	  continue    retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	82	None	replace
400	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  continue    retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	82	None	replace
401	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	31	None	replace
402	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	31	None	replace
403	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
404	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
405	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
406	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('ufffd');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('ufffd');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('ufffd');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
407	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
408	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	155	None	replace
409	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	155	None	replace
410	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( ",n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( ",n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( ",n ");	  continue    fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  	58	None	replace
411	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ",n ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( ",n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( ",n ");	  continue    fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  	58	None	replace
412	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( ", ",  preserve);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( ", ",  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( ", ",  preserve);	  continue    fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  	58	None	replace
413	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(',');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(',');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(',');	  continue    fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  	58	None	replace
414	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(description);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(description);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(description);	  continue    retry    ||    fileLevelJsDocBuilder.append(description);    	non-compiled	[CE]  	23	None	replace
415	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(description);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(description);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(description);	  continue    retry    ||    fileLevelJsDocBuilder.append(description);    	non-compiled	[CE]  	23	None	replace
416	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(description));  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(description));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(description));	  continue    retry    ||    fileLevelJsDocBuilder.append(description);    	non-compiled	[CE]  	23	None	replace
417	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(messageId);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(messageId);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(messageId);	  continue    retry    ||    fileLevelJsDocBuilder.append(description);    	non-compiled	[CE]  	23	None	replace
418	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(message);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(message);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(message);	  continue    retry    ||    fileLevelJsDocBuilder.append(description);    	non-compiled	[CE]  	23	None	replace
419	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(typeString.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(typeString.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(typeString.toString());	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	90	None	replace
420	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(lineno.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(lineno.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(lineno.toString());	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	90	None	replace
421	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	90	None	replace
422	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	90	None	replace
423	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	90	None	replace
424	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  return  false;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
425	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  throw  new  IllegalArgumentException( " ");  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  throw  new  IllegalArgumentException( " ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  throw  new  IllegalArgumentException( " ");	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
426	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  parseAndRecordTypeNode(token));  return  false;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  parseAndRecordTypeNode(token));  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  parseAndRecordTypeNode(token));  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
427	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  return  true;  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  return  true;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  +  1));  return  true;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
428	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
429	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
430	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
431	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	78	None	replace
432	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	78	None	replace
433	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	&&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	78	None	replace
434	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(lineno.length())!=  'n';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(lineno.length())!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(lineno.length())!=  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	78	None	replace
435	[BUG]  [BUGGY]  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.length()  ==  0;	  fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	121	None	replace
436	[BUG]  [BUGGY]  fileLevelJsDocBuilder.length()  <=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.length()  <=  0;	  fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	121	None	replace
437	[BUG]  [BUGGY]  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.length()  >=  0;	  fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	121	None	replace
438	[BUG]  [BUGGY]  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.length()!=  0;	  fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	121	None	replace
439	[BUG]  [BUGGY]  fileLevelJsDocBuilder.length()  >  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.length()  >  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.length()  >  1;	  fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	121	None	replace
440	[BUG]  [BUGGY]  fileLevelJsDocBuilder.length()  >>  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.length()  >>  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.length()  >>  0;	  fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	121	None	replace
441	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    2)!=    '-';    	non-compiled	[CE]  	85	None	replace
442	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    2)!=    '-';    	non-compiled	[CE]  	85	None	replace
443	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())+  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())+  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())+  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
444	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
445	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('/');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('/');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('/');	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
446	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >=  '/';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
447	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
448	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
449	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  continue  this;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
450	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
451	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.STRING)  {  continue  this;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.STRING)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.STRING)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
452	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	49	None	replace
453	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	49	None	replace
454	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	49	None	replace
455	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  'n';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
456	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  2!=  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
457	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())*  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())*  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())*  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
458	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  ==  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)  ==  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
459	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
460	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(typeString);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(typeString);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(typeString);	  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	100	None	replace
461	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(param);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(param);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(param);	  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	100	None	replace
462	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token    +    1));    	non-compiled	[CE]  	83	None	replace
463	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token    +    1));    	non-compiled	[CE]  	83	None	replace
464	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	2	None	replace
465	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	2	None	replace
466	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  >=  1;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >=    0;    	non-compiled	[CE]  	71	None	replace
467	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length()  >=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >=    0;    	non-compiled	[CE]  	71	None	replace
468	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  continue    retry;    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	139	None	replace
469	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry;    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	139	None	replace
470	[BUG]  [BUGGY]  if(lineno  ==  lineno)  {  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  ==  lineno)  {  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  ==  lineno)  {  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  continue    retry;    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	139	None	replace
471	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	162	None	replace
472	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	162	None	replace
473	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  lineLevelJsDocBuilder.length());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  lineLevelJsDocBuilder.length());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  lineLevelJsDocBuilder.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	162	None	replace
474	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	162	None	replace
475	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  lineNumber.length()  -  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  lineNumber.length()  -  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  lineNumber.length()  -  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	162	None	replace
476	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
477	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
478	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	&&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
479	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
480	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	37	None	replace
481	[BUG]  [BUGGY]  if(lineno  >=  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  if(lineno    >=    lineno)    {    continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    }    	non-compiled	[CE]  	115	None	replace
482	[BUG]  [BUGGY]  if(lineno  >=  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }	  if(lineno    >=    lineno)    {    continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    }    	non-compiled	[CE]  	115	None	replace
483	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	119	None	replace
484	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('ufffd');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('ufffd');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('ufffd');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	119	None	replace
485	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(preserve));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(preserve));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(preserve));	  continue    retry(fileLevelJsDocBuilder.endsWith(preserve));    	non-compiled	[CE]  	15	None	replace
486	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.startsWith(preserve));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.startsWith(preserve));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.startsWith(preserve));	  continue    retry(fileLevelJsDocBuilder.endsWith(preserve));    	non-compiled	[CE]  	15	None	replace
487	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve)+  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.endsWith(preserve)+  1);	  continue    retry(fileLevelJsDocBuilder.endsWith(preserve));    	non-compiled	[CE]  	15	None	replace
488	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	134	None	replace
489	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	134	None	replace
490	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	134	None	replace
491	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  2;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  ==  2;	  continue    retry    &&    fileLevelJsDocBuilder.length()    ==    0;    	non-compiled	[CE]  	34	None	replace
492	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(type);	  continue    retry    ||    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
493	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(type,  preserve);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(type,  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(type,  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
494	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(token);	  continue    retry    &&    fileLevelJsDocBuilder    ==    null;    	non-compiled	[CE]  	33	None	replace
495	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  <=  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length()  <=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    <=    0;    	non-compiled	[CE]  	73	None	replace
496	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  <=  1;	  continue    retry    &&    fileLevelJsDocBuilder.length()    <=    0;    	non-compiled	[CE]  	73	None	replace
497	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  =  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  =  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  ==  =  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    <=    0;    	non-compiled	[CE]  	73	None	replace
498	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileOverview);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	146	None	replace
499	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    	non-compiled	[CE]  	116	None	replace
500	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    	non-compiled	[CE]  	116	None	replace
501	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append( "n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append( "n ");	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    	non-compiled	[CE]  	116	None	replace
502	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
503	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
504	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(charno));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(charno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(charno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
505	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno  +  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno  +  1));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
506	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
507	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
508	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(0)  ==  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
509	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(token)!=  '-';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(token)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(token)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
510	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno)!=  '-';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
511	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('-');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append('-');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('-');	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
512	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(1)  ==  '-';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(1)  ==  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
513	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	80	None	replace
514	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;	  JsDocToken    next    =    fileLevelJsDocBuilder.getNext();    	non-compiled	[CE]  	25	None	replace
515	[BUG]  [BUGGY]  JsDocToken  next  =  jsdocBuilder.getNext();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  jsdocBuilder.getNext();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  jsdocBuilder.getNext();	  JsDocToken    next    =    fileLevelJsDocBuilder.getNext();    	non-compiled	[CE]  	25	None	replace
516	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >>  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	77	None	replace
517	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >=  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())  >=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	77	None	replace
518	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(token))!=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(token))!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(token))!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	132	None	replace
519	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  <  1;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    1;    	non-compiled	[CE]  	74	None	replace
520	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  >  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  >  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length()  >  1;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    1;    	non-compiled	[CE]  	74	None	replace
521	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	138	None	replace
522	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
523	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(param);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(param);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(param);	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
524	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append('n');	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
525	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token)));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token)));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token)));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
526	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
527	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
528	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
529	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
530	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  continue    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	152	None	replace
531	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(lineNumber);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(lineNumber);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(lineNumber);	  continue    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	152	None	replace
532	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	93	None	replace
533	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	93	None	replace
534	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	93	None	replace
535	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + "));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + "));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + "));	  ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	81	None	replace
536	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	&&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	81	None	replace
537	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	81	None	replace
538	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	81	None	replace
539	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
540	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
541	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.VALUE_STRING)  {  continue  this;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.VALUE_STRING)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.VALUE_STRING)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
542	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.EXPR_RESULT)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
543	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  continue  this;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
544	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	47	None	replace
545	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append('  ');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append('  ');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append('  ');	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
546	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(''+  preserve);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(''+  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(''+  preserve);	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
547	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append('  ');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append('  ');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append('  ');	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
548	[BUG]  [BUGGY]  continue(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue(fileLevelJsDocBuilder.length()  -  1);	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
549	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.toString()  + "n ";  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.toString()  + "n ";  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.toString()  + "n ";	  continue    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	52	None	replace
550	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.toString(),  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.toString(),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.toString(),  preserve);	  continue    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	52	None	replace
551	[BUG]  [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	165	None	replace
552	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,    token));    	non-compiled	[CE]  	84	None	replace
553	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  charno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,    token));    	non-compiled	[CE]  	84	None	replace
554	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(charno,  token));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(charno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(charno,  token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,    token));    	non-compiled	[CE]  	84	None	replace
555	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,    token));    	non-compiled	[CE]  	84	None	replace
556	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1)!=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	94	None	replace
557	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	94	None	replace
558	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder);  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  fileLevelJsDocBuilder);  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
559	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  unreadToken);  break;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  unreadToken);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  unreadToken);  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
560	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  null);  break;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  null);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  null);  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
561	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  sourceFile);  break;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  sourceFile);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  sourceFile);  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
562	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  lineno);  break;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  lineno);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  lineno);  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
563	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  type);  break;  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  type);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  type);  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
564	[BUG]  [BUGGY]  while(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
565	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
566	[BUG]  [BUGGY]  while(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
567	[BUG]  [BUGGY]  if(isBracketedParam)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam)  {  continue  null;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
568	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getParent();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getParent();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.getParent();	  JSDocToken    next    =    fileLevelJsDocBuilder.getNext();    	non-compiled	[CE]  	124	None	replace
569	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.getNext()  +  1;	  JSDocToken    next    =    fileLevelJsDocBuilder.getNext();    	non-compiled	[CE]  	124	None	replace
570	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  if(fileLevelJsDocBuilder!=    null)    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	164	None	replace
571	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	164	None	replace
572	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  if(fileLevelJsDocBuilder!=    null)    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	164	None	replace
573	[BUG]  [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
574	[BUG]  [BUGGY]  continue  retry(lineno  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1);	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
575	[BUG]  [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
576	[BUG]  [BUGGY]  continue  retry(lineno  +  1,  unreadToken)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  +  1,  unreadToken)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1,  unreadToken)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
577	[BUG]  [BUGGY]  continue  retry(lineno  +  1)||  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  +  1)||  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1)||  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
578	[BUG]  [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  2)  ==  '-';	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
579	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)  >>  '-';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)  >>  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  1)  >>  '-';	  fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	41	None	replace
580	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().endsWith(preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().endsWith(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().endsWith(preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	161	None	replace
581	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith(preserve  +  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	161	None	replace
582	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
583	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
584	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
585	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token,  parseAndRecordTypeNode(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token,  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token,  parseAndRecordTypeNode(token));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
586	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
587	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
588	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())!=  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length())!=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
589	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  >>  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  >>  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  >>  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
590	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
591	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length())!=  '/';  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length())!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno.length())!=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
592	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  '/';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
593	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
594	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1)!=  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
595	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-9!=  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-9!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-9!=  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
596	[BUG]  [BUGGY]  continue  retry  =  filelevelJsDocBuilder.length();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  filelevelJsDocBuilder.length();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  filelevelJsDocBuilder.length();	  continue    retry    =    fileLevelJsDocBuilder.length()    +    1;    	non-compiled	[CE]  	7	None	replace
597	[BUG]  [BUGGY]  continue  retry  =  fileLevelJAsDocBuilder.length();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJAsDocBuilder.length();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJAsDocBuilder.length();	  continue    retry    =    fileLevelJsDocBuilder.length()    +    1;    	non-compiled	[CE]  	7	None	replace
598	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
599	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
600	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
601	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
602	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	155	None	replace
603	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	155	None	replace
604	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno  +  1);	  fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	45	None	replace
605	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
606	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token)+  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token)+  1);	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
607	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	49	None	replace
608	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	49	None	replace
609	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('-');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append('-');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('-');	  continue    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	56	None	replace
610	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('[');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append('[');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('[');	  continue    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	56	None	replace
611	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	46	None	replace
612	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	46	None	replace
613	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	46	None	replace
614	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(typeString);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(typeString);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(typeString);	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
615	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  4);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  4);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  4);	  fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	65	None	replace
616	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)  ==  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length()  -  1)  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	2	None	replace
617	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length()  -  1)  ==  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length()  -  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno.length()  -  1)  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	2	None	replace
618	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(description);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(description);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(description);	  continue    retry    ||    fileLevelJsDocBuilder.append(description);    	non-compiled	[CE]  	23	None	replace
619	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	112	None	replace
620	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(parseAndRecordTypeNode(token));	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
621	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
622	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
623	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState(token);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.getState(token);	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
624	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.appendState(state);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.appendState(state);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.appendState(state);	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
625	[BUG]  [BUGGY]  continue  retry(lineno  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
626	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(charno));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(charno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(charno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));    	non-compiled	[CE]  	144	None	replace
627	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  3;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  3;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  *  3;	  continue    retry    =    fileLevelJsDocBuilder.length()    *    2;    	non-compiled	[CE]  	9	None	replace
628	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  2)!=  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  2)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  2)!=  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	78	None	replace
629	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  filelevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  filelevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  filelevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	162	None	replace
630	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());  }	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
631	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.trim());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.trim());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.trim());	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
632	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.length());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.length());	  continue    retry(fileLevelJsDocBuilder,    fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	114	None	replace
633	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "null ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( "null ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "null ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
634	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "[] ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( "[] ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "[] ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
635	[BUG]  [BUGGY]  parseAndRecordTypeNode(type);  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(type);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(type);  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
636	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(next());  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(next());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(next());  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    break;    	non-compiled	[CE]  	159	None	replace
637	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.next());  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.next());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.next());  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    break;    	non-compiled	[CE]  	159	None	replace
638	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	130	None	replace
639	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
640	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
641	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.trim());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.trim());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.trim());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
642	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(typeString.charAt(1));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(typeString.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(typeString.charAt(1));	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	134	None	replace
643	[BUG]  [BUGGY]  try  {  continue  retry;  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry;  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry;  fileLevelJsDocBuilder.length()  >  0;	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
644	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  0;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  0;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  0;  }	  try    {    continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	148	None	replace
645	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  this.fileLevelJsDocBuilder;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  this.fileLevelJsDocBuilder;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  this.fileLevelJsDocBuilder;  }	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
646	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue;  }	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
647	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
648	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	132	None	replace
649	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  -  2;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size()  -  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size()  -  2;	  continue    retry    =    fileLevelJsDocBuilder.size();    	non-compiled	[CE]  	12	None	replace
650	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	119	None	replace
651	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	119	None	replace
652	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	119	None	replace
653	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
654	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
655	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
656	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(typeString));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(typeString));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(typeString));	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
657	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
658	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)+  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)+  1);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
659	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-2);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-2);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-2);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
660	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	164	None	replace
661	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	164	None	replace
662	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.parseAndRecordTypeNode(token);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.parseAndRecordTypeNode(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.parseAndRecordTypeNode(token);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
663	[BUG]  [BUGGY]  JsDocToken  next  =  jsdocBuilder.parseAndRecordTypeNode(token);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  jsdocBuilder.parseAndRecordTypeNode(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  jsdocBuilder.parseAndRecordTypeNode(token);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
664	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.toString();	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
665	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(0)!=  '-';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(0)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(0)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
666	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token)!=  '-';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
667	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('n');  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
668	[BUG]  [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	165	None	replace
669	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	107	None	replace
670	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  ==  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder.length()  ==  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder.length()  ==  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	107	None	replace
671	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	3	None	replace
672	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type);  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(type);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(type);  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
673	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  parseAndRecordTypeNode(token)));  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  parseAndRecordTypeNode(token)));  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(  parseAndRecordTypeNode(token)));  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
674	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(unreadToken);  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(unreadToken);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(unreadToken);  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
675	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  ==  2;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  ==  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  ==  2;	  continue    retry    &&    fileLevelJsDocBuilder.length    ==    0;    	non-compiled	[CE]  	98	None	replace
676	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  return  true;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  return  true;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  return  true;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
677	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  return  true;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  return  true;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token)+  1);  return  true;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
678	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  false);  return  false;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  false);  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token),  false);  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
679	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  return  false;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
680	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  >=  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  >=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
681	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getFirstChild();  charno  =  stream.getCharno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  stream.getFirstChild();  charno  =  stream.getCharno();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  stream.getFirstChild();  charno  =  stream.getCharno();	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
682	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getJsDocToken();  charno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  stream.getJsDocToken();  charno  =  stream.getCharno();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  stream.getJsDocToken();  charno  =  stream.getCharno();	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
683	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNext();  charno  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  stream.getNext();  charno  =  stream.getCharno();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  stream.getNext();  charno  =  stream.getCharno();	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
684	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append('n');	  continue    retry(fileLevelJsDocBuilder.endsWith(preserve));    	non-compiled	[CE]  	15	None	replace
685	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(0));	  continue    retry(fileLevelJsDocBuilder.endsWith(preserve));    	non-compiled	[CE]  	15	None	replace
686	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
687	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
688	[BUG]  [BUGGY]  while(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(token!=  JsDocToken.FIELD_NAME)  {  continue  this;	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
689	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
690	[BUG]  [BUGGY]  while(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  while(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	while(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
691	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append('n');	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
692	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.createParent();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.createParent();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.createParent();	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
693	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append( "n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append( "n ");	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
694	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.startNext();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.startNext();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.startNext();	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	125	None	replace
695	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.append('n');	  JSDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	122	None	replace
696	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.end();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.end();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.end();	  JSDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	122	None	replace
697	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  8)!=  '-';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  8)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  8)!=  '-';	  fileLevelJsDocBuilder.append(lineno    +    1)!=    '-';    	non-compiled	[CE]  	86	None	replace
698	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  4)!=  '-';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  4)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  4)!=  '-';	  fileLevelJsDocBuilder.append(lineno    +    1)!=    '-';    	non-compiled	[CE]  	86	None	replace
699	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(''+  token);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(''+  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(''+  token);	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
700	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(''+  token);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(''+  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(''+  token);	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
701	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('  ',  token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append('  ',  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('  ',  token);	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
702	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  return  false;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
703	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type);  return  false;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(type);  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(type);  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
704	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type,  parseAndRecordTypeNode(token));  return  false;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(type,  parseAndRecordTypeNode(token));  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(type,  parseAndRecordTypeNode(token));  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
705	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.size();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.size();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.size();	  continue    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	55	None	replace
706	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())!=  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length())!=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	77	None	replace
707	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	77	None	replace
708	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  >>  'n';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  >>  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  >>  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	77	None	replace
709	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length())!=  'n';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(lineno.length())!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno.length())!=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	77	None	replace
710	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
711	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
712	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
713	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);	  continue    retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	82	None	replace
714	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
715	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
716	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
717	[BUG]  [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
718	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
719	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(next());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(next());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(next());	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	27	None	replace
720	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "no_unreachable ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( "no_unreachable ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "no_unreachable ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
721	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
722	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(':');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(':');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(':');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	62	None	replace
723	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(token);	  continue    retry    ||    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	101	None	replace
724	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
725	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry(lineno  +  1  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry(lineno  +  1  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry(lineno  +  1  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
726	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry(lineno  +  1);  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry(lineno  +  1);  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry(lineno  +  1);  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
727	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  fileLevelJsDocBuilder.length()  >  0;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  fileLevelJsDocBuilder.length()  >  0;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  fileLevelJsDocBuilder.length()  >  0;  }	  continue    retry;    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	149	None	replace
728	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	&&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
729	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
730	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverview);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	146	None	replace
731	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('  ');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('  ');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('  ');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	161	None	replace
732	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
733	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  continue  null;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
734	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  continue;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
735	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  continue;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  continue;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
736	[BUG]  [BUGGY]  if(isBracketedParam  ||  isVerticalRc)  {  continue  this;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam  ||  isVerticalRc)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam  ||  isVerticalRc)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
737	[BUG]  [BUGGY]  parseAndRecordTypeNode(token))  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token))  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token))  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
738	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n'  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n'  +  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n'  +  1;	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	106	None	replace
739	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  if(lineno    >=    lineno)    {    continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    }    	non-compiled	[CE]  	115	None	replace
740	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getParent());  break;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getParent());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getParent());  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    break;    	non-compiled	[CE]  	157	None	replace
741	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getNext());  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getNext());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getNext());  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    break;    	non-compiled	[CE]  	157	None	replace
742	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append('n');  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append('n');  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append('n');  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    break;    	non-compiled	[CE]  	157	None	replace
743	[BUG]  [BUGGY]  if(type!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
744	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
745	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  <=  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  <=  0;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
746	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  ==  0;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
747	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
748	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_TOKEN)  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_TOKEN)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_TOKEN)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
749	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.STRING)  {  continue  this;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.STRING)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.STRING)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
750	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.END_ARRAY)  {  continue  this;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.END_ARRAY)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.END_ARRAY)  {  continue  this;  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	117	None	replace
751	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	94	None	replace
752	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	94	None	replace
753	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	43	None	replace
754	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	43	None	replace
755	[BUG]  [BUGGY]  if(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam  &&  fileLevelJsDocBuilder!=  null)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
756	[BUG]  [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  ==  0)  {  continue  this;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  ==  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  ==  0)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
757	[BUG]  [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam  ||  fileLevelJsDocBuilder!=  null)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
758	[BUG]  [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
759	[BUG]  [BUGGY]  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	37	None	replace
760	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  null;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder  =  null;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder  =  null;	  continue    retry    &&    fileLevelJsDocBuilder    ==    null;    	non-compiled	[CE]  	33	None	replace
761	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	&&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	90	None	replace
762	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	138	None	replace
763	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(lineNumber);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(lineNumber);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(lineNumber);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverview);    	non-compiled	[CE]  	138	None	replace
764	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	93	None	replace
765	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  lineno));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  lineno));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  lineno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,    token));    	non-compiled	[CE]  	84	None	replace
766	[BUG]  [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	154	None	replace
767	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  token);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
768	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(typeString.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(typeString.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(typeString.charAt(0));	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
769	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(token).charAt(0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(token).charAt(0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(token).charAt(0);	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
770	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(token.toString());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(token.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(token.toString());	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	87	None	replace
771	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
772	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
773	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
774	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  }  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  }  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  }  '/';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	111	None	replace
775	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.length()  >  0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.length()  >  0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.length()  >  0);	  continue    retry    ||    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	72	None	replace
776	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	113	None	replace
777	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.toString();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.toString();	  continue    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	52	None	replace
778	[BUG]  [BUGGY]  if(type!=  null)  {  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	81	None	replace
779	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(line);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(line);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(line);	  continue    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	129	None	replace
780	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	109	None	replace
781	[BUG]  [BUGGY]  Continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  Continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	Continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    +    1)!=    0;    	non-compiled	[CE]  	95	None	replace
782	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  null;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  null;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  null;	  continue    retry    ||    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	32	None	replace
783	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.append(fileOverviewJSDocBuilder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	136	None	replace
784	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	76	None	replace
785	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(type);	  continue    retry    ||    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
786	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
787	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.reset();  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.reset();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.reset();  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
788	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
789	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());  break;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
790	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  '/';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	36	None	replace
791	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	36	None	replace
792	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(type);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.startsWith(type);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
793	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(precedence);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(precedence);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.startsWith(precedence);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
794	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
795	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(token)+  1);	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
796	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  type);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  type);	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
797	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  token));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
798	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  2));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  2));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  2));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token    +    1));    	non-compiled	[CE]  	83	None	replace
799	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  'n';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length()  -  1)!=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	75	None	replace
800	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	75	None	replace
801	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	6	None	replace
802	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(parseAndRecordTypeNode(token));	  fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	80	None	replace
803	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(token  + ") ");	  fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	80	None	replace
804	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	5	None	replace
805	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  token);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
806	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith( "n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith( "n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith( "n ");	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
807	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.indexOf('  ')+  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.indexOf('  ')+  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.indexOf('  ')+  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
808	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())!=  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(token.length())!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(token.length())!=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
809	[BUG]  [BUGGY]  if(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
810	[BUG]  [BUGGY]  if(isBracketedParam)  {  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam)  {  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam)  {  fileLevelJsDocBuilder.append(createJSTypeExpression(  token));  }	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
811	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
812	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  buffer);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  buffer);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  buffer);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	50	None	replace
813	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  parseAndRecordTypeNode(token)));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  parseAndRecordTypeNode(token)));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  parseAndRecordTypeNode(token)));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(type));    	non-compiled	[CE]  	105	None	replace
814	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  parseAndRecordTypeNode(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type,  parseAndRecordTypeNode(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(type));    	non-compiled	[CE]  	105	None	replace
815	[BUG]  [BUGGY]  return  token  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  token  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  token  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  return    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	153	None	replace
816	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
817	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	51	None	replace
818	[BUG]  [BUGGY]  try  {  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	154	None	replace
819	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  2;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  >=  2;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >=    0;    	non-compiled	[CE]  	71	None	replace
820	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  unreadToken);  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  unreadToken);  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  unreadToken);  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
821	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  break;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    break;    	non-compiled	[CE]  	26	None	replace
822	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString())!=  0;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString())!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString())!=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
823	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length());	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
824	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  +  1);	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	96	None	replace
825	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	66	None	replace
826	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	66	None	replace
827	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  else  {  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  else  {  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  else  {  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	66	None	replace
828	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	66	None	replace
829	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
830	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	133	None	replace
831	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  '/';  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  '/';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	40	None	replace
832	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineNumber  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineNumber  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineNumber  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.append(lineNumber);    	non-compiled	[CE]  	102	None	replace
833	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  stream.getCharno());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  stream.getCharno());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  stream.getCharno());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	47	None	replace
834	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	47	None	replace
835	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(type);	  continue    retry    ||    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
836	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(type);	  continue    retry    ||    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
837	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.endsWith(preserve  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve    +    1);    	non-compiled	[CE]  	17	None	replace
838	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.endsWith(preserve  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve    +    1);    	non-compiled	[CE]  	17	None	replace
839	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '0';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	4	None	replace
840	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	52	None	replace
841	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(fileLevelString);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(fileLevelString);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(fileLevelString);	  continue    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	52	None	replace
842	[BUG]  [BUGGY]  if(lineno  <  0)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  <  0)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  <  0)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
843	[BUG]  [BUGGY]  if(lineno  <  0)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  <  0)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  <  0)  {  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  JsDocToken    next    =    stream.getLineno();    charno    =    stream.getCharno();    	non-compiled	[CE]  	156	None	replace
844	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  *  2);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  *  2);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  *  2);	  fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	65	None	replace
845	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  null;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  null;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  null;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
846	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordValueNode(token));  return  false;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordValueNode(token));  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordValueNode(token));  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    true;    	non-compiled	[CE]  	29	None	replace
847	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >=  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	2	None	replace
848	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
849	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
850	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(lineno);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(lineno);	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	123	None	replace
851	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  continue  this;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder  ==  null)  {  continue  this;  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    	non-compiled	[CE]  	116	None	replace
852	[BUG]  [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
853	[BUG]  [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
854	[BUG]  [BUGGY]  try  {  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	137	None	replace
855	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith( "n "));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith( "n "));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.endsWith( "n "));	  continue    retry(fileLevelJsDocBuilder.endsWith(preserve));    	non-compiled	[CE]  	15	None	replace
856	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith( "/ "));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith( "/ "));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.endsWith( "/ "));	  continue    retry(fileLevelJsDocBuilder.endsWith(preserve));    	non-compiled	[CE]  	15	None	replace
857	[BUG]  [BUGGY]  continue  retry(lineno,  fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno,  fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno,  fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
858	[BUG]  [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
859	[BUG]  [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append('n');  }	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
860	[BUG]  [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
861	[BUG]  [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append('/');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append('/');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append('/');  }	  continue    retry(fileLevelJsDocBuilder,    parseAndRecordTypeNode(token));    	non-compiled	[CE]  	104	None	replace
862	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
863	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.startsWith(preserve);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.startsWith(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.startsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	16	None	replace
864	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "; ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( "; ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "; ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
865	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "/ ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append( "/ ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "/ ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	61	None	replace
866	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
867	[BUG]  [BUGGY]  if(isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	79	None	replace
868	[BUG]  [BUGGY]  if(lineno  >=  charno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  charno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  charno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  if(lineno    >=    lineno)    {    continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    }    	non-compiled	[CE]  	115	None	replace
869	[BUG]  [BUGGY]  if(lineno  ==  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  ==  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  ==  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  if(lineno    >=    lineno)    {    continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    }    	non-compiled	[CE]  	115	None	replace
870	[BUG]  [BUGGY]  if(lineno  >=  charno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  charno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  charno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  }	  if(lineno    >=    lineno)    {    continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    }    	non-compiled	[CE]  	115	None	replace
871	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)  ==  '/';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    '/';    	non-compiled	[CE]  	39	None	replace
872	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	155	None	replace
873	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(lineno,  fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(lineno,  fileLevelJsDocBuilder.charAt(0));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(lineno,  fileLevelJsDocBuilder.charAt(0));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	155	None	replace
874	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	112	None	replace
875	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	78	None	replace
876	[BUG]  [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    	non-compiled	[CE]  	24	None	replace
877	[BUG]  [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  else  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  else  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  else  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  }	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    	non-compiled	[CE]  	24	None	replace
878	[BUG]  [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append(type);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append(type);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  else  {  fileLevelJsDocBuilder.append(type);  }	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    	non-compiled	[CE]  	24	None	replace
879	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(charno,  token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(charno,  token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(charno,  token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,    token));    	non-compiled	[CE]  	84	None	replace
880	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >>  0;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >>  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  >>  0;	  continue    retry    =    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	11	None	replace
881	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	162	None	replace
882	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  0;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  >=  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    0;    	non-compiled	[CE]  	97	None	replace
883	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    +    1)!=    0;    	non-compiled	[CE]  	95	None	replace
884	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  >=  lineno)  {  continue;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  continue    retry;    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	139	None	replace
885	[BUG]  [BUGGY]  continue  ;  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  ;  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  ;  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry;    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	139	None	replace
886	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  3;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  3;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  <=  3;	  continue    retry    &&    fileLevelJsDocBuilder.length()    <=    0;    	non-compiled	[CE]  	73	None	replace
887	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  2;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  <=  2;	  continue    retry    &&    fileLevelJsDocBuilder.length()    <=    0;    	non-compiled	[CE]  	73	None	replace
888	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
889	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(fileOverview);	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
890	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(jsdocBuilder);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(jsdocBuilder);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(jsdocBuilder);	  continue    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	127	None	replace
891	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.STRING)  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.STRING)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.STRING)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
892	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.EXPR_RESULT)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
893	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.END_ARRAY)  {  continue  this;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.END_ARRAY)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.END_ARRAY)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    	non-compiled	[CE]  	118	None	replace
894	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	109	None	replace
895	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));    	non-compiled	[CE]  	49	None	replace
896	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  1;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  *  1;	  continue    retry    =    fileLevelJsDocBuilder.length()    -    1;    	non-compiled	[CE]  	8	None	replace
897	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	5	None	replace
898	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.length()!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()!=    0;    	non-compiled	[CE]  	70	None	replace
899	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
900	[BUG]  [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  stream);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token,  stream);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  parseAndRecordTypeNode(token,  stream);	  JsDocToken    next    =    parseAndRecordTypeNode(token);    	non-compiled	[CE]  	28	None	replace
901	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	142	None	replace
902	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  break;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.getParent();    break;    	non-compiled	[CE]  	157	None	replace
903	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  parseAndRecordTypeNode(token));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
904	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  unreadToken));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  unreadToken));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  unreadToken));	  return    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	143	None	replace
905	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	161	None	replace
906	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().endsWith( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().endsWith( "n ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().endsWith( "n ");	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	161	None	replace
907	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.trim();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.trim();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.trim();	  JSDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	122	None	replace
908	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  JSDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	122	None	replace
909	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.toString();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.toString();	  JSDocToken    next    =    fileLevelJsDocBuilder.getNext();    	non-compiled	[CE]  	124	None	replace
910	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getCurrentToken();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getCurrentToken();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.getCurrentToken();	  JSDocToken    next    =    fileLevelJsDocBuilder.getNext();    	non-compiled	[CE]  	124	None	replace
911	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.trim();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.trim();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.trim();	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	27	None	replace
912	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	27	None	replace
913	[BUG]  [BUGGY]  if(isBracketedParam  ||  matchingRc)  {  continue  this;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam  ||  matchingRc)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam  ||  matchingRc)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
914	[BUG]  [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam  ||  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam  ||  fileLevelJsDocBuilder.length()  >  0)  {  continue  this;  }	  if(isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	60	None	replace
915	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString())!=  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString())!=  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString())!=  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
916	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())+  '/';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())+  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())+  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
917	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  +  1).append('/');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  +  1).append('/');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  +  1).append('/');	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    '/';    	non-compiled	[CE]  	38	None	replace
918	[BUG]  [BUGGY]  if(token!=  JsDocToken.STRING)  {  continue;  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.STRING)  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.STRING)  {  continue;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
919	[BUG]  [BUGGY]  if(lineno  ==  stream.getLineno())  {  continue;  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  ==  stream.getLineno())  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  ==  stream.getLineno())  {  continue;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
920	[BUG]  [BUGGY]  if(token  ==  JsDocToken.STRING)  {  continue;  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.STRING)  {  continue;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.STRING)  {  continue;  }	  continue    null;    	non-compiled	[CE]  	59	None	replace
921	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	136	None	replace
922	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  '/';  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
923	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  '/';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
924	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  '/';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
925	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-  '/';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-  '/';	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	110	None	replace
926	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(charno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append(charno);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(charno);	  continue    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	57	None	replace
927	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  break;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  break;	  State    state    =    fileLevelJsDocBuilder.getState();    break;    	non-compiled	[CE]  	158	None	replace
928	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token,  unreadToken));  return  true;  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token,  unreadToken));  return  true;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token,  unreadToken));  return  true;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
929	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  unreadToken);  return  false;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  unreadToken);  return  false;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  unreadToken);  return  false;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
930	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  return  true;  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  return  true;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token  + "));  return  true;	  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    return    false;    	non-compiled	[CE]  	30	None	replace
931	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  fileLevelJsDocBuilder.append(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(token);	  continue    retry    ||    fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	101	None	replace
932	[BUG]  [BUGGY]  charno  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  charno  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	charno  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	6	None	replace
933	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	119	None	replace
934	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.END_ARRAY)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.END_ARRAY)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.END_ARRAY)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token    ==    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	119	None	replace
935	[BUG]  [BUGGY]  if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
936	[BUG]  [BUGGY]  if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
937	[BUG]  [BUGGY]  if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  <  0)  {  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  }  else  {  fileLevelJsDocBuilder.append('n');  }	  continue    retry    ||    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	21	None	replace
938	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.length();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.length();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.length();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	89	None	replace
939	[BUG]  [BUGGY]  if(isBracketedParam)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(isBracketedParam)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
940	[BUG]  [BUGGY]  if(type  ==  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
941	[BUG]  [BUGGY]  if(type!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
942	[BUG]  [BUGGY]  if(token!=  JsDocToken.STRING)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.STRING)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.STRING)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	140	None	replace
943	[BUG]  [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()!=  0)  {  continue  this;  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()!=  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()!=  0)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
944	[BUG]  [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  >=  0)  {  continue  this;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  >=  0)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam  ||  fileLevelJsDocBuilder.length()  >=  0)  {  continue  this;  }	  if(!isBracketedParam)    {    continue    this;    }    	non-compiled	[CE]  	64	None	replace
945	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token),  type);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token),  type);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token),  type);	  continue    retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	82	None	replace
946	[BUG]  [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	165	None	replace
947	[BUG]  [BUGGY]  try  {  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  try    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	165	None	replace
948	[BUG]  [BUGGY]  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	92	None	replace
949	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  >=  '-';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  >=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  >=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	42	None	replace
950	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder.getCharno());  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder.getCharno());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  fileLevelJsDocBuilder.getCharno());  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
951	[BUG]  [BUGGY]  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder.length());  break;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  parseAndRecordTypeNode(token,  fileLevelJsDocBuilder.length());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token,  fileLevelJsDocBuilder.length());  break;	  parseAndRecordTypeNode(token);    break;    	non-compiled	[CE]  	160	None	replace
952	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  2!=  0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  2!=  0);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  2!=  0);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
953	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())-  1);	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0);    	non-compiled	[CE]  	131	None	replace
954	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  stream);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  stream);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token),  stream);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	103	None	replace
955	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);	  try    {    continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	113	None	replace
956	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue;  fileLevelJsDocBuilder.length()  >  0;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue;  fileLevelJsDocBuilder.length()  >  0;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue;  fileLevelJsDocBuilder.length()  >  0;  }	  continue    retry;    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	149	None	replace
957	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	94	None	replace
958	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length())!=  0;	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	94	None	replace
959	[BUG]  [BUGGY]  if(type  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
960	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
961	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
962	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  continue  this;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  continue  this;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  continue  this;  }	  if(token!=    JsDocToken.FIELD_NAME)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	120	None	replace
963	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  'n';  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
964	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  'n';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())%  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
965	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
966	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())&  'n';	  continue    retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	108	None	replace
967	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length!=  2;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length!=  2;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length!=  2;	  continue    retry    &&    fileLevelJsDocBuilder.length!=    0;    	non-compiled	[CE]  	99	None	replace
968	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	90	None	replace
969	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().toLowerCase();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().toLowerCase();  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim().toLowerCase();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.startsWith(preserve);    	non-compiled	[CE]  	163	None	replace
970	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  '/';  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  '/';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  >>  '/';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	36	None	replace
971	[BUG]  [BUGGY]  if(type!=  null)  {  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(type!=  null)  {  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(type!=  null)  {  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  }	  fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	80	None	replace
972	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  ==  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder.length()  ==  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder.length()  ==  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	1	None	replace
973	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	91	None	replace
974	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  break;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    break;    	non-compiled	[CE]  	159	None	replace
975	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.trim();  break;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.trim();  break;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.trim();  break;	  JsDocToken    next    =    fileLevelJsDocBuilder.next();    break;    	non-compiled	[CE]  	159	None	replace
976	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }	  continue    retry    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	13	None	replace
977	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);	  continue    retry    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	13	None	replace
978	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  continue    retry    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	13	None	replace
979	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }	  continue    retry    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	13	None	replace
980	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append('/');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append('/');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  }  else  {  fileLevelJsDocBuilder.append('/');  }	  continue    retry    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	13	None	replace
981	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  unreadToken));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  unreadToken));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  unreadToken));	  ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	81	None	replace
982	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
983	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));	  ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	48	None	replace
984	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(',');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(',');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(',');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	62	None	replace
985	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	46	None	replace
986	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	93	None	replace
987	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
988	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
989	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
990	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
991	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( " ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( " ");  }	  continue    retry    &&    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	18	None	replace
992	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  3)  ==  '-';  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  3)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  3)  ==  '-';	  fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	45	None	replace
993	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	88	None	replace
994	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	88	None	replace
995	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno,  next());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno,  next());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno,  next());	  fileLevelJsDocBuilder.append(next());    	non-compiled	[CE]  	63	None	replace
996	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('/');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append('/');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('/');	  continue    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	56	None	replace
997	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
998	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append('n');  }	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
999	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
1000	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append( " ");  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry(fileLevelJsDocBuilder.append(preserve));  }  else  {  fileLevelJsDocBuilder.append( " ");  }	  continue    retry(fileLevelJsDocBuilder.append(preserve));    	non-compiled	[CE]  	20	None	replace
1001	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder  ==  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(fileLevelJsDocBuilder!=    null)    {    continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  	164	None	replace
1002	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  -  1)!=  '-';  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  -  1)!=  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  -  1)!=  '-';	  fileLevelJsDocBuilder.append(lineno    +    1)!=    '-';    	non-compiled	[CE]  	86	None	replace
1003	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  3);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  3);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  3);	  fileLevelJsDocBuilder.append(lineno    +    1)!=    '-';    	non-compiled	[CE]  	86	None	replace
1004	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "; ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( "; ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "; ");	  continue    fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  	58	None	replace
1005	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	35	None	replace
1006	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    0;    	non-compiled	[CE]  	132	None	replace
1007	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
1008	[BUG]  [BUGGY]  Annotation  annotation  =  parseAndRecordTypeNode(token);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  Annotation  annotation  =  parseAndRecordTypeNode(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	Annotation  annotation  =  parseAndRecordTypeNode(token);	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
1009	[BUG]  [BUGGY]  Annotation  stream  =  parseAndRecordTypeNode(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  Annotation  stream  =  parseAndRecordTypeNode(token);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	Annotation  stream  =  parseAndRecordTypeNode(token);	  if(isBracketedParam)    {    continue    this;    }    else    {    fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));    }    	non-compiled	[CE]  	141	None	replace
1010	[BUG]  [BUGGY]  charno  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  charno  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	charno  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	43	None	replace
1011	[BUG]  [BUGGY]  Continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  Continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	Continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)    ==    '-';    	non-compiled	[CE]  	43	None	replace
1012	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append('n');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append('n');  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.append('n');	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
1013	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >  0;	  continue    this.fileLevelJsDocBuilder;    	non-compiled	[CE]  	53	None	replace
1014	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
1015	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	135	None	replace
1016	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(0)!=  '-';  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(0)!=  '-';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(0)!=  '-';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(0)!=    '-';    	non-compiled	[CE]  	145	None	replace
1017	[BUG]  [BUGGY]  continue  retry(lineno  +  1,  lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry(lineno  +  1,  lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1,  lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry(lineno    +    1)&&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	44	None	replace
1018	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  }	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	76	None	replace
1019	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }	  continue    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	152	None	replace
1020	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  else  {  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  else  {  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  }  else  {  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  }	  continue    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	152	None	replace
1021	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder!=  null;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder!=  null;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder!=  null;	  continue    retry    &&    fileLevelJsDocBuilder    ==    null;    	non-compiled	[CE]  	33	None	replace
1022	[BUG]  [BUGGY]  retry  &&  fileLevelJsDocBuilder!=  null;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  retry  &&  fileLevelJsDocBuilder!=  null;  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	retry  &&  fileLevelJsDocBuilder!=  null;	  continue    retry    &&    fileLevelJsDocBuilder    ==    null;    	non-compiled	[CE]  	33	None	replace
1023	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	87	None	replace
1024	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());	  continue    retry    &&    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	87	None	replace
1025	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	3	None	replace
1026	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())+  'n';  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())+  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.setLength(fileLevelJsDocBuilder.length())+  'n';	  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=    'n';    	non-compiled	[CE]  	77	None	replace
1027	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('  ',  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append('  ',  1);  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('  ',  1);	  continue    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	128	None	replace
1028	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "/ ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  continue  fileLevelJsDocBuilder.append( "/ ");  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "/ ");	  continue    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	54	None	replace
1029	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry;  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	107	None	replace
1030	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;      [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]        case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())    ==    'n';    	non-compiled	[CE]  	107	None	replace
