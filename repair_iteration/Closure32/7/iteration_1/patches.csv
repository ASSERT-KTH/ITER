bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  +  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  +  1;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  +  1;	  continue    retry    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  -  1;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  -  1;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  -  1;	  continue    retry    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  2;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  *  2;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  *  2;	  continue    retry    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  +  2;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  +  2;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  +  2;	  continue    retry    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.length()  >  0;	  continue    retry    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  =  fileLevelJsDocBuilder.size();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  =  fileLevelJsDocBuilder.size();	  continue    retry    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.endsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  fileLevelJsDocBuilder.endsWith(preserve);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.endsWith(preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.endsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve));  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.endsWith(preserve));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.endsWith(preserve));	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.startsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.endsWith(preserve  +  1);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.endsWith(preserve  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(preserve));  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(preserve));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(preserve));	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineno);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(lineno);	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(type);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(type);	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(description);  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(description);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(description);	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));	      	non-compiled	[CE]  	8	None	replace
25	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getNext();	      	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  break;  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  break;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  break;	      	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.next();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.next();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.next();	      	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token);  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  parseAndRecordTypeNode(token);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  parseAndRecordTypeNode(token);	      	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  true;	      	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  [CE]  [FE]                                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  return  false;	      	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;	  continue    retry    &&    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	17	None	replace
32	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder!=  null;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder!=  null;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder!=  null;	  continue    retry    &&    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	17	None	replace
33	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder  ==  null;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder  ==  null;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder  ==  null;	  continue    retry    &&    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	17	None	replace
34	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  0;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  ==  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  ==  0;	  continue    retry    &&    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	17	None	replace
35	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
36	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
37	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
38	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
39	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
40	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
41	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	6	None	replace
42	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	6	None	replace
43	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(lineno  +  1)&&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(lineno  +  1)  ==  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
49	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.toString();  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.toString();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.toString();	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  continue  this.fileLevelJsDocBuilder;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  this.fileLevelJsDocBuilder;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  this.fileLevelJsDocBuilder;	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append( "n ");  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( "n ");	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.length();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.length();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.length();	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
56	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append('n');  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('n');	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
57	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append(lineno);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(lineno);	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
58	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append( ", ");  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append( ", ");  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append( ", ");	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  continue  null;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  null;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  null;	  continue    this;    	non-compiled	[CE]  	15	None	replace
60	[BUG]  [BUGGY]  if(isBracketedParam)  {  continue  this;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(isBracketedParam)  {  continue  this;  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam)  {  continue  this;  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
61	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append( "n ");  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append( "n ");	  continue    this;    	non-compiled	[CE]  	15	None	replace
62	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n');  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append('n');  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append('n');	  continue    this;    	non-compiled	[CE]  	15	None	replace
63	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(next());  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(next());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(next());	  continue    this;    	non-compiled	[CE]  	15	None	replace
64	[BUG]  [BUGGY]  if(!isBracketedParam)  {  continue  this;  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(!isBracketedParam)  {  continue  this;  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(!isBracketedParam)  {  continue  this;  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
65	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(lineno);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno);	  continue    this;    	non-compiled	[CE]  	15	None	replace
66	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
67	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
68	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(token);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(token);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()!=  0;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()!=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
71	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  0;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  >=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
72	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.length()  >  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
73	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  0;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  <=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  <=  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
74	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >  1;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length()  >  1;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length()  >  1;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
75	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	10	None	replace
76	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	10	None	replace
77	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	10	None	replace
78	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	10	None	replace
79	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
80	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
81	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
82	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
83	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(token  +  1));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
84	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno,  token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
85	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  2)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	16	None	replace
86	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)!=  '-';  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(lineno  +  1)!=  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(lineno  +  1)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	16	None	replace
87	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
88	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
92	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
93	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
94	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
95	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
96	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
97	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
98	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  ==  0;  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length  ==  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length  ==  0;	  continue    retry    &&    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	17	None	replace
99	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length!=  0;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.length!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.length!=  0;	  continue    retry    &&    fileLevelJsDocBuilder!=    null;    	non-compiled	[CE]  	17	None	replace
100	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
101	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(token);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(token);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(token);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
102	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineNumber);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(lineNumber);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(lineNumber);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
103	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
104	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  parseAndRecordTypeNode(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
105	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
106	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
107	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())  ==  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)    ==    'n';    	non-compiled	[CE]  	11	None	replace
108	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	10	None	replace
109	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  'n';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    'n';    	non-compiled	[CE]  	10	None	replace
110	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
111	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
112	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  '/';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    '/';    	non-compiled	[CE]  	14	None	replace
113	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
114	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder,  fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
115	[BUG]  [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(lineno  >=  lineno)  {  continue  retry  &&  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  }	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	16	None	replace
116	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  this;  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  this;  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
117	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
118	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
119	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
120	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
121	[BUG]  [BUGGY]  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.length()  >  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
122	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.next();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.next();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.next();	      	non-compiled	[CE]  	8	None	replace
123	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.getState();	      	non-compiled	[CE]  	8	None	replace
124	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getNext();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilder.getNext();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JSDocToken  next  =  fileLevelJsDocBuilder.getNext();	      	non-compiled	[CE]  	8	None	replace
125	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getParent();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getParent();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getParent();	      	non-compiled	[CE]  	8	None	replace
126	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext();  break;  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getNext();  break;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getNext();  break;	      	non-compiled	[CE]  	8	None	replace
127	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
128	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append('  ');  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append('  ');  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append('  ');	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
129	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(token);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append(token);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(token);	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
130	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)  ==  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
131	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)!=  0);	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
132	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())!=  0;	  continue    retry    ||    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1)!=    0;    	non-compiled	[CE]  	12	None	replace
133	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
134	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
135	[BUG]  [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry(fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
136	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
137	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
138	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverview);	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	5	None	replace
139	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.charAt(lineno  +  1)!=  '-';	  continue    retry    ||    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	6	None	replace
140	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
141	[BUG]  [BUGGY]  if(isBracketedParam)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(isBracketedParam)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(isBracketedParam)  {  continue  this;  }  else  {  fileLevelJsDocBuilder.append(parseAndRecordTypeNode(token));  }	  continue    this;    	non-compiled	[CE]  	15	None	replace
142	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
143	[BUG]  [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  return  fileLevelJsDocBuilder.append(createJSTypeExpression(token));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  fileLevelJsDocBuilder.append(createJSTypeExpression(token));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
144	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(createJSTypeExpression(lineno));	  continue    retry    ||    fileLevelJsDocBuilder.append(createJSTypeExpression(token));    	non-compiled	[CE]  	3	None	replace
145	[BUG]  [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(0)!=  '-';  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  &&  fileLevelJsDocBuilder.charAt(0)!=  '-';  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  &&  fileLevelJsDocBuilder.charAt(0)!=  '-';	  continue    retry    &&    fileLevelJsDocBuilder.charAt(lineno    +    1)!=    '-';    	non-compiled	[CE]  	16	None	replace
146	[BUG]  [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry  ||  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry  ||  fileLevelJsDocBuilder.append(fileOverview);	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
147	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	fileLevelJsDocBuilder.append(fileOverview);	  continue    retry    ||    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	7	None	replace
148	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.length()  >  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
149	[BUG]  [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  retry;  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  retry;  fileLevelJsDocBuilder.length()  >  0;	  continue    retry    &&    fileLevelJsDocBuilder.length()    >    0;    	non-compiled	[CE]  	18	None	replace
150	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  -  1;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder  -  1;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  -  1;	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
151	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >  0;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >  0;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder  &&  fileLevelJsDocBuilder.length()  >  0;	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
152	[BUG]  [BUGGY]  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	continue  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  continue    fileLevelJsDocBuilder;    	non-compiled	[CE]  	9	None	replace
153	[BUG]  [BUGGY]  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	return  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
154	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
155	[BUG]  [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  &&  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	2	None	replace
156	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  stream.getLineno();  charno  =  stream.getCharno();	      	non-compiled	[CE]  	8	None	replace
157	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getParent();  break;  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.getParent();  break;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.getParent();  break;	      	non-compiled	[CE]  	8	None	replace
158	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  break;  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  break;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	State  state  =  fileLevelJsDocBuilder.getState();  break;	      	non-compiled	[CE]  	8	None	replace
159	[BUG]  [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.next();  break;  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  JsDocToken  next  =  fileLevelJsDocBuilder.next();  break;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	JsDocToken  next  =  fileLevelJsDocBuilder.next();  break;	      	non-compiled	[CE]  	8	None	replace
160	[BUG]  [BUGGY]  parseAndRecordTypeNode(token);  break;  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  parseAndRecordTypeNode(token);  break;  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	parseAndRecordTypeNode(token);  break;	      	non-compiled	[CE]  	8	None	replace
161	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith(preserve);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith(preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.endsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
162	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
163	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(preserve);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(preserve);  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.startsWith(preserve);	  continue    retry    ||    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  	4	None	replace
164	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	if(fileLevelJsDocBuilder!=  null)  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
165	[BUG]  [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;    [BUGGY]  try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  parseAndRecordTypeNode(token));  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	361	361	4	replace	try  {  continue  retry  ||  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  continue    retry    ||    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	1	None	replace
