bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(line  ==  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
2	[BUG]  [BUGGY]  if(line!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
3	[BUG]  [BUGGY]  if(line  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
4	[BUG]  [BUGGY]  if(token!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
5	[BUG]  [BUGGY]  if(line  >=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
6	[BUG]  [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NOT_FOUND))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NOT_FOUND))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NOT_FOUND))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
7	[BUG]  [BUGGY]  if(line!=  null  &&  line  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line  ==  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	26	None	replace
8	[BUG]  [BUGGY]  if(line  ==  null  &&  line  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line  ==  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	26	None	replace
9	[BUG]  [BUGGY]  if(line  ==  null  ||  line  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line  ==  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	26	None	replace
10	[BUG]  [BUGGY]  if(line  ==  null  &&  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line!=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	26	None	replace
11	[BUG]  [BUGGY]  if(line  ==  null  ||  line  ==  whitespaceOption.PRESERVE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line  ==  whitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line  ==  whitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	26	None	replace
12	[BUG]  [BUGGY]  if(line!=  null  ||  line!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
13	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
14	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
15	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
16	[BUG]  [BUGGY]  if(line  ==  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
17	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
18	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
19	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
20	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
21	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
22	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
23	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_EMPTY)  {	  if(line!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	56	None	replace
24	[BUG]  [BUGGY]  if(line!=  null  ||  line!=  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line!=  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line!=  JsDocToken.VALUE_EMPTY)  {	  if(line!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	56	None	replace
25	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_EMPTY)  {	  if(line!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	56	None	replace
26	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_STRING)  {	  if(line!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	56	None	replace
27	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(''+  token);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(''+  token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(''+  token);	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	50	None	replace
28	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ',  token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append('  ',  token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append('  ',  token);	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	50	None	replace
29	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ').append(token);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append('  ').append(token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append('  ').append(token);	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	50	None	replace
30	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "  - ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( "  - ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( "  - ");	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	50	None	replace
31	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(line);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(line);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(line);	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	52	None	replace
32	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token).append('  ');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(token).append('  ');  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(token).append('  ');	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	52	None	replace
33	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token  +  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(token  +  1);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(token  +  1);	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	52	None	replace
34	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token).append('n');  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(token).append('n');  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(token).append('n');	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	52	None	replace
35	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append('n');  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append('n');	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	52	None	replace
36	[BUG]  [BUGGY]  For(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( ", ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  For(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( ", ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	For(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( ", ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	31	None	replace
37	[BUG]  [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(',');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(',');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(',');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	31	None	replace
38	[BUG]  [BUGGY]  Builder.append(tokens.iterator().next());  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  Builder.append(tokens.iterator().next());  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	Builder.append(tokens.iterator().next());	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	31	None	replace
39	[BUG]  [BUGGY]  For(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  For(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	For(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
40	[BUG]  [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( "] ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( "] ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( "] ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
41	[BUG]  [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append('[');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append('[');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append('[');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
42	[BUG]  [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().getNext())  {  builder.append(']');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().getNext())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  for(JSDocToken  line  :  tokens.iterator().getNext())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
43	[BUG]  [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
44	[BUG]  [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
45	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  '0')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
46	[BUG]  [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  '0')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line.charAt(line.length())!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
47	[BUG]  [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
48	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  '0')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length())!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
49	[BUG]  [BUGGY]  if(line  ==  WhitespaceOption.PRESERVE  &&  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  WhitespaceOption.PRESERVE  &&  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  WhitespaceOption.PRESERVE  &&  line!=  WhitespaceOption.PRESERVE)  {	  if(line    ==    WhitespaceOption.PRESERVE    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	66	None	replace
50	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.PRESERVE  ||  line  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.PRESERVE  ||  line  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.PRESERVE  ||  line  ==  WhitespaceOption.PRESERVE)  {	  if(line    ==    WhitespaceOption.PRESERVE    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	66	None	replace
51	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {	  if(line    ==    WhitespaceOption.PRESERVE    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	66	None	replace
52	[BUG]  [BUGGY]  if(line  ==  whitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  whitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  whitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {	  if(line    ==    WhitespaceOption.PRESERVE    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	66	None	replace
53	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {	  if(token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_NULL)  {	  if(token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	5	None	replace
55	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	36	None	replace
56	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	36	None	replace
57	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	69	None	replace
58	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {	  if(token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	69	None	replace
59	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_OBJECT)  {	  if(token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	69	None	replace
60	[BUG]  [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
61	[BUG]  [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
62	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  'n')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
63	[BUG]  [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  'n')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line.charAt(line.length())!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
64	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  'n')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length())!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
65	[BUG]  [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
66	[BUG]  [BUGGY]  if(line!=  null  ||  line!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line!=  JsDocToken.VALUE_STRING)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
67	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  ||  line  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  ||  line  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_STRING  ||  line  ==  JsDocToken.FIELD_NAME)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
68	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING  ||  line!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING  ||  line!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_STRING  ||  line!=  JsDocToken.FIELD_NAME)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
69	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  ||  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  ||  token!=  null)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
70	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  null)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
71	[BUG]  [BUGGY]  if(token  ==  null  ||  line!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  ||  line!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  ||  line!=  null)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
72	[BUG]  [BUGGY]  if(line  ==  null  ||  token!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token!=  JsDocToken.VALUE_NULL)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  if(line  ==  null  ||  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token!=  JsDocToken.FIELD_NAME)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
74	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
75	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
76	[BUG]  [BUGGY]  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
77	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
78	[BUG]  [BUGGY]  if(line!=  null)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
79	[BUG]  [BUGGY]  if(line  ==  null)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
80	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  whitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  whitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  whitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	23	None	replace
81	[BUG]  [BUGGY]  if(line!=  null  ||  line!=  whitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line!=  whitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line!=  whitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	23	None	replace
82	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	64	None	replace
83	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	64	None	replace
84	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	64	None	replace
85	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	64	None	replace
86	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	64	None	replace
87	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
88	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
89	[BUG]  [BUGGY]  if(line!=  null)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
90	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
91	[BUG]  [BUGGY]  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
92	[BUG]  [BUGGY]  if(line  ==  null)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
93	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
94	[BUG]  [BUGGY]  if(ignoreStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoreStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoreStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
95	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
96	[BUG]  [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
97	[BUG]  [BUGGY]  if(ignoreStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoreStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoreStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
98	[BUG]  [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
99	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
100	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
101	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
102	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
103	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
104	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
105	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_OBJECT)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
106	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
107	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_LINE  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
108	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
109	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
110	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
111	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_LINE  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_LINE  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_LINE  ||  token  ==  JsDocToken.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
112	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.PRESERVE  ||  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  WhitespaceOption.PRESERVE  ||  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  WhitespaceOption.PRESERVE  ||  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	12	None	replace
113	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	12	None	replace
114	[BUG]  [BUGGY]  if(line  ==  null  ||  token  ==  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  ==  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  ==  null)  {	  if(line!=    null    ||    token    ==    null)    {    	non-compiled	[CE]  	8	None	replace
115	[BUG]  [BUGGY]  if(line!=  null  &&  token  ==  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token  ==  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token  ==  null)  {	  if(line!=    null    ||    token    ==    null)    {    	non-compiled	[CE]  	8	None	replace
116	[BUG]  [BUGGY]  if(token!=  null  ||  token  ==  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  ||  token  ==  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  ||  token  ==  null)  {	  if(line!=    null    ||    token    ==    null)    {    	non-compiled	[CE]  	8	None	replace
117	[BUG]  [BUGGY]  if(line  ==  null  &&  token  ==  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token  ==  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token  ==  null)  {	  if(line!=    null    ||    token    ==    null)    {    	non-compiled	[CE]  	8	None	replace
118	[BUG]  [BUGGY]  if(line  ==  null  ||  token!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token!=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	22	None	replace
119	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	22	None	replace
120	[BUG]  [BUGGY]  if(line!=  null  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	22	None	replace
121	[BUG]  [BUGGY]  if(line  ==  null  ||  token!=  whitespaceOption.PRESERVE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token!=  whitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token!=  whitespaceOption.PRESERVE)  {	  if(line!=    null    ||    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	22	None	replace
122	[BUG]  [BUGGY]  if(token!=  null  ||  token!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  ||  token!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  ||  token!=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	22	None	replace
123	[BUG]  [BUGGY]  if(line!=  null  ||  line!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line!=  WhitespaceOption.SINGLE_LINE)  {	  if(line!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	41	None	replace
124	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  WhitespaceOption.SINGLE_LINE)  {	  if(line!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	41	None	replace
125	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(line!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	41	None	replace
126	[BUG]  [BUGGY]  if(line!=  null  ||  line  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line  ==  WhitespaceOption.SINGLE_LINE)  {	  if(line!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	41	None	replace
127	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(line!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	41	None	replace
128	[BUG]  [BUGGY]  if(line  ==  null  &&  line.length()  >  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line.length()  >  0)  {	  if(line!=    null    &&    line.length()    >    0)    {    	non-compiled	[CE]  	83	None	replace
129	[BUG]  [BUGGY]  if(line!=  null  ||  line.length()  >  0)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line.length()  >  0)  {	  if(line!=    null    &&    line.length()    >    0)    {    	non-compiled	[CE]  	83	None	replace
130	[BUG]  [BUGGY]  if(line!=  null  &&  line.length()  ==  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line.length()  ==  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line.length()  ==  0)  {	  if(line!=    null    &&    line.length()    >    0)    {    	non-compiled	[CE]  	83	None	replace
131	[BUG]  [BUGGY]  if(line!=  null  &&  line.length()  <=  0)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line.length()  <=  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line.length()  <=  0)  {	  if(line!=    null    &&    line.length()    >    0)    {    	non-compiled	[CE]  	83	None	replace
132	[BUG]  [BUGGY]  if(line  ==  null  ||  line.length()  >  0)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.length()  >  0)  {	  if(line!=    null    &&    line.length()    >    0)    {    	non-compiled	[CE]  	83	None	replace
133	[BUG]  [BUGGY]  if(line!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token.length()  >  0)  {	  if(line!=    null    &&    line.length()    >    0)    {    	non-compiled	[CE]  	83	None	replace
134	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  JsDocToken.VALUE_NULL)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	82	None	replace
135	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	82	None	replace
136	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  JsDocToken.VALUE_NULL)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	82	None	replace
137	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_NUMBER_INT)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	82	None	replace
138	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	82	None	replace
139	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT)  {	  if(token!=    NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	60	None	replace
140	[BUG]  [BUGGY]  if(unreadToken!=  NO_UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(unreadToken!=  NO_UNREAD_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(unreadToken!=  NO_UNREAD_TOKEN)  {	  if(token!=    NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	60	None	replace
141	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
142	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
143	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
144	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
145	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
146	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
147	[BUG]  [BUGGY]  if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)    ==    'r')    {    	non-compiled	[CE]  	89	None	replace
148	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)    ==    'r')    {    	non-compiled	[CE]  	89	None	replace
149	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())  ==  'r')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())  ==  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())  ==  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)    ==    'r')    {    	non-compiled	[CE]  	89	None	replace
150	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)  ==  'r')  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)  ==  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)  ==  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)    ==    'r')    {    	non-compiled	[CE]  	89	None	replace
151	[BUG]  [BUGGY]  if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)    ==    'r')    {    	non-compiled	[CE]  	89	None	replace
152	[BUG]  [BUGGY]  if(line!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)    ==    'r')    {    	non-compiled	[CE]  	89	None	replace
153	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_ARRAY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_ARRAY)    {    	non-compiled	[CE]  	74	None	replace
154	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_ARRAY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.START_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_ARRAY)    {    	non-compiled	[CE]  	74	None	replace
155	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_ARRAY)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_ARRAY)    {    	non-compiled	[CE]  	74	None	replace
156	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_ARRAY)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_ARRAY)    {    	non-compiled	[CE]  	74	None	replace
157	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_ARRAY  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_ARRAY  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_ARRAY  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_ARRAY)    {    	non-compiled	[CE]  	74	None	replace
158	[BUG]  [BUGGY]  if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'r')    {    	non-compiled	[CE]  	86	None	replace
159	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())!=  'r')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())!=  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())!=  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'r')    {    	non-compiled	[CE]  	86	None	replace
160	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)!=  'r')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)!=  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)!=  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'r')    {    	non-compiled	[CE]  	86	None	replace
161	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'r')    {    	non-compiled	[CE]  	86	None	replace
162	[BUG]  [BUGGY]  if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'r')    {    	non-compiled	[CE]  	86	None	replace
163	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(1)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(1)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(1)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'r')    {    	non-compiled	[CE]  	86	None	replace
164	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMPTY)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	37	None	replace
165	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_EMPTY)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	37	None	replace
166	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMPTY  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMPTY  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMPTY  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	37	None	replace
167	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMPTY  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	37	None	replace
168	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	37	None	replace
169	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	37	None	replace
170	[BUG]  [BUGGY]  if(token!=  JsDocToken.PRESERVE  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.PRESERVE  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.PRESERVE  ||  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    token    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	92	None	replace
171	[BUG]  [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    token    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	92	None	replace
172	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    token    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	92	None	replace
173	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    token    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	92	None	replace
174	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    token    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	92	None	replace
175	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
176	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
177	[BUG]  [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
178	[BUG]  [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
179	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
180	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
181	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
182	[BUG]  [BUGGY]  if(token  ==  JsDocToken.PRESERVE  ||  option  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.PRESERVE  ||  option  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.PRESERVE  ||  option  ==  JsDocToken.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	62	None	replace
183	[BUG]  [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	62	None	replace
184	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  option  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  option  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  option  ==  JsDocToken.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	62	None	replace
185	[BUG]  [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	62	None	replace
186	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getLineno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getLineno();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(token);  line  =  stream.getLineno();	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
187	[BUG]  [BUGGY]  if(!ignoreStar)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(!ignoreStar)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(!ignoreStar)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
188	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
189	[BUG]  [BUGGY]  line  =  stream.getRemainingJSDocLine();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  stream.getRemainingJSDocLine();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  stream.getRemainingJSDocLine();	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
190	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getLineNumber();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getLineNumber();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(token);  line  =  stream.getLineNumber();	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
191	[BUG]  [BUGGY]  if(line!=  null  &&  line!=  whitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line!=  whitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line!=  whitespaceOption.PRESERVE)  {	  if(line!=    null    &&    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	65	None	replace
192	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	70	None	replace
193	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	70	None	replace
194	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	70	None	replace
195	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	20	None	replace
196	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	20	None	replace
197	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	20	None	replace
198	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	19	None	replace
199	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	19	None	replace
200	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	19	None	replace
201	[BUG]  [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	19	None	replace
202	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.START  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.START  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	19	None	replace
203	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.FIELD_NAME)  {	  if(token    ==    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	1	None	replace
204	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_NULL)  {	  if(token    ==    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	1	None	replace
205	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
206	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
207	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
208	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
209	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
210	[BUG]  [BUGGY]  if(line!=  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
211	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	3	None	replace
212	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	3	None	replace
213	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	3	None	replace
214	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	3	None	replace
215	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  >=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  >=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  >=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	3	None	replace
216	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	45	None	replace
217	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	45	None	replace
218	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_BLOCK  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_BLOCK  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_BLOCK  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	45	None	replace
219	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	45	None	replace
220	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	45	None	replace
221	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
222	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
223	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
224	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
225	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.PRESERVE  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.PRESERVE  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.PRESERVE  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
226	[BUG]  [BUGGY]  if(token!=  null  &&  token!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token!=  null)  {	  if(line!=    null    &&    token!=    null)    {    	non-compiled	[CE]  	11	None	replace
227	[BUG]  [BUGGY]  if(token!=  null  &&  line!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  line!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  line!=  null)  {	  if(line!=    null    &&    token!=    null)    {    	non-compiled	[CE]  	11	None	replace
228	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START  ||  token!=  JsDocToken.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	59	None	replace
229	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START  ||  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.START  ||  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.START  ||  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	59	None	replace
230	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START)  {	  if(option    ==    WhitespaceOption.START    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	59	None	replace
231	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  >=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  >=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START  ||  option  >=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	59	None	replace
232	[BUG]  [BUGGY]  if(token!=  null  &&  token!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token!=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    &&    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	25	None	replace
233	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  whitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  whitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  whitespaceOption.PRESERVE)  {	  if(line!=    null    &&    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	25	None	replace
234	[BUG]  [BUGGY]  if(line!=  null  &&  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token  ==  WhitespaceOption.PRESERVE)  {	  if(line!=    null    &&    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	25	None	replace
235	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	91	None	replace
236	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	91	None	replace
237	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	91	None	replace
238	[BUG]  [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	21	None	replace
239	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	21	None	replace
240	[BUG]  [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
241	[BUG]  [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
242	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  '/')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
243	[BUG]  [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  '/')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line.charAt(line.length())!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
244	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  '/')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length())!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
245	[BUG]  [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
246	[BUG]  [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStar)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
247	[BUG]  [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
248	[BUG]  [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
249	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	57	None	replace
250	[BUG]  [BUGGY]  if(token!=  null  &&  option!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  option!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  option!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	57	None	replace
251	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	57	None	replace
252	[BUG]  [BUGGY]  while(line!=  null)  {  for(JSDocToken  token  :  tokens.values())  {  builder.append( ",   ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  while(line!=  null)  {  for(JSDocToken  token  :  tokens.values())  {  builder.append( ",   ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	while(line!=  null)  {  for(JSDocToken  token  :  tokens.values())  {  builder.append( ",   ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.values())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	33	None	replace
253	[BUG]  [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append(',');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append(',');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append(',');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.values())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	33	None	replace
254	[BUG]  [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ",n ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ",n ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ",n ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.values())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	33	None	replace
255	[BUG]  [BUGGY]  while(line!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ",   ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  while(line!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ",   ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	while(line!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ",   ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.values())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	33	None	replace
256	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	58	None	replace
257	[BUG]  [BUGGY]  if(token!=  null  ||  token!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  ||  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  ||  token!=  null)  {	  if(line!=    null    ||    token!=    null)    {    	non-compiled	[CE]  	10	None	replace
258	[BUG]  [BUGGY]  if(token!=  null  ||  line!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  ||  line!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  ||  line!=  null)  {	  if(line!=    null    ||    token!=    null)    {    	non-compiled	[CE]  	10	None	replace
259	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	14	None	replace
260	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	14	None	replace
261	[BUG]  [BUGGY]  if(line!=  null  ||  line!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line!=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line!=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
262	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
263	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
264	[BUG]  [BUGGY]  if(line!=  null  &&  line!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line!=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line!=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
265	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
266	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	85	None	replace
267	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	85	None	replace
268	[BUG]  [BUGGY]  if(line  ==  null  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	85	None	replace
269	[BUG]  [BUGGY]  if(line!=  null  &&  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	85	None	replace
270	[BUG]  [BUGGY]  if(token!=  null  &&  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	85	None	replace
271	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
272	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
273	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
274	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
275	[BUG]  [BUGGY]  builder.append('  ');  line  =  stream.getLength();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append('  ');  line  =  stream.getLength();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append('  ');  line  =  stream.getLength();	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
276	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
277	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  JsDocToken.VALUE_EMPTY)  {	  if(line    ==    null    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	24	None	replace
278	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  JsDocToken.VALUE_STRING)  {	  if(line    ==    null    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	24	None	replace
279	[BUG]  [BUGGY]  if(line!=  null  &&  token.equals( "   "))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token.equals( "   "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token.equals( "   "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
280	[BUG]  [BUGGY]  if(line  ==  null  &&  token.equals( "   "))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token.equals( "   "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token.equals( "   "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
281	[BUG]  [BUGGY]  if(token!=  null  &&  token.equals( "n "))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.equals( "n "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.equals( "n "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
282	[BUG]  [BUGGY]  if(token!=  null  ||  token.equals( "   "))  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  ||  token.equals( "   "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  ||  token.equals( "   "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
283	[BUG]  [BUGGY]  if(token!=  null  &&  token.equals( "- "))  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.equals( "- "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.equals( "- "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
284	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
285	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
286	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
287	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
288	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
289	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
290	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
291	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
292	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
293	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
294	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_NULL)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
295	[BUG]  [BUGGY]  if(line  ==  null  &&  token.length()  >  0)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token.length()  >  0)  {	  if(token!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	87	None	replace
296	[BUG]  [BUGGY]  if(token!=  null  ||  token.length()  >  0)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  ||  token.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  ||  token.length()  >  0)  {	  if(token!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	87	None	replace
297	[BUG]  [BUGGY]  if(token!=  null  &&  token.length()  ==  0)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.length()  ==  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.length()  ==  0)  {	  if(token!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	87	None	replace
298	[BUG]  [BUGGY]  if(token!=  null  &&  token.length()  <=  0)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.length()  <=  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.length()  <=  0)  {	  if(token!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	87	None	replace
299	[BUG]  [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
300	[BUG]  [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line.charAt(line.length()  -  1)!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
301	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  ':')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length()  -  1)!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
302	[BUG]  [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  ':')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line.charAt(line.length())!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line.charAt(line.length())!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
303	[BUG]  [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  ':')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.charAt(line.length())!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.charAt(line.length())!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
304	[BUG]  [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
305	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	63	None	replace
306	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	63	None	replace
307	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	63	None	replace
308	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	63	None	replace
309	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
310	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
311	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
312	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  builder.append('  ');  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
313	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
314	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  builder.append('  ');  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
315	[BUG]  [BUGGY]  if(option  ==  Preconditions.PRESERVE  &&  option!=  Preconditions.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.PRESERVE  &&  option!=  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.PRESERVE  &&  option!=  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option!=    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	16	None	replace
316	[BUG]  [BUGGY]  if(token  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option!=    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	16	None	replace
317	[BUG]  [BUGGY]  if(option!=  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option!=    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	16	None	replace
318	[BUG]  [BUGGY]  if(option  ==  Preconditions.PRESERVE  ||  option  >=  Preconditions.PRESERVE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.PRESERVE  ||  option  >=  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.PRESERVE  ||  option  >=  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option!=    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	16	None	replace
319	[BUG]  [BUGGY]  if(option  ==  Preconditions.RIGHT  ||  option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.RIGHT  ||  option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.RIGHT  ||  option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option!=    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	16	None	replace
320	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	13	None	replace
321	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	17	None	replace
322	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
323	[BUG]  [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
324	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_BLOCK)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_BLOCK)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_BLOCK)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
325	[BUG]  [BUGGY]  if(unreadToken!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(unreadToken!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(unreadToken!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	55	None	replace
326	[BUG]  [BUGGY]  if(line!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	55	None	replace
327	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	55	None	replace
328	[BUG]  [BUGGY]  line  =  next();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  next();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  next();	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
329	[BUG]  [BUGGY]  line  =  trimToken(token);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimToken(token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimToken(token);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
330	[BUG]  [BUGGY]  line  =  trimLineno(line);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimLineno(line);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimLineno(line);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
331	[BUG]  [BUGGY]  line  =  trimEnd(token);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimEnd(token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimEnd(token);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
332	[BUG]  [BUGGY]  line  =  trimSingleLine(line);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimSingleLine(line);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimSingleLine(line);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
333	[BUG]  [BUGGY]  line  =  trimSingleLine(token);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimSingleLine(token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimSingleLine(token);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
334	[BUG]  [BUGGY]  line  =  trimEnd(line  +  1);  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimEnd(line  +  1);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimEnd(line  +  1);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
335	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.END_ARRAY)    {    	non-compiled	[CE]  	73	None	replace
336	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.END_ARRAY)    {    	non-compiled	[CE]  	73	None	replace
337	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.END_ARRAY)    {    	non-compiled	[CE]  	73	None	replace
338	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.END_ARRAY)    {    	non-compiled	[CE]  	73	None	replace
339	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.END_ARRAY)    {    	non-compiled	[CE]  	73	None	replace
340	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.END_ARRAY)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.END_ARRAY)    {    	non-compiled	[CE]  	73	None	replace
341	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "] ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( "] ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( "] ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	53	None	replace
342	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( ": ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	53	None	replace
343	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( "# ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	53	None	replace
344	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( ";n ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	53	None	replace
345	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( "[ ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	53	None	replace
346	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_EMPTY)  {	  if(token    ==    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	38	None	replace
347	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.VALUE_STRING)  {	  if(token    ==    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	38	None	replace
348	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.FIELD_NAME)  {	  if(token    ==    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	38	None	replace
349	[BUG]  [BUGGY]  JSDocToken  next  =  token.getNext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  token.getNext();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  token.getNext();	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
350	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getNext(),  token);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getNext(),  token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getNext(),  token);	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
351	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getNext()  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getNext()  -  1;  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getNext()  -  1;	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
352	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getNextSibling();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getNextSibling();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getNextSibling();	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
353	[BUG]  [BUGGY]  if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	88	None	replace
354	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())!=  'n')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length())!=  'n')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	88	None	replace
355	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)  ==  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	88	None	replace
356	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)!=  'n')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)!=  'n'  ||  token.charAt(token.length()  -  1)!=  'n')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	88	None	replace
357	[BUG]  [BUGGY]  if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	88	None	replace
358	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(1)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(1)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(1)!=  'n'  &&  token.charAt(token.length()  -  1)!=  'n')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	88	None	replace
359	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	68	None	replace
360	[BUG]  [BUGGY]  if(line  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	68	None	replace
361	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_FIELD_NAME)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_FIELD_NAME)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	68	None	replace
362	[BUG]  [BUGGY]  JsDocToken  next  =  token.getNext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  token.getNext();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  token.getNext();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
363	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNextJsDocToken();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getNextJsDocToken();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getNextJsDocToken();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
364	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNextSibling();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getNextSibling();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getNextSibling();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
365	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNext(),  token);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getNext(),  token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getNext(),  token);	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
366	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getCurrentToken();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getCurrentToken();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getCurrentToken();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
367	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNext()  -  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getNext()  -  1;  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getNext()  -  1;	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
368	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	4	None	replace
369	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	4	None	replace
370	[BUG]  [BUGGY]  if(option  ==  Preconditions.PRESERVE  &&  option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.PRESERVE  &&  option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.PRESERVE  &&  option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option    ==    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	18	None	replace
371	[BUG]  [BUGGY]  if(token  ==  Preconditions.PRESERVE  ||  token  ==  Preconditions.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  Preconditions.PRESERVE  ||  token  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  Preconditions.PRESERVE  ||  token  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option    ==    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	18	None	replace
372	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	21	None	replace
373	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	21	None	replace
374	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getRemainingJSDocNext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getRemainingJSDocNext();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getRemainingJSDocNext();	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
375	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getNextJsDocToken();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getNextJsDocToken();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getNextJsDocToken();	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
376	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getNextNode();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getNextNode();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getNextNode();	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
377	[BUG]  [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
378	[BUG]  [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
379	[BUG]  [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	Integer  token  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
380	[BUG]  [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
381	[BUG]  [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endCharno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endCharno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endCharno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
382	[BUG]  [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	Integer  token  =  stream.getRemainingJSDocLine();  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
383	[BUG]  [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  Integer  token  =  stream.getRemainingJSDocLine();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	Integer  token  =  stream.getRemainingJSDocLine();	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
384	[BUG]  [BUGGY]  if(token  ==  NO_UNREAD_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  NO_UNREAD_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  NO_UNREAD_TOKEN)  {	  if(token!=    NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	60	None	replace
385	[BUG]  [BUGGY]  if(line!=  null  ||  line.length()  ==  0)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  line.length()  ==  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  line.length()  ==  0)  {	  if(line    ==    null)    {    	non-compiled	[CE]  	6	None	replace
386	[BUG]  [BUGGY]  if(line  ==  null  ||  line.length()  ==  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line.length()  ==  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line.length()  ==  0)  {	  if(line    ==    null)    {    	non-compiled	[CE]  	6	None	replace
387	[BUG]  [BUGGY]  if(line!=  null  &&  line.length()  >=  0)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line.length()  >=  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line.length()  >=  0)  {	  if(line!=    null    &&    line.length()    >    0)    {    	non-compiled	[CE]  	83	None	replace
388	[BUG]  [BUGGY]  if(line  >=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  JsDocToken.VALUE_STRING)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
389	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_NUMBER_INT)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
390	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  ':')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
391	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	12	None	replace
392	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( ", ");	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	52	None	replace
393	[BUG]  [BUGGY]  if(option!=  Preconditions.PRESERVE  &&  option!=  Preconditions.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option!=  Preconditions.PRESERVE  &&  option!=  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option!=  Preconditions.PRESERVE  &&  option!=  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option!=    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	16	None	replace
394	[BUG]  [BUGGY]  if(option  ==  Preconditions.SINGLE_LINE  ||  option!=  Preconditions.PRESERVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.SINGLE_LINE  ||  option!=  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.SINGLE_LINE  ||  option!=  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option!=    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	16	None	replace
395	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
396	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
397	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  &&  option  >=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  &&  option  >=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  &&  option  >=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    >=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	15	None	replace
398	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  >=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  >=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  >=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    >=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	15	None	replace
399	[BUG]  [BUGGY]  if(line  >=  null  &&  token!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  &&  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  &&  token!=  null)  {	  if(line!=    null    &&    token!=    null)    {    	non-compiled	[CE]  	11	None	replace
400	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
401	[BUG]  [BUGGY]  if(option  ==  Preconditions.SINGLE_LINE  ||  option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.SINGLE_LINE  ||  option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.SINGLE_LINE  ||  option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option    ==    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	18	None	replace
402	[BUG]  [BUGGY]  if(line  ==  null  ||  option  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  option  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  option  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option    ==    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	18	None	replace
403	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
404	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START_TOKEN  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.START_TOKEN  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.START_TOKEN  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
405	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.VALUE_STRING)  {	  if(token    ==    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	1	None	replace
406	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	1	None	replace
407	[BUG]  [BUGGY]  if(line!=  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
408	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNextJsDoc();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getNextJsDoc();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getNextJsDoc();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
409	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNextSegment();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getNextSegment();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getNextSegment();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
410	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNextingJSDoc();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getNextingJSDoc();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getNextingJSDoc();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
411	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
412	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
413	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
414	[BUG]  [BUGGY]  if(ignoreStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoreStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoreStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
415	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
416	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
417	[BUG]  [BUGGY]  if(ignoredStart)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
418	[BUG]  [BUGGY]  if(line  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  WhitespaceOption.SINGLE_LINE)  {	  if(line!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	41	None	replace
419	[BUG]  [BUGGY]  if(line  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	41	None	replace
420	[BUG]  [BUGGY]  if(line  ==  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
421	[BUG]  [BUGGY]  if(line  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  WhitespaceOption.START_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
422	[BUG]  [BUGGY]  if(line  ==  null  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	26	None	replace
423	[BUG]  [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  tokens.values())  {  builder.append( ", ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  tokens.values())  {  builder.append( ", ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(JSDocToken  token  :  tokens.values())  {  builder.append( ", ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.values())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	33	None	replace
424	[BUG]  [BUGGY]  for(JSDocToken  line  :  tokens.values())  {  builder.append( ", ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  for(JSDocToken  line  :  tokens.values())  {  builder.append( ", ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	for(JSDocToken  line  :  tokens.values())  {  builder.append( ", ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.values())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	33	None	replace
425	[BUG]  [BUGGY]  if(line!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ", ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ", ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(JSDocToken  line  :  tokens.values())  {  builder.append( ", ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.values())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	33	None	replace
426	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
427	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
428	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
429	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    token    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	92	None	replace
430	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT  ||  line!=  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT  ||  line!=  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_NUMBER_INT  ||  line!=  JsDocToken.VALUE_EMPTY)  {	  if(line!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	56	None	replace
431	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT  ||  line  ==  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT  ||  line  ==  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_NUMBER_INT  ||  line  ==  JsDocToken.VALUE_EMPTY)  {	  if(line!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	56	None	replace
432	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	36	None	replace
433	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	36	None	replace
434	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  whitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  whitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  whitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	13	None	replace
435	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
436	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
437	[BUG]  [BUGGY]  if(line!=  null)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  if(ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
438	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  'n')  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
439	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
440	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
441	[BUG]  [BUGGY]  if(line!=  null)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
442	[BUG]  [BUGGY]  line  =  trimFirst(line);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimFirst(line);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimFirst(line);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
443	[BUG]  [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append(']');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
444	[BUG]  [BUGGY]  while(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append(']');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  while(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	while(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
445	[BUG]  [BUGGY]  if(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
446	[BUG]  [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.values().next())  {  builder.append(']');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null)  {  for(JSDocToken  line  :  tokens.values().next())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null)  {  for(JSDocToken  line  :  tokens.values().next())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
447	[BUG]  [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
448	[BUG]  [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token!=  null)  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
449	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '0')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
450	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	63	None	replace
451	[BUG]  [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append( ", ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append( ", ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append( ", ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	31	None	replace
452	[BUG]  [BUGGY]  while(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append( ",   ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  while(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append( ",   ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	while(line!=  null)  {  for(JSDocToken  token  :  tokens.iterator().next())  {  builder.append( ",   ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	31	None	replace
453	[BUG]  [BUGGY]  if(line!=  null  &&  option!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  option!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  option!=  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	57	None	replace
454	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    null)    {    	non-compiled	[CE]  	34	None	replace
455	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ARRAY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ARRAY)  {	  if(token    ==    null)    {    	non-compiled	[CE]  	34	None	replace
456	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.START_BLOCK)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.START_BLOCK)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
457	[BUG]  [BUGGY]  if(line  >=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
458	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.START_PREFIX)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.START_PREFIX)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.START_PREFIX)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
459	[BUG]  [BUGGY]  if(line!=  whitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  whitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  whitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
460	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	68	None	replace
461	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '/')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
462	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
463	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  option  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  option  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  option  ==  JsDocToken.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	62	None	replace
464	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
465	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getLength();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getLength();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append(token);  line  =  stream.getLength();	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
466	[BUG]  [BUGGY]  if(line!=  null  &&  line!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line!=  WhitespaceOption.SINGLE_LINE)  {	  if(line!=    null    &&    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	65	None	replace
467	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMPTY  ||  token  ==  JsDocToken.START_OBJECT)  {	  if(token    ==    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	38	None	replace
468	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.START_TOKEN)  {	  if(line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	39	None	replace
469	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.PRESERVE  &&  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.PRESERVE  &&  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.PRESERVE  &&  line!=  WhitespaceOption.PRESERVE)  {	  if(line    ==    WhitespaceOption.PRESERVE    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	66	None	replace
470	[BUG]  [BUGGY]  if(line  ==  Token.PRESERVE  ||  line!=  Token.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  Token.PRESERVE  ||  line!=  Token.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  Token.PRESERVE  ||  line!=  Token.PRESERVE)  {	  if(line    ==    WhitespaceOption.PRESERVE    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	66	None	replace
471	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
472	[BUG]  [BUGGY]  if(line!=  null)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
473	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
474	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
475	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
476	[BUG]  [BUGGY]  builder.append( ", ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append( ", ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append( ", ");	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
477	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
478	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
479	[BUG]  [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
480	[BUG]  [BUGGY]  if(ignoreStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoreStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoreStart)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
481	[BUG]  [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
482	[BUG]  [BUGGY]  if(ignoreStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoreStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoreStart)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
483	[BUG]  [BUGGY]  if(ignoredStart)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
484	[BUG]  [BUGGY]  if(ignoredStart)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoredStart)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoredStart)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
485	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	14	None	replace
486	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	59	None	replace
487	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_EOF)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_EOF)  {	  if(token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	69	None	replace
488	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  fileLevelJsDocBuilder.append(token);  }	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
489	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  builder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  fileLevelJsDocBuilder.append(token);  }	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
490	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	58	None	replace
491	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	55	None	replace
492	[BUG]  [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  token!=  null  &&  token.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  token!=  null  &&  token.length()  >  0)  {	  if(token!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	87	None	replace
493	[BUG]  [BUGGY]  if(token  ==  null  &&  token.length()  >  0)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  &&  token.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  &&  token.length()  >  0)  {	  if(token!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	87	None	replace
494	[BUG]  [BUGGY]  if(token!=  null  &&  token.length()  >=  0)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.length()  >=  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.length()  >=  0)  {	  if(token!=    null    &&    token.length()    >    0)    {    	non-compiled	[CE]  	87	None	replace
495	[BUG]  [BUGGY]  if(line  >>  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >>  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >>  null)  {	  if(line    >=    null)    {    	non-compiled	[CE]  	9	None	replace
496	[BUG]  [BUGGY]  if(line  [Delete]  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  [Delete]  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  [Delete]  null)  {	  if(line    >=    null)    {    	non-compiled	[CE]  	9	None	replace
497	[BUG]  [BUGGY]  if(line  <  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  <  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  <  null)  {	  if(line    >=    null)    {    	non-compiled	[CE]  	9	None	replace
498	[BUG]  [BUGGY]  if(line!=  null  &&  line!=  Preconditions.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line!=  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line!=  Preconditions.PRESERVE)  {	  if(line!=    null    &&    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	65	None	replace
499	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "  => ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( "  => ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( "  => ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	53	None	replace
500	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  null)  {	  if(token    ==    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	1	None	replace
501	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_FIELD_NAME)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_FIELD_NAME)  {	  if(token    ==    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	1	None	replace
502	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getCurrentToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getCurrentToken();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getCurrentToken();	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
503	[BUG]  [BUGGY]  JSDocToken  next  =  stream.getLastChild();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JSDocToken  next  =  stream.getLastChild();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JSDocToken  next  =  stream.getLastChild();	  JSDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	51	None	replace
504	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.START_BLOCK  ||  line!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.START_BLOCK  ||  line!=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.START_BLOCK  ||  line!=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
505	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.START_LINE  ||  line!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.START_LINE  ||  line!=  WhitespaceOption.START_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.START_LINE  ||  line!=  WhitespaceOption.START_LINE)  {	  if(line!=    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	40	None	replace
506	[BUG]  [BUGGY]  builder.append('  ');  line  =  stream.getLineNumber();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append('  ');  line  =  stream.getLineNumber();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append('  ');  line  =  stream.getLineNumber();	  builder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	27	None	replace
507	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  Preconditions.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  Preconditions.PRESERVE)  {	  if(line!=    null    &&    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	25	None	replace
508	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.PRESERVE)  {	  if(line!=    null    &&    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	25	None	replace
509	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
510	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_OBJECT)    {    	non-compiled	[CE]  	72	None	replace
511	[BUG]  [BUGGY]  if(line!=  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  ||  option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	19	None	replace
512	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  }	  fileLevelJsDocBuilder.append(token);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	29	None	replace
513	[BUG]  [BUGGY]  if(option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option    ==    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	18	None	replace
514	[BUG]  [BUGGY]  if(line  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.PRESERVE)  {	  if(option    ==    Preconditions.PRESERVE    ||    option    ==    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	18	None	replace
515	[BUG]  [BUGGY]  if(option  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.RIGHT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.RIGHT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  Preconditions.PRESERVE  ||  option  ==  Preconditions.RIGHT)  {	  if(option    ==    Preconditions.PRESERVE    ||    option    ==    Preconditions.PRESERVE)    {    	non-compiled	[CE]  	18	None	replace
516	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_ARRAY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token  ==  JsDocToken.START_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_ARRAY)    {    	non-compiled	[CE]  	74	None	replace
517	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
518	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	71	None	replace
519	[BUG]  [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  ':')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    ':')    {    	non-compiled	[CE]  	49	None	replace
520	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.FIELD_NAME)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
521	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.START_TOKEN)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
522	[BUG]  [BUGGY]  if(line!=  null  &&  line!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line!=  JsDocToken.VALUE_STRING)  {	  if(line!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	2	None	replace
523	[BUG]  [BUGGY]  if(token!=  null  &&  token.length()  ==  0  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.length()  ==  0  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.length()  ==  0  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'r')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)    ==    'r')    {    	non-compiled	[CE]  	89	None	replace
524	[BUG]  [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  '/')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '/')    {    	non-compiled	[CE]  	47	None	replace
525	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	36	None	replace
526	[BUG]  [BUGGY]  if(line!=  null  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	57	None	replace
527	[BUG]  [BUGGY]  if(token!=  JsDocToken.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	57	None	replace
528	[BUG]  [BUGGY]  if(token  ==  null  &&  token.equals( "   "))  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  &&  token.equals( "   "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  &&  token.equals( "   "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
529	[BUG]  [BUGGY]  if(token!=  null  &&  token.equals( "* "))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.equals( "* "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.equals( "* "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
530	[BUG]  [BUGGY]  if(line!=  null  &&  token.equals( "n "))  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token.equals( "n "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token.equals( "n "))  {	  if(token!=    null    &&    token.equals(   "   "))    {    	non-compiled	[CE]  	90	None	replace
531	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
532	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
533	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	61	None	replace
534	[BUG]  [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  'n')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	46	None	replace
535	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	63	None	replace
536	[BUG]  [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  &&  line!=  null  &&  line.charAt(line.length()  -  1)!=  '0')  {	  if(line!=    null    ||    line.charAt(line.length()    -    1)!=    '0')    {    	non-compiled	[CE]  	48	None	replace
537	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	77	None	replace
538	[BUG]  [BUGGY]  if(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( ", ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( ", ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append( ", ");  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	31	None	replace
539	[BUG]  [BUGGY]  if(line!=  null  &&  line!=  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line!=  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line!=  JsDocToken.VALUE_EMPTY)  {	  if(line!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	56	None	replace
540	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.VALUE_STRING    &&    token!=    JsDocToken.END_ARRAY)    {    	non-compiled	[CE]  	73	None	replace
541	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  null)  {	  if(line!=    null    ||    token!=    null)    {    	non-compiled	[CE]  	10	None	replace
542	[BUG]  [BUGGY]  if(token  ==  JsDocToken.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	17	None	replace
543	[BUG]  [BUGGY]  if(line!=  null  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	17	None	replace
544	[BUG]  [BUGGY]  line  =  trimEnd(line,  endLineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimEnd(line,  endLineno);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimEnd(line,  endLineno);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
545	[BUG]  [BUGGY]  line  =  insertNewLine(token);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  insertNewLine(token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  insertNewLine(token);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
546	[BUG]  [BUGGY]  line  =  trimEnd(line,  unreadToken);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  line  =  trimEnd(line,  unreadToken);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	line  =  trimEnd(line,  unreadToken);	  line    =    trimEnd(line);    	non-compiled	[CE]  	30	None	replace
547	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START_LINE  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.START_LINE  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.START_LINE  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	43	None	replace
548	[BUG]  [BUGGY]  if(token  ==  null  ||  token.length()  ==  0)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  null  ||  token.length()  ==  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  null  ||  token.length()  ==  0)  {	  if(token    ==    null)    {    	non-compiled	[CE]  	34	None	replace
549	[BUG]  [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_TOKEN))  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_TOKEN))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_TOKEN))  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
550	[BUG]  [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token  ==  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token  ==  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token  ==  null)  {	  if(line!=    null    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  	84	None	replace
551	[BUG]  [BUGGY]  if(line!=  null  &&  token  ==  JsDocToken.VALUE_NULL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token  ==  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token  ==  JsDocToken.VALUE_NULL)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	82	None	replace
552	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_END)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_END)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_END)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  	82	None	replace
553	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
554	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(ignoreStart)  {  throw  new  IllegalArgumentException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	76	None	replace
555	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_STRING)    {    	non-compiled	[CE]  	3	None	replace
556	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	68	None	replace
557	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.END_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.END_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.END_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	68	None	replace
558	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  &&  token!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  &&  token!=  null)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.START_TOKEN  &&  token!=  null)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	68	None	replace
559	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.SINGLE_LINE  ||  token  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  WhitespaceOption.SINGLE_LINE  ||  token  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  WhitespaceOption.SINGLE_LINE  ||  token  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	14	None	replace
560	[BUG]  [BUGGY]  if(line  ==  null  ||  token  <=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  <=  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  <=  JsDocToken.VALUE_NULL)  {	  if(line    ==    null)    {    	non-compiled	[CE]  	6	None	replace
561	[BUG]  [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line    ==    null)    {    	non-compiled	[CE]  	6	None	replace
562	[BUG]  [BUGGY]  if(line  ==  null  ||  token  <=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  <=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  <=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line    ==    null)    {    	non-compiled	[CE]  	6	None	replace
563	[BUG]  [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  ==  JsDocToken.VALUE_NULL)  {	  if(line    ==    null)    {    	non-compiled	[CE]  	6	None	replace
564	[BUG]  [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(line    ==    null)    {    	non-compiled	[CE]  	6	None	replace
565	[BUG]  [BUGGY]  if(token  ==  JsDocToken.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	12	None	replace
566	[BUG]  [BUGGY]  if(line!=  null  &&  option  ==  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  option  ==  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  option  ==  WhitespaceOption.PRESERVE  &&  option!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    &&    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	12	None	replace
567	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
568	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
569	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOK)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOK)  {	  if(line    ==    null    ||    token!=    null)    {    	non-compiled	[CE]  	7	None	replace
570	[BUG]  [BUGGY]  if(line  >=  WhitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  WhitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  WhitespaceOption.PRESERVE  ||  line!=  WhitespaceOption.PRESERVE)  {	  if(line    ==    WhitespaceOption.PRESERVE    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	66	None	replace
571	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(!ignoreStart)  {  throw  new  IllegalStateException( " ");  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    if(!ignoreStart)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	79	None	replace
572	[BUG]  [BUGGY]  if(line  >=  null  ||  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  ||  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  ||  line!=  WhitespaceOption.PRESERVE)  {	  if(line    ==    null    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	24	None	replace
573	[BUG]  [BUGGY]  if(line  ==  null  ||  line!=  JsDocToken.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line!=  JsDocToken.PRESERVE)  {	  if(line    ==    null    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	24	None	replace
574	[BUG]  [BUGGY]  if(token!=  JsDocToken.PRESERVE  &&  token!=  JsDocToken.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.PRESERVE  &&  token!=  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.PRESERVE  &&  token!=  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token!=    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	67	None	replace
575	[BUG]  [BUGGY]  if(line!=  WhitespaceOption.START  ||  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  WhitespaceOption.START  ||  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  WhitespaceOption.START  ||  line!=  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START    ||    option!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	59	None	replace
576	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  WhitespaceOption.PRESERVE  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option!=    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	13	None	replace
577	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
578	[BUG]  [BUGGY]  if(line!=  null  &&  line!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  line!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  line!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(line!=    WhitespaceOption.SINGLE_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
579	[BUG]  [BUGGY]  while(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  while(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	while(line!=  null)  {  for(JSDocToken  line  :  tokens.iterator().next())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
580	[BUG]  [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  line.iterator().next())  {  builder.append(']');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(JSDocToken  token  :  line.iterator().next())  {  builder.append(']');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(JSDocToken  token  :  line.iterator().next())  {  builder.append(']');  }	  if(token!=    null)    {    for(JSDocToken    line    :    tokens.iterator().next())    {    builder.append(']');    }    	non-compiled	[CE]  	32	None	replace
581	[BUG]  [BUGGY]  if(!ignoreStart  &&  option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(!ignoreStart  &&  option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(!ignoreStart  &&  option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	44	None	replace
582	[BUG]  [BUGGY]  if(token!=  JsDocToken.PRESERVE  ||  option  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.PRESERVE  ||  option  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.PRESERVE  ||  option  ==  JsDocToken.PRESERVE)  {	  if(token    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	62	None	replace
583	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getLastChild();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getLastChild();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getLastChild();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
584	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getFirstChild();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  JsDocToken  next  =  stream.getFirstChild();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	JsDocToken  next  =  stream.getFirstChild();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	28	None	replace
585	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_TRUE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_TRUE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_TRUE)  {	  if(line!=    null    &&    token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	85	None	replace
586	[BUG]  [BUGGY]  if(option  >=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  >=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  >=  WhitespaceOption.PRESERVE  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    >=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	15	None	replace
587	[BUG]  [BUGGY]  if(line  >=  null  &&  line!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  &&  line!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  &&  line!=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	23	None	replace
588	[BUG]  [BUGGY]  if(line  >=  null  ||  token!=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  >=  null  ||  token!=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  >=  null  ||  token!=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    token!=    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	22	None	replace
589	[BUG]  [BUGGY]  if(token  ==  JsDocToken.PRESERVE  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.PRESERVE  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.PRESERVE  ||  token  ==  JsDocToken.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
590	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.PRESERVE    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
591	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ',  endLineno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append('  ',  endLineno);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append('  ',  endLineno);	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	50	None	replace
592	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ',  line);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append('  ',  line);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append('  ',  line);	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	50	None	replace
593	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "' ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  fileLevelJsDocBuilder.append( "' ");  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	fileLevelJsDocBuilder.append( "' ");	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	50	None	replace
594	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
595	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
596	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append(  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append(  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append(	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
597	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
598	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
599	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine();	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
600	[BUG]  [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	int  unreadToken  =  stream.getRemainingJSDocLine();  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	80	None	replace
601	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'n')  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'n')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  null  &&  token.charAt(0)!=  'n'  &&  token.charAt(token.length()  -  1)  ==  'n')  {	  if(token!=    null    &&    token.charAt(0)!=    'n'    &&    token.charAt(token.length()    -    1)!=    'n')    {    	non-compiled	[CE]  	88	None	replace
602	[BUG]  [BUGGY]  builder.append(token);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append(token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append(token);	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
603	[BUG]  [BUGGY]  builder.append(''+  token);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append(''+  token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append(''+  token);	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
604	[BUG]  [BUGGY]  builder.append('  ').append(token);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append('  ').append(token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append('  ').append(token);	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
605	[BUG]  [BUGGY]  builder.append('  ',  token);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append('  ',  token);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append('  ',  token);	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
606	[BUG]  [BUGGY]  builder.append('  ',  endLineno);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  builder.append('  ',  endLineno);  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	builder.append('  ',  endLineno);	  builder.append('    ');    	non-compiled	[CE]  	54	None	replace
607	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
608	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
609	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
610	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
611	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
612	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('n');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	78	None	replace
613	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	4	None	replace
614	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	55	None	replace
615	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_ARRAY)  {	  if(token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  	21	None	replace
616	[BUG]  [BUGGY]  if(token!=  JsDocToken.PRESERVE  &&  token  ==  JsDocToken.PRESERVE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.PRESERVE  &&  token  ==  JsDocToken.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.PRESERVE  &&  token  ==  JsDocToken.PRESERVE)  {	  if(token    ==    JsDocToken.PRESERVE    ||    token    ==    JsDocToken.PRESERVE)    {    	non-compiled	[CE]  	91	None	replace
617	[BUG]  [BUGGY]  if(line  ==  null  ||  line  >=  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  line  >=  WhitespaceOption.PRESERVE)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  line  >=  WhitespaceOption.PRESERVE)  {	  if(line!=    null    ||    line    ==    WhitespaceOption.PRESERVE)    {    	non-compiled	[CE]  	26	None	replace
618	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	20	None	replace
619	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_STRING)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	20	None	replace
620	[BUG]  [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.END_ARRAY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line  ==  null  ||  token  ==  JsDocToken.END_ARRAY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line  ==  null  ||  token  ==  JsDocToken.END_ARRAY)  {	  if(line!=    null    ||    token    ==    null)    {    	non-compiled	[CE]  	8	None	replace
621	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  null  &&  token.length()  >  0)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  null  &&  token.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  null  &&  token.length()  >  0)  {	  if(line!=    null    &&    token!=    null)    {    	non-compiled	[CE]  	11	None	replace
622	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  null  &&  token.equals( " "))  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  null  &&  token.equals( " "))  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  null  &&  token.equals( " "))  {	  if(line!=    null    &&    token!=    null)    {    	non-compiled	[CE]  	11	None	replace
623	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  null  &&  line.length()  >  0)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  null  &&  line.length()  >  0)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  null  &&  line.length()  >  0)  {	  if(line!=    null    &&    token!=    null)    {    	non-compiled	[CE]  	11	None	replace
624	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '/')  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '/')  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null  &&  token!=  null  &&  token.charAt(line.length()  -  1)!=  '/')  {	  if(line!=    null    &&    token!=    null)    {    	non-compiled	[CE]  	11	None	replace
625	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_EMPTY)  {	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_EMPTY)    {    	non-compiled	[CE]  	37	None	replace
626	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(line!=  null)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(line!=  null)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
627	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
628	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
629	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  for(int  i  =  startCharno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
630	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
631	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(token  ==  JsDocToken.VALUE_STRING)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
632	[BUG]  [BUGGY]  if(ignoreStar)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [CE]  [FE]                                                ComparisonFailure      [CONTEXT]      return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();      [BUGGY]  if(ignoreStar)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }  [BUGGY]      line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1421	1421	4	replace	if(ignoreStar)  {  for(int  i  =  startLineno;  i  <=  endLineno;  ++i)  {  builder.append('-');  }	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    for(int    i    =    startLineno;    i    <=    endLineno;    ++i)    {    builder.append('-');    }    	non-compiled	[CE]  	81	None	replace
