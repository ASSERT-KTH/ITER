bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
2	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
3	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
4	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  preserve);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
5	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
6	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractRelativeTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractRelativeTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractRelativeTextualBlock(token,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
7	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(preserve);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  getStream(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  getStream(preserve);	  JSDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	34	None	replace
8	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(preserve);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  getStream(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  getStream(preserve);	  JSDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	34	None	replace
9	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(token,  preserve);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  getStream(token,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  getStream(token,  preserve);	  JSDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	34	None	replace
10	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(reserve);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  getStream(reserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  getStream(reserve);	  JSDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	34	None	replace
11	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  <=  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  <=  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  <=  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.length()    >=    0)    {    	non-compiled	[CE]  orphaned  case	7	None	replace
12	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "   ");  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( "   ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( "   ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  orphaned  case	16	None	replace
13	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( ": ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  orphaned  case	16	None	replace
14	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( ";n ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  orphaned  case	16	None	replace
15	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "- ");  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( "- ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( "- ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  orphaned  case	16	None	replace
16	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( "[ ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  orphaned  case	16	None	replace
17	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [CE]  orphaned  case  [FE]                                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( "# ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  orphaned  case	16	None	replace
18	[BUG]  [BUGGY]  if  (preserve!=  null  ||  preserve.length()  >=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (preserve!=  null  ||  preserve.length()  >=  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (preserve!=  null  ||  preserve.length()  >=  0)  {	  if    (preserve!=    null    ||    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
19	[BUG]  [BUGGY]  if  (preserve  ==  null  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (preserve  ==  null  ||  preserve.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (preserve  ==  null  ||  preserve.length()  ==  0)  {	  if    (preserve!=    null    ||    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
20	[BUG]  [BUGGY]  JsDocToken  stream  =  preserveInfo.token;  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  preserveInfo.token;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  preserveInfo.token;	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
21	[BUG]  [BUGGY]  JsDocToken  stream  =  preserveInfo.getCharno();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  preserveInfo.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  preserveInfo.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
22	[BUG]  [BUGGY]  JsDocToken  stream  =  preserveInfo.token.getCharno();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  preserveInfo.token.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  preserveInfo.token.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
23	[BUG]  [BUGGY]  JsDocToken  stream  =  preserve.getCharno();  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  preserve.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  preserve.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
24	[BUG]  [BUGGY]  JsDocToken  stream  =  preserveInfo.getLineno();  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  preserveInfo.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  preserveInfo.getLineno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
25	[BUG]  [BUGGY]  JsDocToken  stream  =  preserveInfo.next();  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  preserveInfo.next();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  preserveInfo.next();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
26	[BUG]  [BUGGY]  JsDocToken  stream  =  preserveInfo.trim();  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  preserveInfo.trim();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  preserveInfo.trim();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
27	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  preserve.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  ||  preserve.length()  >  0)  {	  if(fileLevelJsDocBuilder    ==    null    ||    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
28	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ",n ");  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( ",n ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( ",n ");	  fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  orphaned  case	36	None	replace
29	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ", ",  preserve);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( ", ",  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( ", ",  preserve);	  fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  orphaned  case	36	None	replace
30	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(',');  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append(',');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append(',');	  fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  orphaned  case	36	None	replace
31	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ",' ");  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( ",' ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( ",' ");	  fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  orphaned  case	36	None	replace
32	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "n ",  preserve);  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( "n ",  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( "n ",  preserve);	  fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  orphaned  case	36	None	replace
33	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
34	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(0);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
35	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileTypeJsDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
36	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve.length());  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve.length());  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(preserve.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
37	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(reserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
38	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(token,  preserve);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  getStream(token,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  getStream(token,  preserve);	  JsDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	37	None	replace
39	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(reserve);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  getStream(reserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  getStream(reserve);	  JsDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	37	None	replace
40	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(remainder);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  getStream(remainder);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  getStream(remainder);	  JsDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	37	None	replace
41	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append(preserve,  preserve);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
42	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(0);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.setLength(0);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.setLength(0);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
43	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('-');  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('-');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('-');	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
44	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.endsWith(preserve);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.endsWith(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.endsWith(preserve);	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  ')'  expected	38	None	replace
45	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve));  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve));  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve));	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  orphaned  case	38	None	replace
46	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.NONE);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.NONE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.NONE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
47	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.NONE);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.NONE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.NONE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
48	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE,  preserve);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.NONE,  preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
49	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  whitespaceOption.NONE);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  whitespaceOption.NONE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  whitespaceOption.NONE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
50	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractReplacementBlock(token,  WhitespaceOption.NONE);  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractReplacementBlock(token,  WhitespaceOption.NONE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractReplacementBlock(token,  WhitespaceOption.NONE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
51	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.SINGLE_TOKEN);  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.SINGLE_TOKEN);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.SINGLE_TOKEN);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
52	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getLineno();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getLineno();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
53	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.token;  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.token;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.token;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
54	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getLineno();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getLineno();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
55	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
56	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve;  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
57	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getLineno();  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getLineno();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
58	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.lineno;  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.lineno;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.lineno;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
59	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
60	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
61	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
62	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
63	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token  ==  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token  ==  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token  ==  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
64	[BUG]  [BUGGY]  if(remainingRc  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(remainingRc  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(remainingRc  ==  null  ||  preserveInfo.token!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
65	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.startsWith(preserve))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.startsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.startsWith(preserve))  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.startsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
66	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  preserve.startsWith(preserve))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  preserve.startsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  preserve.startsWith(preserve))  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.startsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
67	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve,  preserve);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append(preserve,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append(preserve,  preserve);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
68	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(precedence);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append(precedence);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append(precedence);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
69	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(remainder);  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append(remainder);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append(remainder);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
70	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    &&    preserve.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
71	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserve.endsWith(preserve))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserve.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  preserve.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    &&    preserve.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
72	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserve.endsWith(token))  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserve.endsWith(token))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserve.endsWith(token))  {	  if(fileLevelJsDocBuilder!=    null    &&    preserve.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
73	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getParent();  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getParent();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
74	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getParent();  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getParent();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
75	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getNext();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getNext();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getNext();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
76	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getNext();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getNext();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getNext();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
77	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.sourceFile.getParent();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.sourceFile.getParent();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.sourceFile.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
78	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getSourceFile();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getSourceFile();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.getSourceFile();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
79	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getName();  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getName();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.getName();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
80	[BUG]  [BUGGY]  if  (preserve!=  null  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (preserve!=  null  &&  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (preserve!=  null  &&  fileLevelJsDocBuilder.length()  ==  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	18	None	replace
81	[BUG]  [BUGGY]  if  (preserve!=  null  &&  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (preserve!=  null  &&  preserve.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (preserve!=  null  &&  preserve.length()  ==  0)  {	  if    (preserve!=    null    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
82	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder  ==  null  &&  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder  ==  null  &&  preserve.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder  ==  null  &&  preserve.length()  >  0)  {	  if    (preserve!=    null    &&    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	2	None	replace
83	[BUG]  [BUGGY]  JSDocToken  stream  =  preserveInfo.token;  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  preserveInfo.token;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  preserveInfo.token;	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
84	[BUG]  [BUGGY]  JSDocToken  stream  =  preserveInfo.getLineno();  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  preserveInfo.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  preserveInfo.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
85	[BUG]  [BUGGY]  JSDocToken  stream  =  preserveInfo.lineno;  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  preserveInfo.lineno;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  preserveInfo.lineno;	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
86	[BUG]  [BUGGY]  JSDocToken  stream  =  preserve.getLineno();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  preserve.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  preserve.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
87	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  preserve.length()  ==  0)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  preserve.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  ||  preserve.length()  ==  0)  {	  if(fileLevelJsDocBuilder    ==    null    ||    fileLevelJsDocBuilder.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	27	None	replace
88	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
89	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
90	[BUG]  [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve  ==  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
91	[BUG]  [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  ||  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
92	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
93	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  &&  preserveInfo.token!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
94	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.next();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.next();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.next();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
95	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  <  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  <  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  <  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.length()    <    0)    {    	non-compiled	[CE]  orphaned  case	20	None	replace
96	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve,  preserve);  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve,  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve,  preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	13	None	replace
97	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(';');  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(';');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(';');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  ';'  expected	13	None	replace
98	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder.toString();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder.toString();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
99	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(';');  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append(';');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append(';');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
100	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder!=  null)  {	  if    (fileLevelJsDocBuilder!=    null    ||    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
101	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  preserve.length()  >=  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  preserve.length()  >=  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  preserve.length()  >=  0)  {	  if    (fileLevelJsDocBuilder!=    null    ||    preserve.length()    >=    0)    {    	non-compiled	[CE]  orphaned  case	8	None	replace
102	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve)||  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve)||  preserveInfo.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve)||  preserveInfo.length()  >  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve)||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
103	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.endsWith(preserve)||  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.endsWith(preserve)||  preserveInfo.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.endsWith(preserve)||  preserveInfo.length()  ==  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve)||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
104	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  preserveInfo.endsWith(preserve)||  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  preserveInfo.endsWith(preserve)||  preserveInfo.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  preserveInfo.endsWith(preserve)||  preserveInfo.length()  ==  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve)||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
105	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n',  preserve);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('n',  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('n',  preserve);	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  orphaned  case	33	None	replace
106	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('#');  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('#');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('#');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  orphaned  case	33	None	replace
107	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('N');  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('N');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('N');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  orphaned  case	33	None	replace
108	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n'  +  preserve);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('n'  +  preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('n'  +  preserve);	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  orphaned  case	33	None	replace
109	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('[');  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('[');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('[');	  fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  orphaned  case	33	None	replace
110	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.length  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  preserveInfo.length  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
111	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  preserveInfo.length  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  preserveInfo.length  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
112	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserveInfo.length  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  preserveInfo.length  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
113	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserve.length  >  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserve.length  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserve.length  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
114	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.length()  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
115	[BUG]  [BUGGY]  if(archiveInfo!=  null  &&  preserveInfo.length  >  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(archiveInfo!=  null  &&  preserveInfo.length  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(archiveInfo!=  null  &&  preserveInfo.length  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
116	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length());  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length());  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
117	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length()  +  1);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length()  +  1);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length()  +  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
118	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length()  *  1);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length()  *  1);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length()  *  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
119	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve,  preserve.length()  -  1);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve,  preserve.length()  -  1);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve,  preserve.length()  -  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
120	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  new  File(preserve.length());  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder  =  new  File(preserve.length());  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder  =  new  File(preserve.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
121	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    ||    fileLevelJsDocBuilder.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
122	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.endsWith(preserve))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    ||    fileLevelJsDocBuilder.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
123	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  ==  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  ==  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  ==  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
124	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.getLineno();  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
125	[BUG]  [BUGGY]  JSDocToken  stream  =  sourceFile.getLineno();  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  sourceFile.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  sourceFile.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
126	[BUG]  [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.getLineno();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  this.fileLevelJsDocBuilder.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
127	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getLineno();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  token.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  token.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
128	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  <=  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  <=  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  <=  0)  {	  if(fileLevelJsDocBuilder    ==    null    ||    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
129	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve);	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  ')'  expected	38	None	replace
130	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTextualBlock(token,  WhitespaceOption.NONE);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTextualBlock(token,  WhitespaceOption.NONE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTextualBlock(token,  WhitespaceOption.NONE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
131	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.FIELD_NAME);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.FIELD_NAME);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.FIELD_NAME);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
132	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractSublineTextualBlock(token,  WhitespaceOption.NONE);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractSublineTextualBlock(token,  WhitespaceOption.NONE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractSublineTextualBlock(token,  WhitespaceOption.NONE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
133	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.STRING);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.STRING);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.STRING);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
134	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve)||  preserveInfo.length()  ==  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve)||  preserveInfo.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve)||  preserveInfo.length()  ==  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve)||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
135	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve)||  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve)||  preserveInfo.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve)||  preserveInfo.length()  >  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve)||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
136	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTextualBlock(token,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
137	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractSublineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractSublineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractSublineTextualBlock(token,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
138	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractLocalFileTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractLocalFileTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractLocalFileTextualBlock(token,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
139	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTypeTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTypeTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileTypeTextualBlock(token,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
140	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
141	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
142	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(preserve);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
143	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(preserve.length());  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(preserve.length());  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(preserve.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
144	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
145	[BUG]  [BUGGY]  if  (preserve  ==  null  ||  preserve.length()  >  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (preserve  ==  null  ||  preserve.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (preserve  ==  null  ||  preserve.length()  >  0)  {	  if    (preserve!=    null    ||    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
146	[BUG]  [BUGGY]  if  (preserve!=  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (preserve!=  null  ||  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (preserve!=  null  ||  fileLevelJsDocBuilder.length()  >  0)  {	  if    (preserve!=    null    ||    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
147	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getParent();  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getParent();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
148	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getParent()  +  1;  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getParent()  +  1;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getParent()  +  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
149	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getNext();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getNext();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getNext();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
150	[BUG]  [BUGGY]  if  (preserve!=  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (preserve!=  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (preserve!=  null  ||  fileLevelJsDocBuilder.length()  ==  0)  {	  if    (preserve!=    null    ||    preserve.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	19	None	replace
151	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(token,  fileLevelJsDocBuilder);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  getStream(token,  fileLevelJsDocBuilder);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  getStream(token,  fileLevelJsDocBuilder);	  JsDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	37	None	replace
152	[BUG]  [BUGGY]  JsDocToken  stream  =  parse(token);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  parse(token);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  parse(token);	  JsDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	37	None	replace
153	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(prefix))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(prefix))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(prefix))  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.startsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	5	None	replace
154	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getNext();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getNext();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getNext();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
155	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.next();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.next();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.next();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
156	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getSourceFile();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getSourceFile();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getSourceFile();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
157	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(LICENSE);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append(LICENSE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append(LICENSE);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
158	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append('n');  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append('n');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append('n');	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
159	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append('  ');  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append('  ');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append('  ');	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
160	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve).append('n');  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append(preserve).append('n');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append(preserve).append('n');	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
161	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder  ==  null)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder  ==  null)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder  ==  null)  {	  if    (fileLevelJsDocBuilder!=    null    ||    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
162	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder!=  null)  {	  if    (fileLevelJsDocBuilder!=    null    ||    fileLevelJsDocBuilder!=    null)    {    	non-compiled	[CE]  orphaned  case	26	None	replace
163	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve,  preserve.length());  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve,  preserve.length());  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve,  preserve.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
164	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(precedence.length());  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(precedence.length());  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(precedence.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
165	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ",   ").append(preserve);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( ",   ").append(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( ",   ").append(preserve);	  fileLevelJsDocBuilder.append(   ",   ");    	non-compiled	[CE]  orphaned  case	36	None	replace
166	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
167	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
168	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
169	[BUG]  [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.getCharno();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  this.fileLevelJsDocBuilder.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
170	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCharno();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
171	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCharno();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  jsdocBuilder.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
172	[BUG]  [BUGGY]  JsDocToken  stream  =  sourceFile.getCharno();  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  sourceFile.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  sourceFile.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
173	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getCharno();  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  token.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  token.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
174	[BUG]  [BUGGY]  JsDocToken  stream  =  parser.getCharno();  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  parser.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  parser.getCharno();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
175	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(LICENSE);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append(LICENSE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append(LICENSE);	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
176	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('  ');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('  ');	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
177	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('ufffd');  [CE]  unclosed  character  literal  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append('ufffd');  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append('ufffd');	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  unclosed  character  literal	12	None	replace
178	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(token,  fileLevelJsDocBuilder);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  getStream(token,  fileLevelJsDocBuilder);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  getStream(token,  fileLevelJsDocBuilder);	  JSDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	34	None	replace
179	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileOverviewJSDocBuilder.endsWith(preserve))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileOverviewJSDocBuilder.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  fileOverviewJSDocBuilder.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    &&    preserve.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
180	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.endsWith(preserve))  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    &&    preserve.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
181	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getCharno();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getCharno();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
182	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno()  +  1;  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno()  +  1;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno()  +  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
183	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno()  -  1;  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno()  -  1;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno()  -  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
184	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getLineno();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  sourceFile.getLineno();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
185	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getSource();  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getSource();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getSource();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
186	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileRootJsDocBuilder();  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileRootJsDocBuilder();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileRootJsDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
187	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFilesDocBuilder();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFilesDocBuilder();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFilesDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
188	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  ==  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()  ==  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
189	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
190	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve)&&  preserveInfo.length()  >  0)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve)&&  preserveInfo.length()  >  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve)&&  preserveInfo.length()  >  0)  {	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve)||    preserveInfo.length()    ==    0)    {    	non-compiled	[CE]  orphaned  case	21	None	replace
191	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelTextualBlock(token,  WhitespaceOption.NONE);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelTextualBlock(token,  WhitespaceOption.NONE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelTextualBlock(token,  WhitespaceOption.NONE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.NONE);    	non-compiled	[CE]  orphaned  case	15	None	replace
192	[BUG]  [BUGGY]  FilelevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length());  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FilelevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length());  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FilelevelJsDocBuilder  fileLevelJsDocBuilder  =  new  File(preserve.length());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    new    File(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	14	None	replace
193	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(true);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(true);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(true);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
194	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(token);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(token);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  getFileLevelJsDocBuilder(token);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    getFileLevelJsDocBuilder();    	non-compiled	[CE]  orphaned  case	23	None	replace
195	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
196	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
197	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.fileLevelJsDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
198	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
199	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  >=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  >=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  >=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    ||    fileLevelJsDocBuilder.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
200	[BUG]  [BUGGY]  if(fileLevelJsDocBuilders!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilders!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilders!=  null  &&  fileLevelJsDocBuilder.endsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    ||    fileLevelJsDocBuilder.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	4	None	replace
201	[BUG]  [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
202	[BUG]  [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append('n');  }	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
203	[BUG]  [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
204	[BUG]  [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  buffer  =  stream.getLineno();  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  buffer  =  stream.getLineno();  }  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  buffer  =  stream.getLineno();  }	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
205	[BUG]  [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(!isBracketedParam)  {  fileLevelJsDocBuilder.append(preserve);  }  else  {  fileLevelJsDocBuilder.append( "n ");  }	  fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	12	None	replace
206	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractFileLevelTextualBlock(token,  WhitespaceOption.PRESERVE);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
207	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE)+  1;  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE)+  1;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE)+  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
208	[BUG]  [BUGGY]  FileLevelJsDocBuilder.appendPath(preserve);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.appendPath(preserve);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.appendPath(preserve);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
209	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(line);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder.append(line);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder.append(line);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	17	None	replace
210	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.startsWith(preserve))  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.startsWith(preserve))  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.startsWith(preserve))  {	  if(fileLevelJsDocBuilder!=    null    &&    preserve.endsWith(preserve))    {    	non-compiled	[CE]  orphaned  case	6	None	replace
211	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
212	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
213	[BUG]  [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  JsDocToken.FIELD_NAME)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.FIELD_NAME)    {    	non-compiled	[CE]  orphaned  case	29	None	replace
214	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  fileLevelJsDocBuilder.append('n');  }	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  orphaned  case	38	None	replace
215	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve))  {  fileLevelJsDocBuilder.append('n');  }  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve))  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.startsWith(preserve))  {  fileLevelJsDocBuilder.append('n');  }	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  orphaned  case	38	None	replace
216	[BUG]  [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if  (fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0);	  if    (fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.endsWith(preserve);    	non-compiled	[CE]  orphaned  case	38	None	replace
217	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  &&  preserveInfo.token!=  JsDocToken.VALUE_STRING)  {	  if(fileLevelJsDocBuilder!=    null    &&    preserveInfo.length    >    0)    {    	non-compiled	[CE]  orphaned  case	31	None	replace
218	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()!=  0)  {  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()!=  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()!=  0)  {	  if(fileLevelJsDocBuilder    ==    null    ||    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
219	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()  >=  0)  {  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()  >=  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()  >=  0)  {	  if(fileLevelJsDocBuilder    ==    null    ||    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
220	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()  <=  0)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()  <=  0)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder  ==  null  ||  fileLevelJsDocBuilder.length()  <=  0)  {	  if(fileLevelJsDocBuilder    ==    null    ||    fileLevelJsDocBuilder.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	28	None	replace
221	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_STRING)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_STRING)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.VALUE_STRING)  {	  if    (preserve!=    null    ||    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
222	[BUG]  [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  preserveInfo.token  ==  JsDocToken.FIELD_NAME)  {	  if    (preserve!=    null    ||    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	10	None	replace
223	[BUG]  [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  &&  fileLevelJsDocBuilder!=  null)  {	  if    (preserve!=    null    &&    preserve.length()    >    0)    {    	non-compiled	[CE]  orphaned  case	3	None	replace
224	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "; ");  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  fileLevelJsDocBuilder.append( "; ");  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	fileLevelJsDocBuilder.append( "; ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  orphaned  case	16	None	replace
225	[BUG]  [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.token;  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.token;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  this.fileLevelJsDocBuilder.token;	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
226	[BUG]  [BUGGY]  JsDocToken  stream  =  stream.getCurrentToken();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  stream.getCurrentToken();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  stream.getCurrentToken();	  JsDocToken    stream    =    stream.getCharno();    	non-compiled	[CE]  orphaned  case	35	None	replace
227	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  archiveInfo.getParent();  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  archiveInfo.getParent();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  archiveInfo.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    sourceFile.getParent();    	non-compiled	[CE]  orphaned  case	22	None	replace
228	[BUG]  [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
229	[BUG]  [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(preserve  ==  null  ||  fileLevelJsDocBuilder!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
230	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.VALUE_NULL)  {  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.VALUE_NULL)  {  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	if(fileLevelJsDocBuilder!=  null  ||  fileLevelJsDocBuilder.length()!=  JsDocToken.VALUE_NULL)  {	  if(fileLevelJsDocBuilder    ==    null    ||    preserveInfo.token!=    JsDocToken.VALUE_NULL)    {    	non-compiled	[CE]  orphaned  case	30	None	replace
231	[BUG]  [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.token;  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.token;  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  this.fileLevelJsDocBuilder.token;	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
232	[BUG]  [BUGGY]  JSDocToken  stream  =  lineno.getLineno();  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  lineno.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  lineno.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
233	[BUG]  [BUGGY]  JSDocToken  stream  =  tokens.getLineno();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  tokens.getLineno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  tokens.getLineno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
234	[BUG]  [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.getCharno();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.getCharno();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JSDocToken  stream  =  this.fileLevelJsDocBuilder.getCharno();	  JSDocToken    stream    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	32	None	replace
235	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getCurrentNode();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getCurrentNode();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getCurrentNode();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
236	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getChildCount();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getChildCount();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getChildCount();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    stream.getLineno();    	non-compiled	[CE]  orphaned  case	24	None	replace
237	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.cloneTree();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.cloneTree();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.cloneTree();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
238	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.readLine();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
239	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevelJsDocBuilder();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevelJsDocBuilder();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getFileLevelJsDocBuilder();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
240	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  parser.getParent();  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  parser.getParent();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  parser.getParent();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
241	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getParentFile();  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getParentFile();  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  jsdocBuilder.getParentFile();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    jsdocBuilder.getParent();    	non-compiled	[CE]  orphaned  case	25	None	replace
242	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(token,  unreadToken);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  getStream(token,  unreadToken);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  getStream(token,  unreadToken);	  JsDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	37	None	replace
243	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(token,  buffer);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {      [BUGGY]  JsDocToken  stream  =  getStream(token,  buffer);  [BUGGY]      fileLevelJsDocBuilder.append(preserve);  }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	355	355	4	replace	JsDocToken  stream  =  getStream(token,  buffer);	  JsDocToken    stream    =    getStream(token);    	non-compiled	[CE]  orphaned  case	37	None	replace
