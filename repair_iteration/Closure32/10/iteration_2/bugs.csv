bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(builder  ==  null)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder  ==  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder  ==  null)  {	  if(builder!=    null)    {    	non-compiled	[CE]  	10	None	replace
2	[BUG]  [BUGGY]  if(builder!=  null  &&  token!=  null)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  &&  token!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  &&  token!=  null)  {	  if(builder!=    null)    {    	non-compiled	[CE]  	10	None	replace
3	[BUG]  [BUGGY]  if(line  ==  null)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  null)  {	  if(builder!=    null)    {    	non-compiled	[CE]  	10	None	replace
4	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  ||  jsdocBuilder.markText(token))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  ||  jsdocBuilder.markText(token))  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  ||  jsdocBuilder.markText(token))  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
5	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  ||  jsdocBuilder.markText(toString(token)))  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  ||  jsdocBuilder.markText(toString(token)))  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  ||  jsdocBuilder.markText(toString(token)))  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  if(jsdocBuilder  ==  null)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder  ==  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder  ==  null)  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  ||  jsdocBuilder.markText('  '))  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  ||  jsdocBuilder.markText('  '))  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  ||  jsdocBuilder.markText('  '))  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.markText(token))  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.markText(token))  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  jsdocBuilder.markText(token))  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);	      	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  jsdocBuilder.markText(token);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(token);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(token);	      	non-compiled	[CE]  	6	None	replace
11	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno);	      	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno);	      	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);	      	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endCharno);  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endCharno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(token,  line,  startLineno,  endCharno);	      	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  JsDocToken  token  =  stream.getRemainingJSDocLine();  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  JsDocToken  token  =  stream.getRemainingJSDocLine();  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	JsDocToken  token  =  stream.getRemainingJSDocLine();	      	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  if(line.length()  ==  0)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line.length()  ==  0)  {	  if(line.length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
17	[BUG]  [BUGGY]  if(line!=  null  ||  line.length()  >  0)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  ||  line.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  ||  line.length()  >  0)  {	  if(line.length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
18	[BUG]  [BUGGY]  if(line!=  null  &&  line.length()  >  0)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  line.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  line.length()  >  0)  {	  if(line.length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
19	[BUG]  [BUGGY]  if(line  ==  null  ||  line.length()  >  0)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  null  ||  line.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  null  ||  line.length()  >  0)  {	  if(line.length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
20	[BUG]  [BUGGY]  if(line.length()!=  0)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line.length()!=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line.length()!=  0)  {	  if(line.length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  if(line.length()  <=  0)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line.length()  <=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line.length()  <=  0)  {	  if(line.length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  if(line  ==  null  ||  toString(token)!=  null)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  null  ||  toString(token)!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  null  ||  toString(token)!=  null)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  if(line  ==  null  ||  token!=  null)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  null  ||  token!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  null  ||  token!=  null)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
24	[BUG]  [BUGGY]  if(line!=  null  ||  token.length()  ==  0)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  ||  token.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  ||  token.length()  ==  0)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  if(line  ==  null  ||  token.length()  ==  0)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  null  ||  token.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  null  ||  token.length()  ==  0)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  if(token  ==  null)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token  ==  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token  ==  null)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  if(token!=  null  ||  token.length()  ==  0)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  null  ||  token.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  null  ||  token.length()  ==  0)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
28	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if(builder.length()  >=  0)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder.length()  >=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder.length()  >=  0)  {	  if(builder.length()!=    0)    {    	non-compiled	[CE]  	4	None	replace
31	[BUG]  [BUGGY]  if(token.length()!=  0)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token.length()!=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token.length()!=  0)  {	  if(builder.length()!=    0)    {    	non-compiled	[CE]  	4	None	replace
32	[BUG]  [BUGGY]  if(builder.length()  <=  0)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder.length()  <=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder.length()  <=  0)  {	  if(builder.length()!=    0)    {    	non-compiled	[CE]  	4	None	replace
33	[BUG]  [BUGGY]  if(token.length()  ==  0)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token.length()  ==  0)  {	  if(builder.length()    ==    0)    {    	non-compiled	[CE]  	1	None	replace
34	[BUG]  [BUGGY]  if(buffer.length()  ==  0)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(buffer.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(buffer.length()  ==  0)  {	  if(builder.length()    ==    0)    {    	non-compiled	[CE]  	1	None	replace
35	[BUG]  [BUGGY]  if(builder.length()  ==  0  ||  toString(token)!=  null)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder.length()  ==  0  ||  toString(token)!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder.length()  ==  0  ||  toString(token)!=  null)  {	  if(builder.length()    ==    0)    {    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  if(endCharno  ==  startCharno)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno  ==  startCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno  ==  startCharno)  {	  if(startCharno    ==    endCharno)    {    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  if(line  ==  endCharno)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  endCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  endCharno)  {	  if(startCharno    ==    endCharno)    {    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  if(startLineno  ==  endLineno)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(startLineno  ==  endLineno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(startLineno  ==  endLineno)  {	  if(startCharno    ==    endCharno)    {    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  if(startCharno!=  endCharno)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(startCharno!=  endCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(startCharno!=  endCharno)  {	  if(startCharno    ==    endCharno)    {    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  if(endCharno  ==  startLineno)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno  ==  startLineno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno  ==  startLineno)  {	  if(startLineno    ==    startCharno)    {    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  if(startLineno  ==  endCharno)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(startLineno  ==  endCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(startLineno  ==  endCharno)  {	  if(startLineno    ==    startCharno)    {    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  if(startLineno!=  endLineno)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(startLineno!=  endLineno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(startLineno!=  endLineno)  {	  if(startLineno    ==    startCharno)    {    	non-compiled	[CE]  	13	None	replace
43	[BUG]  [BUGGY]  if(startLineno!=  endCharno)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(startLineno!=  endCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(startLineno!=  endCharno)  {	  if(startLineno    ==    startCharno)    {    	non-compiled	[CE]  	13	None	replace
44	[BUG]  [BUGGY]  if(endCharno  ==  endLineno)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno  ==  endLineno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno  ==  endLineno)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  if(endCharno  ==  0)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno  ==  0)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  if(endCharno!=  endLineno)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno!=  endLineno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno!=  endLineno)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  if(endCharno  =='')  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno  =='')  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno  =='')  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
48	[BUG]  [BUGGY]  if(builder!=  null  ||  builder.length()  >  0)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  ||  builder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  ||  builder.length()  >  0)  {	  if(builder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  if(builder  ==  null  &&  builder.length()  >  0)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder  ==  null  &&  builder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder  ==  null  &&  builder.length()  >  0)  {	  if(builder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	7	None	replace
50	[BUG]  [BUGGY]  if(builder!=  null  &&  builder.length()  ==  0)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  &&  builder.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  &&  builder.length()  ==  0)  {	  if(builder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	7	None	replace
51	[BUG]  [BUGGY]  if(builder!=  null  &&  builder.length()  <=  0)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  &&  builder.length()  <=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  &&  builder.length()  <=  0)  {	  if(builder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  if(token!=  null  &&  builder.length()  >  0)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  null  &&  builder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  null  &&  builder.length()  >  0)  {	  if(builder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  ||  builder.length()  >  0)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  ||  builder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  ||  builder.length()  >  0)  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
54	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  builder.length()  ==  0)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  builder.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  builder.length()  ==  0)  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
55	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  builder.length()  <=  0)  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  builder.length()  <=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  builder.length()  <=  0)  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  builder.length()  >=  0)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  builder.length()  >=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  builder.length()  >=  0)  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  if(jsdocBuilder  ==  null  &&  builder.length()  >  0)  {  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder  ==  null  &&  builder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder  ==  null  &&  builder.length()  >  0)  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
58	[BUG]  [BUGGY]  if(endCharno!=  0)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno!=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno!=  0)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  if(endCharno  >=  0)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno  >=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno  >=  0)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
60	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.length()  >  0)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  jsdocBuilder.length()  >  0)  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  fileLevelJsDocBuilder.length()  >  0)  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  if(token!=  NO_UNREAD_TOKEN)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  NO_UNREAD_TOKEN)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  NO_UNREAD_TOKEN)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  if(token  ==  NO_UNREAD_TOKEN)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token  ==  NO_UNREAD_TOKEN)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token  ==  NO_UNREAD_TOKEN)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  if(endLineno  ==  startCharno)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endLineno  ==  startCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endLineno  ==  startCharno)  {	  if(startLineno    ==    startCharno)    {    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  if(builder!=  null  &&  builder.length()!=  0)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  &&  builder.length()!=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  &&  builder.length()!=  0)  {	  if(builder.length()!=    0)    {    	non-compiled	[CE]  	4	None	replace
66	[BUG]  [BUGGY]  if(jsdocBuilder.length()  ==  0)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder.length()  ==  0)  {	  if(builder.length()!=    0)    {    	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno);	      	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  if(stream.getRemainingJSDocLine()  ==  0)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(stream.getRemainingJSDocLine()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(stream.getRemainingJSDocLine()  ==  0)  {	  if(builder.length()    ==    0)    {    	non-compiled	[CE]  	1	None	replace
69	[BUG]  [BUGGY]  if(stream.getRemainingJSDocLine()!=  0)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(stream.getRemainingJSDocLine()!=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(stream.getRemainingJSDocLine()!=  0)  {	  if(builder.length()    ==    0)    {    	non-compiled	[CE]  	1	None	replace
70	[BUG]  [BUGGY]  if(line  >=  null)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  >=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  >=  null)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
71	[BUG]  [BUGGY]  if(line  ==  endLineno)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  endLineno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  endLineno)  {	  if(startCharno    ==    endCharno)    {    	non-compiled	[CE]  	5	None	replace
72	[BUG]  [BUGGY]  if(builder!=  null  &&  builder.length()  >=  0)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  &&  builder.length()  >=  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  &&  builder.length()  >=  0)  {	  if(builder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  if(line  ==  startCharno)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line  ==  startCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line  ==  startCharno)  {	  if(startLineno    ==    startCharno)    {    	non-compiled	[CE]  	13	None	replace
74	[BUG]  [BUGGY]  if(line!=  endLineno)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  endLineno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  endLineno)  {	  if(startLineno    ==    startCharno)    {    	non-compiled	[CE]  	13	None	replace
75	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  null)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  token!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  token!=  null)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
77	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  token!=  JsDocToken.END_ARRAY)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
78	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_NULL)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.VALUE_NULL)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  token!=  JsDocToken.VALUE_NULL)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
79	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  token!=  JsDocToken.START_TOKEN)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
80	[BUG]  [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  token!=  JsDocToken.FIELD_NAME)  {	  if(line!=    null)    {    	non-compiled	[CE]  	12	None	replace
81	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.markText())  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.markText())  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  jsdocBuilder.markText())  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
82	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.markText('  '))  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.markText('  '))  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  jsdocBuilder.markText('  '))  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.isLineno())  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  jsdocBuilder.isLineno())  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  jsdocBuilder.isLineno())  {	  if(jsdocBuilder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	11	None	replace
84	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endCharno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endCharno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endCharno);	      	non-compiled	[CE]  	6	None	replace
85	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno);  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  endCharno);	      	non-compiled	[CE]  	6	None	replace
86	[BUG]  [BUGGY]  if(endCharno!=  endCharno)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno!=  endCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno!=  endCharno)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
87	[BUG]  [BUGGY]  if(line!=  endCharno)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  endCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  endCharno)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
88	[BUG]  [BUGGY]  if(endCharno!=  startCharno)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(endCharno!=  startCharno)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(endCharno!=  startCharno)  {	  if(endCharno    ==    endCharno)    {    	non-compiled	[CE]  	2	None	replace
89	[BUG]  [BUGGY]  if(line!=  null  &&  builder.length()  >  0)  {  [CE]  [FE]        ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line!=  null  &&  builder.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line!=  null  &&  builder.length()  >  0)  {	  if(builder!=    null    &&    builder.length()    >    0)    {    	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  if(line.length()  >  0  ||  toString(token)!=  null)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(line.length()  >  0  ||  toString(token)!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(line.length()  >  0  ||  toString(token)!=  null)  {	  if(line.length()    >    0)    {    	non-compiled	[CE]  	3	None	replace
91	[BUG]  [BUGGY]  if(token!=  null  &&  token.length()  >  0)  {  [CE]  [FE]          ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  null  &&  token.length()  >  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  null  &&  token.length()  >  0)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
92	[BUG]  [BUGGY]  if(token!=  null  &&  token.equals( " "))  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  null  &&  token.equals( " "))  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  null  &&  token.equals( " "))  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
93	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
94	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  JsDocToken.START_TOKEN)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
95	[BUG]  [BUGGY]  if(token!=  null  &&  token.startsWith( "- "))  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  null  &&  token.startsWith( "- "))  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  null  &&  token.startsWith( "- "))  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
96	[BUG]  [BUGGY]  if(token!=  null  &&  token.charAt(0)!='')  {  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  null  &&  token.charAt(0)!='')  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  null  &&  token.charAt(0)!='')  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  if(token!=  null  &&  token.length()  ==  0)  {  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(token!=  null  &&  token.length()  ==  0)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(token!=  null  &&  token.length()  ==  0)  {	  if(token!=    null)    {    	non-compiled	[CE]  	8	None	replace
98	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [CE]  [FE]            ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  fileLevelJsDocBuilder!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  fileLevelJsDocBuilder!=  null)  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
99	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
100	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  token!=  JsDocToken.END_ARRAY)  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
101	[BUG]  [BUGGY]  if(jsdocBuilder!=  null  &&  token!=  null)  {  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(jsdocBuilder!=  null  &&  token!=  null)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(jsdocBuilder!=  null  &&  token!=  null)  {	  if(jsdocBuilder!=    null)    {    	non-compiled	[CE]  	9	None	replace
102	[BUG]  [BUGGY]  if(builder!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [CE]  [FE]              ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  &&  token!=  JsDocToken.VALUE_STRING)  {	  if(builder!=    null)    {    	non-compiled	[CE]  	10	None	replace
103	[BUG]  [BUGGY]  if(builder!=  null  &&  token!=  JsDocToken.END_ARRAY)  {  [CE]  [FE]                ComparisonFailure    [CONTEXT]    int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }    [BUGGY]  if(builder!=  null  &&  token!=  JsDocToken.END_ARRAY)  {  [BUGGY]    builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1414	1414	4	replace	if(builder!=  null  &&  token!=  JsDocToken.END_ARRAY)  {	  if(builder!=    null)    {    	non-compiled	[CE]  	10	None	replace
