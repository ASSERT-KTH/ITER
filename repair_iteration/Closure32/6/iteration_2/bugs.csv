bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);	  token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);	  token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "n ";  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "n ";  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + "n ";	  token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  +  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  +  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  +  1;	  token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
6	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1);	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
8	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
9	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDo  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDo  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDo	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.token();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token();	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.next();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.next();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.next();	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
12	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getToken()  +  1;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.getToken()  +  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getToken()  +  1;	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  token  =  next().getToken();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  next().getToken();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getToken();	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
17	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  true);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
18	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
19	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(preserve);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(preserve);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(preserve);	  token    =    fileLevelJsDocBuilder.append(preserveInfo);    	non-compiled	[CE]  	11	None	replace
20	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno);	  token    =    fileLevelJsDocBuilder.append(preserveInfo);    	non-compiled	[CE]  	11	None	replace
21	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('n');  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append('n');  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('n');	  token    =    fileLevelJsDocBuilder.append(preserveInfo);    	non-compiled	[CE]  	11	None	replace
22	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(type);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(type);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(type);	  token    =    fileLevelJsDocBuilder.append(preserveInfo);    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(line);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(line);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(line);	  token    =    fileLevelJsDocBuilder.append(preserveInfo);    	non-compiled	[CE]  	11	None	replace
24	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(lineno);	  token    =    fileLevelJsDocBuilder.toString(preserve);    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ');  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ');  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('  ');	  token    =    fileLevelJsDocBuilder.toString(preserve);    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.length()  +  1;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.length()  +  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.length()  +  1;	  token    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.length()  -  1;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.length()  -  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.length()  -  1;	  token    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.length()  +  2;  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.length()  +  2;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.length()  +  2;	  token    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder();	  token    =    next();    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.first();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.first();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.first();	  token    =    next();    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getValue();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.getValue();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getValue();	  token    =    next();    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();	      	non-compiled	[CE]  	7	None	replace
33	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();	      	non-compiled	[CE]  	7	None	replace
34	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno();	      	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	      	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'n');  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'n');  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'n');	      	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-');  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-');  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-');	      	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'r');  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'r');  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'r');	      	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString.toString());  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString.toString());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(typeString.toString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString());  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.toString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  1;  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  +  1;	  token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  -  1;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.token  -  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  -  1;	  token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	1	None	replace
46	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ");  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( "n ");	  token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.trim();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  this.fileLevelJsDocBuilder.trim();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.trim();	  token    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	4	None	replace
48	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.trim()  +  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.trim()  +  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.trim()  +  1;	  token    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  3);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  3);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  3);	  token    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(type);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.toString(type);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(type);	  token    =    fileLevelJsDocBuilder.toString(preserve);    	non-compiled	[CE]  	12	None	replace
52	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(typeString);	  token    =    fileLevelJsDocBuilder.toString(preserve);    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  3);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  3);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  3);	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	      	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	      	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();	      	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	      	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  token    =    fileLevelJsDocBuilder.append(preserveInfo);    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.reset();  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.reset();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.reset();	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
61	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  token  =  next().toString();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  next().toString();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().toString();	  token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.toString();  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  this.fileLevelJsDocBuilder.toString();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.toString();	  token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocInfo);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocInfo);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocInfo);	  token    =    fileLevelJsDocBuilder.append(preserveInfo);    	non-compiled	[CE]  	11	None	replace
65	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
66	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
67	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    	non-compiled	[CE]  	10	None	replace
68	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  null;  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  null;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  null;	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING;  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING;	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
71	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.getToken();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  this.fileLevelJsDocBuilder.getToken();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.getToken();	  token    =    fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	5	None	replace
72	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(fileOverview);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.toString(fileOverview);  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(fileOverview);	  token    =    fileLevelJsDocBuilder.toString(preserve);    	non-compiled	[CE]  	12	None	replace
73	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.length();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  this.fileLevelJsDocBuilder.length();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken();	      	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.toString();	      	non-compiled	[CE]  	7	None	replace
76	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getParent();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getParent();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getParent();	      	non-compiled	[CE]  	7	None	replace
77	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.getState();	      	non-compiled	[CE]  	7	None	replace
78	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.next();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.next();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.next();	      	non-compiled	[CE]  	7	None	replace
79	[BUG]  [BUGGY]  token  =  next().trim();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  next().trim();  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().trim();	  token    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	4	None	replace
80	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1;  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }    [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1;  [BUGGY]    continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  1;	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	9	None	replace
