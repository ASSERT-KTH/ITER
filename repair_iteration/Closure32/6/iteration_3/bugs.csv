bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getNext();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getNext();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getNext();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	33	None	replace
2	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.next();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.next();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.next();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	33	None	replace
3	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.cloneTree();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.cloneTree();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.cloneTree();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	33	None	replace
4	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.clone();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.clone();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.clone();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	33	None	replace
5	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.removeFirst();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.removeFirst();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.removeFirst();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  2;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  2;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  +  2;	  token    =    fileLevelJsDocBuilder.token    +    1;    	non-compiled	[CE]  	44	None	replace
7	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  3;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  3;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  +  3;	  token    =    fileLevelJsDocBuilder.token    +    1;    	non-compiled	[CE]  	44	None	replace
8	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  4;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  4;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  +  4;	  token    =    fileLevelJsDocBuilder.token    +    1;    	non-compiled	[CE]  	44	None	replace
9	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  /  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  /  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  /  1;	  token    =    fileLevelJsDocBuilder.token    +    1;    	non-compiled	[CE]  	44	None	replace
10	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(next());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(next());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(next());	  token    =    fileLevelJsDocBuilder.reset();    	non-compiled	[CE]  	60	None	replace
11	[BUG]  [BUGGY]  token  =  next().getLineno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().getLineno();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getLineno();	  token    =    next().getToken();    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  token  =  next().getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().getCharno();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getCharno();	  token    =    next().getToken();    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  token  =  next().getToken()  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().getToken()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getToken()  +  1;	  token    =    next().getToken();    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  token  =  next().token();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().token();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().token();	  token    =    next().getToken();    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  token  =  next().getToken()  -  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().getToken()  -  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getToken()  -  1;	  token    =    next().getToken();    	non-compiled	[CE]  	13	None	replace
16	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  lineLevelJsDocBuilder.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  lineLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  lineLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    3);    	non-compiled	[CE]  	50	None	replace
17	[BUG]  [BUGGY]  token  =  fileLevelJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    3);    	non-compiled	[CE]  	50	None	replace
18	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  filelevelJsDocBuilder.length());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  filelevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  filelevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    3);    	non-compiled	[CE]  	50	None	replace
19	[BUG]  [BUGGY]  token  =  filelevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  filelevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  filelevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    3);    	non-compiled	[CE]  	50	None	replace
20	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getNext();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getNext();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getNext();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	76	None	replace
21	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getState();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getState();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getState();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	76	None	replace
22	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getSegment();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getSegment();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getSegment();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	76	None	replace
23	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(reserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(reserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(reserve);	  token    =    fileLevelJsDocBuilder.toString(type);    	non-compiled	[CE]  	51	None	replace
24	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(type,  preserve);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(type,  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(type,  preserve);	  token    =    fileLevelJsDocBuilder.toString(type);    	non-compiled	[CE]  	51	None	replace
25	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getValue()  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.getValue()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getValue()  +  1;	  token    =    fileLevelJsDocBuilder.getValue();    	non-compiled	[CE]  	31	None	replace
26	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getLineno();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.getLineno();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getLineno();	  token    =    fileLevelJsDocBuilder.getValue();    	non-compiled	[CE]  	31	None	replace
27	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getLength();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.getLength();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getLength();	  token    =    fileLevelJsDocBuilder.getValue();    	non-compiled	[CE]  	31	None	replace
28	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getName();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.getName();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getName();	  token    =    fileLevelJsDocBuilder.getValue();    	non-compiled	[CE]  	31	None	replace
29	[BUG]  [BUGGY]  token  -=  fileLevelJsDocBuilder.length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  -=  fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  -=  fileLevelJsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    +    2;    	non-compiled	[CE]  	28	None	replace
30	[BUG]  [BUGGY]  token  =  filelevelJsDocBuilder.length();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  filelevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  filelevelJsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    +    2;    	non-compiled	[CE]  	28	None	replace
31	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(type.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(type.toString());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
32	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(typeString.toString());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(typeString.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(typeString.toString());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
33	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
34	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(line);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(line);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(line);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
35	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
36	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno.toString());  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(lineno.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(lineno.toString());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
37	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno  +  1);	  token    =    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	20	None	replace
38	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno  -  1);	  token    =    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	20	None	replace
39	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno,  charno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno,  charno);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno,  charno);	  token    =    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	20	None	replace
40	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  2);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  2);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno  +  2);	  token    =    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	20	None	replace
41	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  4);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  4);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno  +  4);	  token    =    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	20	None	replace
42	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(lineno  +  1);	  token    =    fileLevelJsDocBuilder.toString(lineno);    	non-compiled	[CE]  	24	None	replace
43	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(lineno  -  1);	  token    =    fileLevelJsDocBuilder.toString(lineno);    	non-compiled	[CE]  	24	None	replace
44	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno,  charno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno,  charno);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(lineno,  charno);	  token    =    fileLevelJsDocBuilder.toString(lineno);    	non-compiled	[CE]  	24	None	replace
45	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  +  4);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  +  4);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(lineno  +  4);	  token    =    fileLevelJsDocBuilder.toString(lineno);    	non-compiled	[CE]  	24	None	replace
46	[BUG]  [BUGGY]  token  =  next().getValue();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().getValue();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getValue();	  token    =    next().trim();    	non-compiled	[CE]  	79	None	replace
47	[BUG]  [BUGGY]  token  =  next().substring(1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().substring(1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().substring(1);	  token    =    next().trim();    	non-compiled	[CE]  	79	None	replace
48	[BUG]  [BUGGY]  token  =  next().next();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().next();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().next();	  token    =    next().trim();    	non-compiled	[CE]  	79	None	replace
49	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.token()  :  JsDocToken.FIELD_NAME;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.token()  :  JsDocToken.FIELD_NAME;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.token()  :  JsDocToken.FIELD_NAME;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
50	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME  +  1;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
51	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.START_OBJECT;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.START_OBJECT;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.START_OBJECT;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
52	[BUG]  [BUGGY]  token  =  next()?  JsDocToken.FIELD_NAME  :  fileLevelJsDocBuilder.getToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  JsDocToken.FIELD_NAME  :  fileLevelJsDocBuilder.getToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  JsDocToken.FIELD_NAME  :  fileLevelJsDocBuilder.getToken();	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
53	[BUG]  [BUGGY]  token  =  next()?  JsDocToken.FIELD_NAME  :  JsDocToken.FIELD_NAME;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  JsDocToken.FIELD_NAME  :  JsDocToken.FIELD_NAME;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  JsDocToken.FIELD_NAME  :  JsDocToken.FIELD_NAME;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
54	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)+  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)+  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)+  1;	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+    1;    	non-compiled	[CE]  	80	None	replace
55	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)+  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)+  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  +  1)+  1;	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+    1;    	non-compiled	[CE]  	80	None	replace
56	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  2;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  2;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+  2;	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+    1;    	non-compiled	[CE]  	80	None	replace
57	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())/  1;	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+    1;    	non-compiled	[CE]  	80	None	replace
58	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.last();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.last();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.last();	  token    =    fileLevelJsDocBuilder.first();    	non-compiled	[CE]  	30	None	replace
59	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.token()  :  null;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.token()  :  null;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.token()  :  null;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
60	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  preserve;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  preserve;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  preserve;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
61	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.END_OBJECT;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.END_OBJECT;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.END_OBJECT;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
62	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
63	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.END_ARRAY;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.END_ARRAY;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.END_ARRAY;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
64	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeNode);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeNode);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(typeNode);	  token    =    fileLevelJsDocBuilder.append(typeString);    	non-compiled	[CE]  	52	None	replace
65	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(reserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(reserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(reserve);	  token    =    fileLevelJsDocBuilder.append(typeString);    	non-compiled	[CE]  	52	None	replace
66	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(generateJSTypeExpression);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(generateJSTypeExpression);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(generateJSTypeExpression);	  token    =    fileLevelJsDocBuilder.append(typeString);    	non-compiled	[CE]  	52	None	replace
67	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0),  preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0),  preserve);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
68	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));  }	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
69	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1));	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
70	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(1));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(1));	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
71	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.trim()  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.trim()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.trim()  +  1;	  token    =    this.fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	47	None	replace
72	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.substring(1);	  token    =    this.fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	47	None	replace
73	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(0,  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(0,  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.substring(0,  1);	  token    =    this.fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	47	None	replace
74	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve  +  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
75	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  buffer);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  buffer);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  buffer);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
76	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  line);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  line);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  line);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
77	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  preserve  -  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
78	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  preserve);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  preserve);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
79	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  +  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
80	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getCharno());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
81	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  -  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
82	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLineno());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLineno());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLineno());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
83	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  +  2);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  +  2);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength()  +  2);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
84	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(''+  preserve);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(''+  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(''+  preserve);	  token    =    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	25	None	replace
85	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ',  preserve);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ',  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('  ',  preserve);	  token    =    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	25	None	replace
86	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ').append(lineno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ').append(lineno);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('  ').append(lineno);	  token    =    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	25	None	replace
87	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	32	None	replace
88	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserve.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	32	None	replace
89	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	32	None	replace
90	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	32	None	replace
91	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  + "n ";  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  + "n ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  + "n ";	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	32	None	replace
92	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "/ ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "/ ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + "/ ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
93	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "   ";  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "   ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + "   ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
94	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ": ";  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ": ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + ": ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
95	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ", ";  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ", ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + ", ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
96	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ";n ";  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ";n ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + ";n ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
97	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	17	None	replace
98	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1),  false);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	17	None	replace
99	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  null);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  null);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	17	None	replace
100	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(2),  true);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(2),  true);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(2),  true);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	17	None	replace
101	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.charAt(0),  false);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.charAt(0),  false);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.charAt(0),  false);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	17	None	replace
102	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  false);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	17	None	replace
103	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverview);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	59	None	replace
104	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(remainder);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(remainder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(remainder);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	59	None	replace
105	[BUG]  [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  this.fileLevelJsDocBuilder.toString();	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
106	[BUG]  [BUGGY]  JsDocToken  stream  =  preserve.toString();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  preserve.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  preserve.toString();	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
107	[BUG]  [BUGGY]  JsDocToken  stream  =  jsdocBuilder.toString();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  jsdocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  jsdocBuilder.toString();	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
108	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString(),  preserve);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.toString(),  preserve);	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
109	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString()  + "n ";  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString()  + "n ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.toString()  + "n ";	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
110	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.trim();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.trim();	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
111	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString()  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString()  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.toString()  +  1);	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
112	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.substring(1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.substring(1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.substring(1));	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
113	[BUG]  [BUGGY]  if(lineno!=  null)  {  token  =  fileLevelJsDocBuilder.append(lineno.toString());  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(lineno!=  null)  {  token  =  fileLevelJsDocBuilder.append(lineno.toString());  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(lineno!=  null)  {  token  =  fileLevelJsDocBuilder.append(lineno.toString());  }	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
114	[BUG]  [BUGGY]  token  =  lineno.toString();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  lineno.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  lineno.toString();	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
115	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString(),  preserve);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.toString(),  preserve);	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
116	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString()).trim();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString()).trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.toString()).trim();	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
117	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  1));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));    	non-compiled	[CE]  	16	None	replace
118	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  2));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  2));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  2));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));    	non-compiled	[CE]  	16	None	replace
119	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  lineno));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));    	non-compiled	[CE]  	16	None	replace
120	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.toString()  + "n ";  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.toString()  + "n ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.toString()  + "n ";	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
121	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.toString()  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.toString()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.toString()  +  1;	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
122	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.append(preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.append(preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.append(preserve);	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
123	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1);	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	49	None	replace
124	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  4);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  4);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  4);	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	49	None	replace
125	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  2);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  2);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  2);	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	49	None	replace
126	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
127	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
128	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.length()  ==  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  ||  fileLevelJsDocBuilder.length()  ==  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	||  fileLevelJsDocBuilder.length()  ==  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
129	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.length()!=  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  ||  fileLevelJsDocBuilder.length()!=  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	||  fileLevelJsDocBuilder.length()!=  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
130	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
131	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(file  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(file  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(file	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
132	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
133	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
134	[BUG]  [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	TokenBuffer  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
135	[BUG]  [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.length();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  = " "  +  fileLevelJsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    -    1;    	non-compiled	[CE]  	27	None	replace
136	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.trim().length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.trim().length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.trim().length();	  token    =    fileLevelJsDocBuilder.length()    -    1;    	non-compiled	[CE]  	27	None	replace
137	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
138	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  +  1));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
139	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  1));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  1));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
140	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
141	[BUG]  [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
142	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2),  preserve);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2),  preserve);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));    	non-compiled	[CE]  	67	None	replace
143	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(3));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(3));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(3));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));    	non-compiled	[CE]  	67	None	replace
144	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2)  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2)  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2)  +  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));    	non-compiled	[CE]  	67	None	replace
145	[BUG]  [BUGGY]  token  =  next().toString()  + "n ";  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().toString()  + "n ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().toString()  + "n ";	  token    =    next().toString();    	non-compiled	[CE]  	62	None	replace
146	[BUG]  [BUGGY]  token  =  next().toString()  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().toString()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().toString()  +  1;	  token    =    next().toString();    	non-compiled	[CE]  	62	None	replace
147	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('',  '');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('',  '');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('',  '');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
148	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('0',  'n');  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('0',  'n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('0',  'n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
149	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  'n');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  'n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  'n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
150	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  '/');  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  '/');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  '/');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
151	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('[',  ']');  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('[',  ']');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('[',  ']');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
152	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( ";n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( ";n ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( ";n ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
153	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "# ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "# ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( "# ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
154	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "null ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "null ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( "null ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
155	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "[ ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "[ ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( "[ ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
156	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "/ ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "/ ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( "/ ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
157	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( ",   ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( ",   ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( ",   ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
158	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  -  2;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  -  2;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  -  2;	  token    =    fileLevelJsDocBuilder.token    -    1;    	non-compiled	[CE]  	45	None	replace
159	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  -  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  -  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  -  1;	  token    =    fileLevelJsDocBuilder.token    -    1;    	non-compiled	[CE]  	45	None	replace
160	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.length  -  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.length  -  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.length  -  1;	  token    =    fileLevelJsDocBuilder.token    -    1;    	non-compiled	[CE]  	45	None	replace
161	[BUG]  [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  = " "  +  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    +    1);    	non-compiled	[CE]  	7	None	replace
162	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder(next());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder(next());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder(next());	  token    =    fileLevelJsDocBuilder();    	non-compiled	[CE]  	29	None	replace
163	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder(true);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder(true);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder(true);	  token    =    fileLevelJsDocBuilder();    	non-compiled	[CE]  	29	None	replace
164	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('#');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('#');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('#');	  token    =    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	21	None	replace
165	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('$');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('$');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('$');	  token    =    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	21	None	replace
166	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('-');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('-');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('-');	  token    =    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	21	None	replace
167	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('N');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('N');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('N');	  token    =    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	21	None	replace
168	[BUG]  [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    3);    	non-compiled	[CE]  	54	None	replace
169	[BUG]  [BUGGY]  token  =  fileLevelJSDocBuilder.charAt(fileLevelJsDocBuilder.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJSDocBuilder.charAt(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJSDocBuilder.charAt(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    3);    	non-compiled	[CE]  	54	None	replace
170	[BUG]  [BUGGY]  token  =  jsdocBuilder.next();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  jsdocBuilder.next();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  jsdocBuilder.next();	  token    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	11	None	replace
171	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(precedence);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(precedence);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(precedence);	  token    =    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	19	None	replace
172	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText()  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText()  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText()  +  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());    	non-compiled	[CE]  	40	None	replace
173	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  preserve);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  preserve);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());    	non-compiled	[CE]  	40	None	replace
174	[BUG]  [BUGGY]  token  =  filelevelJsDocBuilder.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  filelevelJsDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  filelevelJsDocBuilder.toString();	  token    =    fileLevelJsDocBuilder.toString()    +    1;    	non-compiled	[CE]  	4	None	replace
175	[BUG]  [BUGGY]  token  =  fileLevelJAsDocBuilder.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJAsDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJAsDocBuilder.toString();	  token    =    fileLevelJsDocBuilder.toString()    +    1;    	non-compiled	[CE]  	4	None	replace
176	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  lineNumber.length()  -  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  lineNumber.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  lineNumber.length()  -  1);	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1);    	non-compiled	[CE]  	1	None	replace
177	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(offset);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(offset);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(offset);	  token    =    fileLevelJsDocBuilder.toString(fileOverview);    	non-compiled	[CE]  	72	None	replace
178	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(archive);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(archive);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(archive);	  token    =    fileLevelJsDocBuilder.toString(fileOverview);    	non-compiled	[CE]  	72	None	replace
179	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
180	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
181	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDo  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDo  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDo	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
182	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDocBuild  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDocBuild  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJsDocBuild	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
183	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJs  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJs  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2);  }  else  {  System.arraycopy(fileLevelJsDocBuilder,  0,  fileLevelJs	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
184	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getToken()  -  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.getToken()  -  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getToken()  -  1;	  token    =    fileLevelJsDocBuilder.getToken()    +    1;    	non-compiled	[CE]  	12	None	replace
185	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getToken()  /  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.getToken()  /  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getToken()  /  1;	  token    =    fileLevelJsDocBuilder.getToken()    +    1;    	non-compiled	[CE]  	12	None	replace
186	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim()  +  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	57	None	replace
187	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.trim();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	57	None	replace
188	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.length();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.length();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	57	None	replace
189	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
190	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
191	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
192	[BUG]  [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
193	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.nextToken();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.nextToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.nextToken();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
194	[BUG]  [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.getCurrentToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  this.fileLevelJsDocBuilder.getCurrentToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  this.fileLevelJsDocBuilder.getCurrentToken();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
195	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken()  +  1;	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
196	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.reset();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.reset();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.reset();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
197	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken(),  preserve);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getCurrentToken(),  preserve);	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
198	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  }	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
199	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(state);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(state);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(state);	  token    =    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
200	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getState());	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
201	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.reset();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.reset();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.reset();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
202	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.createState();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.createState();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.createState();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
203	[BUG]  [BUGGY]  state  =  fileLevelJsDocBuilder.getState();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  state  =  fileLevelJsDocBuilder.getState();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	state  =  fileLevelJsDocBuilder.getState();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
204	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getType();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.getType();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.getType();	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
205	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState(true);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.getState(true);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.getState(true);	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
206	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.next();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.next();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.next();	  token    =    this.fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	71	None	replace
207	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.token();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.token();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.token();	  token    =    this.fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	71	None	replace
208	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('',  'r');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('',  'r');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('',  'r');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
209	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('0',  'r');  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('0',  'r');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('0',  'r');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
210	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  'r');  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  'r');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  'r');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
211	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  'r');  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  'r');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  'r');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
212	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('[',  'r');  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('[',  'r');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('[',  'r');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
213	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-');  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace(',',    '-');    	non-compiled	[CE]  	37	None	replace
214	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '+');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '+');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '+');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace(',',    '-');    	non-compiled	[CE]  	37	None	replace
215	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '/');  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '/');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '/');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace(',',    '-');    	non-compiled	[CE]  	37	None	replace
216	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-')+  1;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-')+  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace(',',  '-')+  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace(',',    '-');    	non-compiled	[CE]  	37	None	replace
217	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  if(fileLevelJsDocBuilder!=    null)    {    token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    }    	non-compiled	[CE]  	66	None	replace
218	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  ||  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	||  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  if(fileLevelJsDocBuilder!=    null)    {    token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    }    	non-compiled	[CE]  	66	None	replace
219	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  if(fileLevelJsDocBuilder!=    null)    {    token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    }    	non-compiled	[CE]  	66	None	replace
220	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(preserve.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(preserve.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(preserve.toString());	  token    =    fileLevelJsDocBuilder.append(typeString.toString());    	non-compiled	[CE]  	41	None	replace
221	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString.substring(1));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString.substring(1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(typeString.substring(1));	  token    =    fileLevelJsDocBuilder.append(typeString.toString());    	non-compiled	[CE]  	41	None	replace
222	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeNode.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeNode.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(typeNode.toString());	  token    =    fileLevelJsDocBuilder.append(typeString.toString());    	non-compiled	[CE]  	41	None	replace
223	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(type.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(type.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(type.toString());	  token    =    fileLevelJsDocBuilder.append(typeString.toString());    	non-compiled	[CE]  	41	None	replace
224	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString.trim());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(typeString.trim());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(typeString.trim());	  token    =    fileLevelJsDocBuilder.append(typeString.toString());    	non-compiled	[CE]  	41	None	replace
225	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(line  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(line  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(line  +  1);	  token    =    fileLevelJsDocBuilder.append(line);    	non-compiled	[CE]  	23	None	replace
226	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(line).toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(line).toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(line).toString();	  token    =    fileLevelJsDocBuilder.append(line);    	non-compiled	[CE]  	23	None	replace
227	[BUG]  [BUGGY]  token  :  fileLevelJsDocBuilder.length();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  :  fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  :  fileLevelJsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    +    1;    	non-compiled	[CE]  	26	None	replace
228	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.length()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.length()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.length()  +  1;	  token    =    this.fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	73	None	replace
229	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.length()  -  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.length()  -  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.length()  -  1;	  token    =    this.fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	73	None	replace
230	[BUG]  [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.trim();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  = " "  +  fileLevelJsDocBuilder.trim();	  token    =    fileLevelJsDocBuilder.trim()    +    1;    	non-compiled	[CE]  	48	None	replace
231	[BUG]  [BUGGY]  token  -=  fileLevelJsDocBuilder.trim();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  -=  fileLevelJsDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  -=  fileLevelJsDocBuilder.trim();	  token    =    fileLevelJsDocBuilder.trim()    +    1;    	non-compiled	[CE]  	48	None	replace
232	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(typeString.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(typeString.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(typeString.toString());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
233	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
234	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
235	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  +  1);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
236	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.start();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.start();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.start();	  JsDocToken    stream    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	78	None	replace
237	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getFile();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getFile();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getFile();	  JsDocToken    stream    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	78	None	replace
238	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append('n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.append('n');	  JsDocToken    stream    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	78	None	replace
239	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getCharno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getCharno();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getCharno();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getLineno();    	non-compiled	[CE]  	34	None	replace
240	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno()  +  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno()  +  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getLineno();    	non-compiled	[CE]  	34	None	replace
241	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno()  -  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno()  -  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getLineno()  -  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getLineno();    	non-compiled	[CE]  	34	None	replace
242	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.reset();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getLineno();    	non-compiled	[CE]  	34	None	replace
243	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.toString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	43	None	replace
244	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  -  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	43	None	replace
245	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  /  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  /  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()  /  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	43	None	replace
246	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(type);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(type);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
247	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(jsdocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(jsdocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(jsdocBuilder);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
248	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(lineno);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(lineno);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
249	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(generateJSTypeExpression);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(generateJSTypeExpression);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(generateJSTypeExpression);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
250	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append('n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append('n');	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
251	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
252	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.token()  :  JsDocToken.VALUE_STRING;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.token()  :  JsDocToken.VALUE_STRING;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.token()  :  JsDocToken.VALUE_STRING;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.VALUE_STRING;    	non-compiled	[CE]  	70	None	replace
253	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_NUMBER;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_NUMBER;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_NUMBER;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.VALUE_STRING;    	non-compiled	[CE]  	70	None	replace
254	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.toString()  :  JsDocToken.VALUE_STRING;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.toString()  :  JsDocToken.VALUE_STRING;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.toString()  :  JsDocToken.VALUE_STRING;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.VALUE_STRING;    	non-compiled	[CE]  	70	None	replace
255	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.getText());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.getText());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.getText());	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	39	None	replace
256	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString(),  preserve);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString(),  preserve);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	39	None	replace
257	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString()  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString()  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString()  +  1);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	39	None	replace
258	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	56	None	replace
259	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	56	None	replace
260	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(type);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(type);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(type);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	56	None	replace
261	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverview);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverview);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverview);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	56	None	replace
262	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(remainder);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(remainder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(remainder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	56	None	replace
263	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(filelevelJsDocBuilder.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(filelevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(filelevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    +    1);    	non-compiled	[CE]  	7	None	replace
264	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append( "n ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.append( "n ");	  JsDocToken    stream    =    fileLevelJsDocBuilder.getParent();    	non-compiled	[CE]  	76	None	replace
265	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	56	None	replace
266	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.append(fileLevelJsDocBuilder);	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	56	None	replace
267	[BUG]  [BUGGY]  token  =  next().toString()  +  fileLevelJsDocBuilder.length();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().toString()  +  fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().toString()  +  fileLevelJsDocBuilder.length();	  token    =    next().toString();    	non-compiled	[CE]  	62	None	replace
268	[BUG]  [BUGGY]  token  =  next().append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().append(fileLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().append(fileLevelJsDocBuilder.toString());	  token    =    next().toString();    	non-compiled	[CE]  	62	None	replace
269	[BUG]  [BUGGY]  token  =  next().toString()  +  fileLevelJsDocBuilder.charAt(0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().toString()  +  fileLevelJsDocBuilder.charAt(0);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().toString()  +  fileLevelJsDocBuilder.charAt(0);	  token    =    next().toString();    	non-compiled	[CE]  	62	None	replace
270	[BUG]  [BUGGY]  token  =  next().toString(),  fileLevelJsDocBuilder.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().toString(),  fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().toString(),  fileLevelJsDocBuilder.length());	  token    =    next().toString();    	non-compiled	[CE]  	62	None	replace
271	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  1);	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
272	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toString()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.toString()  +  1;	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
273	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
274	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
275	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
276	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
277	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ')+  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('  ')+  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('  ')+  1;	  token    =    fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	25	None	replace
278	[BUG]  [BUGGY]  token  =  fileLevelJSDocBuilder.length();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJSDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJSDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    +    1;    	non-compiled	[CE]  	26	None	replace
279	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  true);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  true);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());    	non-compiled	[CE]  	40	None	replace
280	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  false);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText(),  false);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());    	non-compiled	[CE]  	40	None	replace
281	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText()  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText()  -  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getText());    	non-compiled	[CE]  	40	None	replace
282	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.charAt(0);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.charAt(0);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.charAt(0);	  token    =    this.fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	73	None	replace
283	[BUG]  [BUGGY]  token  =  next().substring(0,  next().length()  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().substring(0,  next().length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().substring(0,  next().length()  -  1);	  token    =    next().trim();    	non-compiled	[CE]  	79	None	replace
284	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder().trim();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder().trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder().trim();	  token    =    next().trim();    	non-compiled	[CE]  	79	None	replace
285	[BUG]  [BUGGY]  token  =  stream.getToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  stream.getToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  stream.getToken();	  token    =    this.fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	71	None	replace
286	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.reset();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.reset();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.reset();	  token    =    this.fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	71	None	replace
287	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(fileOverviewJSDocInfo);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(fileOverviewJSDocInfo);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(fileOverviewJSDocInfo);	  token    =    fileLevelJsDocBuilder.toString(lineno);    	non-compiled	[CE]  	24	None	replace
288	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(sourceFile);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(sourceFile);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(sourceFile);	  token    =    fileLevelJsDocBuilder.toString(lineno);    	non-compiled	[CE]  	24	None	replace
289	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  +  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(lineno  +  2);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(lineno  +  2);	  token    =    fileLevelJsDocBuilder.toString(lineno);    	non-compiled	[CE]  	24	None	replace
290	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  6);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  6);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  6);	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	49	None	replace
291	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  *  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  *  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  *  1;	  token    =    fileLevelJsDocBuilder.token    -    1;    	non-compiled	[CE]  	45	None	replace
292	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
293	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
294	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(file  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(file  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(file	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
295	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.trim();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.trim();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	57	None	replace
296	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0)  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0)  +  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0)  +  1);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
297	[BUG]  [BUGGY]  token  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileOverviewJSDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
298	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(1));	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
299	[BUG]  [BUGGY]  token  =  nextToken()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  nextToken()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  nextToken()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
300	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('ufffd');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('ufffd');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('ufffd');	  token    =    fileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  	19	None	replace
301	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  4);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  4);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  4);	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
302	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  token    =    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
303	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineNumber);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineNumber);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineNumber);	  token    =    fileLevelJsDocBuilder.append(type);    	non-compiled	[CE]  	22	None	replace
304	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.gettoken();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.gettoken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.gettoken();	  token    =    fileLevelJsDocBuilder.getToken()    +    1;    	non-compiled	[CE]  	12	None	replace
305	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  3);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno  +  3);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno  +  3);	  token    =    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	20	None	replace
306	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( ": ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( ": ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( ": ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
307	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "no_unreachable ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "no_unreachable ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( "no_unreachable ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
308	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.getLast();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.getLast();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.getLast();	  token    =    fileLevelJsDocBuilder.first();    	non-compiled	[CE]  	30	None	replace
309	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('[');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('[');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('[');	  token    =    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	21	None	replace
310	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.toString();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileOverviewJSDocBuilder.toString();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	32	None	replace
311	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString()  +  1;	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	32	None	replace
312	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)+  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)+  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  2)+  1;	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+    1;    	non-compiled	[CE]  	80	None	replace
313	[BUG]  [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	TokenBuffer  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    	non-compiled	[CE]  	6	None	replace
314	[BUG]  [BUGGY]  toSource  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  toSource  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	toSource  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    	non-compiled	[CE]  	6	None	replace
315	[BUG]  [BUGGY]  Token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  Token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	Token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    	non-compiled	[CE]  	6	None	replace
316	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);	  JsDocToken    stream    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	78	None	replace
317	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder(fileOverviewJSDocBuilder);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder(fileOverviewJSDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder(fileOverviewJSDocBuilder);	  token    =    fileLevelJsDocBuilder();    	non-compiled	[CE]  	29	None	replace
318	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.charno());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.charno());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.charno());	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
319	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.toString()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.toString()  -  1);	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
320	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.trim());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineno.trim());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineno.trim());	  token    =    fileLevelJsDocBuilder.append(lineno.toString());    	non-compiled	[CE]  	42	None	replace
321	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  NO_UNREAD_TOKEN;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  NO_UNREAD_TOKEN;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  NO_UNREAD_TOKEN;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
322	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  1L;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  1L;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  +  1L;	  token    =    fileLevelJsDocBuilder.token    +    1;    	non-compiled	[CE]  	44	None	replace
323	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  6;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token  +  6;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token  +  6;	  token    =    fileLevelJsDocBuilder.token    +    1;    	non-compiled	[CE]  	44	None	replace
324	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  stream.getLineno();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getLineno();    	non-compiled	[CE]  	34	None	replace
325	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	11	None	replace
326	[BUG]  [BUGGY]  token  =  next().getToken(),  fileLevelJsDocBuilder.toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().getToken(),  fileLevelJsDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getToken(),  fileLevelJsDocBuilder.toString();	  token    =    next().getToken();    	non-compiled	[CE]  	13	None	replace
327	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getNextToken();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getNextToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getNextToken();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
328	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.firstToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.firstToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.firstToken();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
329	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getLastToken();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getLastToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getLastToken();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
330	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
331	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getType());	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
332	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token(0);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.token(0);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.token(0);	  token    =    fileLevelJsDocBuilder.token();    	non-compiled	[CE]  	10	None	replace
333	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.tokenToString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.tokenToString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.tokenToString();	  token    =    fileLevelJsDocBuilder.token();    	non-compiled	[CE]  	10	None	replace
334	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getName());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getName());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getName());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
335	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.getLength());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.getLength());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.getLength());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
336	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "[ ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "[ ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + "[ ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
337	[BUG]  [BUGGY]  token  =  FileLevelJsDocBuilder.toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  FileLevelJsDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  FileLevelJsDocBuilder.toString();	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
338	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.append('n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.append('n');	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
339	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('$',  'n');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('$',  'n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('$',  'n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
340	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'n');  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  'n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
341	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('-',  '-');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('-',  '-');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('-',  '-');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
342	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineNumber);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(lineNumber);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(lineNumber);	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
343	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(createJSTypeExpression(type));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(createJSTypeExpression(type));	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);    	non-compiled	[CE]  	55	None	replace
344	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString(precedence);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString(precedence);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString(precedence);	  token    =    fileLevelJsDocBuilder.toString(type);    	non-compiled	[CE]  	51	None	replace
345	[BUG]  [BUGGY]  token  =  fileLevelJAsDocBuilder.length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJAsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJAsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    +    2;    	non-compiled	[CE]  	28	None	replace
346	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  lineno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  lineno);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  lineno);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
347	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  lineNumber);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  lineNumber);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  lineNumber);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
348	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),  1);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
349	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING  +  1;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.VALUE_STRING;    	non-compiled	[CE]  	70	None	replace
350	[BUG]  [BUGGY]  token  =  nextToken()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  nextToken()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  nextToken()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.VALUE_STRING;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.VALUE_STRING;    	non-compiled	[CE]  	70	None	replace
351	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(jsdocBuilder);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(jsdocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(jsdocBuilder);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	59	None	replace
352	[BUG]  [BUGGY]  Token  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  Token  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	Token  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
353	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	TokenBuffer  token  =  new  TokenBuffer(fileLevelJsDocBuilder.length()  -  1);	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
354	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toPlainString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toPlainString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toPlainString();	  token    =    fileLevelJsDocBuilder.toString()    +    1;    	non-compiled	[CE]  	4	None	replace
355	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toPath();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toPath();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toPath();	  token    =    fileLevelJsDocBuilder.toString()    +    1;    	non-compiled	[CE]  	4	None	replace
356	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.replace(',',  '-');  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.replace(',',  '-');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileTypeJsDocBuilder.replace(',',  '-');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace(',',    '-');    	non-compiled	[CE]  	37	None	replace
357	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.indexOf(',',  '-');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.indexOf(',',  '-');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.indexOf(',',  '-');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace(',',    '-');    	non-compiled	[CE]  	37	None	replace
358	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(filelevelJsDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(filelevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(filelevelJsDocBuilder.toString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	43	None	replace
359	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toPlainString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toPlainString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toPlainString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	43	None	replace
360	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineLevelJsDocBuilder.toString());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineLevelJsDocBuilder.toString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	43	None	replace
361	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
362	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJSDocBuilder.substring(0,  fileLevelJsDocBuilder.length()));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
363	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
364	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
365	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('-',  'r');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('-',  'r');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('-',  'r');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
366	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('r',  'n');  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('r',  'n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('r',  'n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
367	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('$',  'r');  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('$',  'r');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('$',  'r');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'r');    	non-compiled	[CE]  	38	None	replace
368	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));    	non-compiled	[CE]  	67	None	replace
369	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1,  true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1,  true);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1,  true);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    true);    	non-compiled	[CE]  	17	None	replace
370	[BUG]  [BUGGY]  token  =  FileLevelJsDocBuilder.trim();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  FileLevelJsDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  FileLevelJsDocBuilder.trim();	  token    =    this.fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	47	None	replace
371	[BUG]  [BUGGY]  token  =  filelevelJsDocBuilder.trim();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  filelevelJsDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  filelevelJsDocBuilder.trim();	  token    =    fileLevelJsDocBuilder.trim()    +    1;    	non-compiled	[CE]  	48	None	replace
372	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(1);	  token    =    fileLevelJsDocBuilder.trim()    +    1;    	non-compiled	[CE]  	48	None	replace
373	[BUG]  [BUGGY]  token  =  fileLevelJAsDocBuilder.trim();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJAsDocBuilder.trim();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJAsDocBuilder.trim();	  token    =    fileLevelJsDocBuilder.trim()    +    1;    	non-compiled	[CE]  	48	None	replace
374	[BUG]  [BUGGY]  Token  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  Token  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	Token  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));	  if(fileLevelJsDocBuilder!=    null)    {    token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    }    	non-compiled	[CE]  	66	None	replace
375	[BUG]  [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(fileLevelJsDocBuilder.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  TokenBuffer  token  =  new  TokenBuffer(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	TokenBuffer  token  =  new  TokenBuffer(fileLevelJsDocBuilder.length());	  if(fileLevelJsDocBuilder!=    null)    {    token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));    }    	non-compiled	[CE]  	66	None	replace
376	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
377	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(1));  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
378	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
379	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  JsDocToken    stream    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	78	None	replace
380	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getSource();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getSource();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getSource();	  JsDocToken    stream    =    fileLevelJsDocBuilder.next();    	non-compiled	[CE]  	78	None	replace
381	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString(),  preserve);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());    	non-compiled	[CE]  	39	None	replace
382	[BUG]  [BUGGY]  tokens  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  tokens  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	tokens  =  fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	2	None	replace
383	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ". ";  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + ". ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + ". ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
384	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "  - ";  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.toString()  + "  - ";  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.toString()  + "  - ";	  token    =    fileLevelJsDocBuilder.toString()    +   "n   ";    	non-compiled	[CE]  	3	None	replace
385	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineNumber.toString());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(lineNumber.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(lineNumber.toString());	  token    =    fileLevelJsDocBuilder.append(typeString.toString());    	non-compiled	[CE]  	41	None	replace
386	[BUG]  [BUGGY]  token  -=  fileLevelJsDocBuilder.getToken();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  -=  fileLevelJsDocBuilder.getToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  -=  fileLevelJsDocBuilder.getToken();	  token    =    fileLevelJsDocBuilder.getToken()    +    1;    	non-compiled	[CE]  	12	None	replace
387	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.removeToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.removeToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.removeToken();	  token    =    fileLevelJsDocBuilder.getToken()    +    1;    	non-compiled	[CE]  	12	None	replace
388	[BUG]  [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.getToken();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.getToken();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  = " "  +  fileLevelJsDocBuilder.getToken();	  token    =    fileLevelJsDocBuilder.getToken()    +    1;    	non-compiled	[CE]  	12	None	replace
389	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)  +  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
390	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	if(fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0)    +    1);    	non-compiled	[CE]  	18	None	replace
391	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  -  2);	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(2));    	non-compiled	[CE]  	67	None	replace
392	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  line));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(1));    	non-compiled	[CE]  	16	None	replace
393	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.reset());  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.reset());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.reset());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
394	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.removeLast());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.removeLast());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.removeLast());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getLength());    	non-compiled	[CE]  	61	None	replace
395	[BUG]  [BUGGY]  token  =  next().fileLevelJsDocBuilder.length();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().fileLevelJsDocBuilder.length();	  token    =    this.fileLevelJsDocBuilder.length();    	non-compiled	[CE]  	73	None	replace
396	[BUG]  [BUGGY]  token  = "fileLevelJsDocBuilder.length();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  = "fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  = "fileLevelJsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    +    2;    	non-compiled	[CE]  	28	None	replace
397	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.get();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.get();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.get();	  token    =    fileLevelJsDocBuilder.reset();    	non-compiled	[CE]  	60	None	replace
398	[BUG]  [BUGGY]  token  -  fileLevelJsDocBuilder.length();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  -  fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  -  fileLevelJsDocBuilder.length();	  token    =    fileLevelJsDocBuilder.length()    +    1;    	non-compiled	[CE]  	26	None	replace
399	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(jsdocBuilder.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  fileLevelJsDocBuilder.append(jsdocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	fileLevelJsDocBuilder.append(jsdocBuilder.toString());	  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	58	None	replace
400	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder,  preserve);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder,  preserve);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder,  preserve);	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder);    	non-compiled	[CE]  	59	None	replace
401	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.first();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.first();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.first();	  token    =    fileLevelJsDocBuilder.first();    	non-compiled	[CE]  	30	None	replace
402	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.peek();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.peek();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.peek();	  token    =    fileLevelJsDocBuilder.first();    	non-compiled	[CE]  	30	None	replace
403	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  JsDocToken.VALUE_STRING;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  JsDocToken.VALUE_STRING;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  JsDocToken.VALUE_STRING;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.VALUE_STRING;    	non-compiled	[CE]  	70	None	replace
404	[BUG]  [BUGGY]  token  =  next()?  stream.getToken()  :  JsDocToken.VALUE_STRING;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  stream.getToken()  :  JsDocToken.VALUE_STRING;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  stream.getToken()  :  JsDocToken.VALUE_STRING;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.VALUE_STRING;    	non-compiled	[CE]  	70	None	replace
405	[BUG]  [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	State  state  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  State    state    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	77	None	replace
406	[BUG]  [BUGGY]  tokens.add(fileLevelJsDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  tokens.add(fileLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	tokens.add(fileLevelJsDocBuilder.toString());	  token    =    fileLevelJsDocBuilder.toString()    +    1;    	non-compiled	[CE]  	4	None	replace
407	[BUG]  [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  = " "  +  fileLevelJsDocBuilder.toString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  = " "  +  fileLevelJsDocBuilder.toString();	  token    =    fileLevelJsDocBuilder.toString()    +    1;    	non-compiled	[CE]  	4	None	replace
408	[BUG]  [BUGGY]  tokens.add(fileLevelJsDocBuilder.length());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  tokens.add(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	tokens.add(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.length()    -    1;    	non-compiled	[CE]  	27	None	replace
409	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.peek();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.peek();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.peek();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
410	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.readLine();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.readLine();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.readLine();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
411	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.removeFirst();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.removeFirst();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.removeFirst();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
412	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.tokenToFront();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.tokenToFront();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.tokenToFront();	  JsDocToken    stream    =    fileLevelJsDocBuilder.getCurrentToken();    	non-compiled	[CE]  	74	None	replace
413	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  2));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  2));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  fileLevelJsDocBuilder.length()  2));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,    fileLevelJsDocBuilder.length()    -    1));    	non-compiled	[CE]  	65	None	replace
414	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(0,  this.fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(0,  this.fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.substring(0,  this.fileLevelJsDocBuilder.length()  -  1);	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
415	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
416	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(0,  this.fileLevelJsDocBuilder.length());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  this.fileLevelJsDocBuilder.substring(0,  this.fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  this.fileLevelJsDocBuilder.substring(0,  this.fileLevelJsDocBuilder.length());	  token    =    this.fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	63	None	replace
417	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toPlainString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.toPlainString();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.toPlainString();	  JsDocToken    stream    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	75	None	replace
418	[BUG]  [BUGGY]  token  =  next()?  this.fileLevelJsDocBuilder.getToken()  :  null;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  this.fileLevelJsDocBuilder.getToken()  :  null;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  this.fileLevelJsDocBuilder.getToken()  :  null;	  token    =    this.fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	71	None	replace
419	[BUG]  [BUGGY]  token  =  next()?  this.fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  this.fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  this.fileLevelJsDocBuilder.getToken()  :  JsDocToken.FIELD_NAME;	  token    =    this.fileLevelJsDocBuilder.getToken();    	non-compiled	[CE]  	71	None	replace
420	[BUG]  [BUGGY]  token  =  next()?  this.fileLevelJsDocBuilder.trim()  :  null;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  this.fileLevelJsDocBuilder.trim()  :  null;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  this.fileLevelJsDocBuilder.trim()  :  null;	  token    =    this.fileLevelJsDocBuilder.trim();    	non-compiled	[CE]  	47	None	replace
421	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(2));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(2));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.substring(2));	  token    =    fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.charAt(0));    	non-compiled	[CE]  	15	None	replace
422	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)/  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)/  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1)/  1;	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length())+    1;    	non-compiled	[CE]  	80	None	replace
423	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(charno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(charno);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(charno);	  token    =    fileLevelJsDocBuilder.append(lineno);    	non-compiled	[CE]  	20	None	replace
424	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.readLine();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.readLine();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.readLine();	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.getLineno();    	non-compiled	[CE]  	34	None	replace
425	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getValue());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.getValue());	  token    =    fileLevelJsDocBuilder.getValue();    	non-compiled	[CE]  	31	None	replace
426	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.substring(fileLevelJsDocBuilder.length()  -  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.substring(fileLevelJsDocBuilder.length()  -  1);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.substring(fileLevelJsDocBuilder.length()  -  1);	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());    	non-compiled	[CE]  	5	None	replace
427	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('#',  'n');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('#',  'n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('#',  'n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
428	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  'n');  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  'n');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('/',  'n');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
429	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  '/');  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  '/');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.replace('n',  '/');	  FileLevelJsDocBuilder    fileLevelJsDocBuilder    =    fileLevelJsDocBuilder.replace('n',    'n');    	non-compiled	[CE]  	36	None	replace
430	[BUG]  [BUGGY]  token  =  next().getParent();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().getParent();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().getParent();	  token    =    next().getToken();    	non-compiled	[CE]  	13	None	replace
431	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  preserve));  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  preserve));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.substring(0,  preserve));	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.charAt(0),    preserve);    	non-compiled	[CE]  	14	None	replace
432	[BUG]  [BUGGY]  token  =  fileLevelJAsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJAsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJAsDocBuilder.append(fileLevelJsDocBuilder.toString());	  token    =    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString()    +    1);    	non-compiled	[CE]  	43	None	replace
433	[BUG]  [BUGGY]  token  =  next().toString(),  fileLevelJsDocBuilder.length();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next().toString(),  fileLevelJsDocBuilder.length();  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next().toString(),  fileLevelJsDocBuilder.length();	  token    =    next().toString();    	non-compiled	[CE]  	62	None	replace
434	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  token    =    fileLevelJsDocBuilder();    	non-compiled	[CE]  	29	None	replace
435	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  JsDocToken.FIELD_NAME;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  JsDocToken.FIELD_NAME;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  JsDocToken.FIELD_NAME;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
436	[BUG]  [BUGGY]  token  =  next()?  stream.getToken()  :  JsDocToken.FIELD_NAME;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  stream.getToken()  :  JsDocToken.FIELD_NAME;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  stream.getToken()  :  JsDocToken.FIELD_NAME;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    JsDocToken.FIELD_NAME;    	non-compiled	[CE]  	68	None	replace
437	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "; ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "; ");  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append( "; ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	46	None	replace
438	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  null;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  null;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.tokenToString()  :  null;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
439	[BUG]  [BUGGY]  token  =  next()?  stream.getToken()  :  null;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  stream.getToken()  :  null;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  stream.getToken()  :  null;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
440	[BUG]  [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.START;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.START;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  next()?  fileLevelJsDocBuilder.getToken()  :  JsDocToken.START;	  token    =    next()?    fileLevelJsDocBuilder.getToken()    :    null;    	non-compiled	[CE]  	69	None	replace
441	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.tokenToString()  +  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.tokenToString()  +  1;  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.tokenToString()  +  1;	  token    =    fileLevelJsDocBuilder.token    +    1;    	non-compiled	[CE]  	44	None	replace
442	[BUG]  [BUGGY]  tokens.add(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()));  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  tokens.add(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()));  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	tokens.add(fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()));	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
443	[BUG]  [BUGGY]  token  =  fileLevelJAsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJAsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJAsDocBuilder.charAt(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
444	[BUG]  [BUGGY]  tokens  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  tokens  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	tokens  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length());	  token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    2);    	non-compiled	[CE]  	53	None	replace
445	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	8	None	replace
446	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
447	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(fileOverviewJSDocBuilder.toString());	  FileLevelJsDocBuilder    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    	non-compiled	[CE]  	35	None	replace
448	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('/');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  token  =  fileLevelJsDocBuilder.append('/');  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	token  =  fileLevelJsDocBuilder.append('/');	  token    =    fileLevelJsDocBuilder.append('n');    	non-compiled	[CE]  	21	None	replace
449	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJs  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJs  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJs	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
450	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJ  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJ  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevelJ	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
451	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevel  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevel  [BUGGY]      continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  type  =  null;  if  (token  !=  JsDocToken.EOL  &&  token  !=  JsDocToken.EOC)  {  type  =  createJSTypeExpression(  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	360	360	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  token  =  fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()  -  1);  }  else  {  System.arraycopy(fileLevel	  if(fileLevelJsDocBuilder.length()    >    0)    {    token    =    fileLevelJsDocBuilder.charAt(fileLevelJsDocBuilder.length()    -    1);    }    else    {    System.arraycopy(fileLevelJsDocBuilder,    0,    fileLevelJsDo    	non-compiled	[CE]  	9	None	replace
