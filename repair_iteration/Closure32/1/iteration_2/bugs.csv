bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  LICENSE);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	12	None	replace
8	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Preserve.PRESERVE);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Preserve.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Preserve.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	12	None	replace
9	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	10	None	replace
10	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	10	None	replace
11	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	10	None	replace
12	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	10	None	replace
13	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	10	None	replace
14	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	10	None	replace
15	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	5	None	replace
16	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	5	None	replace
17	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  true);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	5	None	replace
18	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	5	None	replace
19	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	5	None	replace
20	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  null);  [CE]  orphaned  case  [FE]                          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	5	None	replace
21	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
22	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
23	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
24	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
25	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
26	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
27	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
28	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
29	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
30	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
31	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
32	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  unreadToken);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
33	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  orphaned  case	6	None	replace
34	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  orphaned  case	6	None	replace
35	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                      ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.line ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.line ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  orphaned  case	6	None	replace
36	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.whitespace ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  orphaned  case	6	None	replace
37	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.literal ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence. ",  stream.getLineno(),  stream.getCharno());  [CE]  orphaned  case  [FE]                            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence. ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence. ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  orphaned  case	6	None	replace
39	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno());  break;  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserve ",  stream.getLineno(),  stream.getCharno());  break;	      	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
41	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
42	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
43	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
44	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
46	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverview,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
48	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
49	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	11	None	replace
53	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	11	None	replace
54	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	11	None	replace
55	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  parser);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	8	None	replace
60	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
61	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  LICENSE);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  LICENSE);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
65	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  null);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
66	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(fileOverviewJSDocInfo,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
67	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(lineOverview,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	4	None	replace
68	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
71	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
72	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
73	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.preserved ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  	6	None	replace
74	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence ",  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence ",  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence.precedence ",  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  	6	None	replace
75	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getLineno(),  stream.getCharno());  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ".getLineno(),  stream.getCharno());	      	non-compiled	[CE]  	6	None	replace
76	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	7	None	replace
78	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LICENSE);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LICENSE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.LICENSE);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	7	None	replace
79	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  false);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
80	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  fileOverview);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
81	[BUG]  [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  fileLevelJsDocBuilder  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	11	None	replace
82	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	11	None	replace
83	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  fileOverviewJSDocInfo);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	12	None	replace
84	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  whitespaceOption.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	12	None	replace
85	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  null);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  null);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	12	None	replace
86	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  false);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  false);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  false);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	12	None	replace
87	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  true);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  true);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  WhitespaceOption.PRESERVE,  true);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	12	None	replace
88	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LINE);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LINE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.LINE);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
89	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	1	None	replace
90	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	1	None	replace
91	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Document.PRESERVE);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Document.PRESERVE);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPrettyPrinter(token,  Document.PRESERVE);	  ExtractionInfo    preserveInfo    =    extractPrettyPrinter(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	12	None	replace
92	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	8	None	replace
93	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractOptionalPreserveInfo(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractOptionalPreserveInfo(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	8	None	replace
94	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE,  buffer);	  ExtractionInfo    preserveInfo    =    extractPreserveTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	10	None	replace
95	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	2	None	replace
96	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreserveInfoBlock(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreserveInfoBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	2	None	replace
97	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  orphaned  case  [FE]        ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
98	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE,  PreserveInfo.DEFAULT);	  ExtractionInfo    preserveInfo    =    extractLicenseTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	7	None	replace
99	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	4	None	replace
100	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractFileOverview(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	4	None	replace
101	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.pre "),  stream.getLineno(),  stream.getCharno());  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.pre "),  stream.getLineno(),  stream.getCharno());  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.pre "),  stream.getLineno(),  stream.getCharno());	      	non-compiled	[CE]  	6	None	replace
102	[BUG]  [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  break;  [CE]  orphaned  case  [FE]                    ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  break;  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	parser.addParserWarning( "msg.jsdoc.fileoverview.precedence ",  stream.getLineno(),  stream.getCharno());  break;	      	non-compiled	[CE]  orphaned  case	6	None	replace
103	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	9	None	replace
104	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserve);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractLocalFileOverview(token,  WhitespaceOption.PRESERVE,  preserve);	  ExtractionInfo    preserveInfo    =    extractLocalFileOverview(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	9	None	replace
105	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	3	None	replace
106	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]              ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERVE(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERVE(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	3	None	replace
107	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [CE]  orphaned  case  [FE]          ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  null);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE,  null);	  ExtractionInfo    preserveInfo    =    extractWhitespaceTextualBlock(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	11	None	replace
108	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo.string);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  	5	None	replace
109	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [CE]  orphaned  case  [FE]                  ComparisonFailure    [CONTEXT]    if  (!jsdocBuilder.recordFileOverview(fileOverview)  ||  fileOverviewJSDocInfo  !=  null)  {  parser.addParserWarning(   "msg.jsdoc.fileoverview.extra   ",  stream.getLineno(),  stream.getCharno());  }  continue  retry;  case  LICENSE:  case  PRESERVE:    [BUGGY]  ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo);  [BUGGY]    extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {  fileLevelJsDocBuilder.append(preserve);  }  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	348	350	4	replace	ExtractionInfo  preserveInfo  =  extractPreSERve(token,  WhitespaceOption.PRESERVE,  preserveInfo);	  ExtractionInfo    preserveInfo    =    extractPreSERve(token,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	5	None	replace
